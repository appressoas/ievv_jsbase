[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/SignalHandlerSingleton.js",
    "memberof": null,
    "longname": "source/SignalHandlerSingleton.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import makeCustomError from \"./makeCustomError\";\nimport PrettyFormat from \"./utils/PrettyFormat\";\n\n/**\n * Exception raised by {@link HttpCookies#getStrict} when the cookie is not found.\n *\n * @type {Error}\n */\nexport let DuplicateReceiverNameForSignal = makeCustomError('DuplicateReceiverNameForSignal');\n\n\n/**\n * Represents information about the received signal.\n *\n * An object of this class is sent to the ``callback``\n * of all signal receivers.\n *\n * The data sent by the signal is available in\n * {@link ReceivedSignalInfo.data}.\n */\nexport class ReceivedSignalInfo {\n  constructor(data, signalName, receiverName) {\n    /**\n     * The data sent by {@link SignalHandlerSingleton#send}.\n     */\n    this.data = data;\n\n    /**\n     * The signal name.\n     *\n     * @type {string}\n     */\n    this.signalName = signalName;\n\n    /**\n     * The receiver name.\n     *\n     * @type {string}\n     */\n    this.receiverName = receiverName;\n  }\n\n  /**\n   * Get a string with information about the received signal.\n   * Includes signal name and receiver name.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `ReceivedSignalInfo: signalName=\"${this.signalName}\" receiverName=\"${this.receiverName}\"`;\n  }\n\n  /**\n   * Get the data pretty formatted as a string.\n   *\n   * @returns {string}\n   */\n  getPrettyFormattedData() {\n    return new PrettyFormat(this.data).toString(2);\n  }\n\n  /**\n   * Get a string with debug information about the received signal.\n   * Includes signal name, receiver name, and pretty formatted data.\n   *\n   * @returns {string}\n   */\n  toDebugString() {\n    return `${this.toString} data=${this.getPrettyFormattedData()}`;\n  }\n}\n\n\n/**\n * Private class used by {@link _SignalReceivers} to represent\n * a single receiver listening for a single signal.\n */\nclass _SignalReceiver {\n  constructor(signal, name, callback) {\n    this.signal = signal;\n    this.name = name;\n    this.callback = callback;\n  }\n\n  /**\n   * Asynchronously trigger the receiver callback.\n   * @param data The signal data (the data argument provided for\n   *    {@link SignalHandlerSingleton#send}.\n   */\n  trigger(data) {\n    setTimeout(() => {\n      this.callback(new ReceivedSignalInfo(data, this.signal.name, this.name));\n    }, 0);\n  }\n}\n\n\n/**\n * Object containing debugging information about a sent\n * signal.\n */\nexport class SentSignalInfo {\n  constructor(signalName) {\n    /**\n     * The signal name.\n     *\n     * @type {string}\n     */\n    this.signalName = signalName;\n\n    /**\n     * Array of triggered receiver names.\n     *\n     * @type {Array}\n     */\n    this.triggeredReceiverNames = [];\n  }\n\n  _addReceiverName(receiverName) {\n    this.triggeredReceiverNames.push(receiverName);\n  }\n\n  /**\n   * Get a string representation of the sent signal info.\n   *\n   * @returns {string}\n   */\n  toString() {\n    let receivers = this.triggeredReceiverNames.join(', ');\n    if(receivers === '') {\n      receivers = 'NO RECEIVERS';\n    }\n    return `Signal: ${this.signalName} was sent to: ${receivers}`;\n  }\n}\n\n\n/**\n * Private class used by {@link SignalHandlerSingleton}\n * to represent all receivers for a single signal.\n */\nclass _SignalReceivers {\n  constructor(name) {\n    this.name = name;\n    this.receiverMap = new Map();\n  }\n\n  /**\n   * Add a receiver.\n   *\n   * @throw DuplicateReceiverNameForSignal If the receiver is already registered for the signal.\n   */\n  addReceiver(receiverName, callback) {\n    if(this.receiverMap.has(receiverName)) {\n      throw new DuplicateReceiverNameForSignal(\n        `The \"${receiverName}\" receiver is already registered for the \"${this.name}\" signal`);\n    }\n    this.receiverMap.set(\n      receiverName,\n      new _SignalReceiver(this, receiverName, callback));\n  }\n\n  /**\n   * Remove a receiver.\n   *\n   * If the receiver is not registered for the signal,\n   * nothing happens.\n   */\n  removeReceiver(receiverName) {\n    if(this.receiverMap.has(receiverName)) {\n      this.receiverMap.delete(receiverName);\n    }\n  }\n\n  /**\n   * Check if we have a specific receiver for this signal.\n   */\n  hasReceiver(receiverName) {\n    return this.receiverMap.has(receiverName);\n  }\n\n  /**\n   * Get the number of receivers registered for the signal.\n   */\n  receiverCount() {\n    return this.receiverMap.size;\n  }\n\n  /**\n   * Send the signal.\n   *\n   * @param data The data sent with the signal. Forwarded to\n   *      the signal receiver callback.\n   * @param {SentSignalInfo} info If this is provided, we add the\n   *      name of all receivers the signal was sent to.\n   */\n  send(data, info) {\n    for(let receiver of this.receiverMap.values()) {\n      receiver.trigger(data);\n      if(info) {\n        info._addReceiverName(receiver.name);\n      }\n    }\n  }\n}\n\n\n/**\n * The instance of the {@link SignalHandlerSingleton}.\n */\nlet _instance = null;\n\n/**\n * Signal handler singleton for global communication.\n *\n * @example <caption>Basic example</caption>\n * let signalHandler = new SignalHandlerSingleton();\n * signalHandler.addReceiver('myapp.mysignal', 'myotherapp.MyReceiver', (receivedSignalInfo) => {\n *     console.log('Signal received. Data:', receivedSignalInfo.data);\n * });\n * signalHandler.send('myapp.mysignal', {'the': 'data'});\n *\n *\n * @example <caption>Recommended signal and receiver naming</caption>\n *\n * // In myapp/menu/MenuComponent.js\n * class MenuComponent {\n *     constructor(menuName) {\n *         this.menuName = menuName;\n *         let signalHandler = new SignalHandlerSingleton();\n *         signalHandler.addReceiver(\n *             `toggleMenu#${this.menuName}`,\n *             'myapp.menu.MenuComponent',\n *             (receivedSignalInfo) => {\n *                  this.toggle();\n *             }\n *         );\n *     }\n *     toggle() {\n *         // Toggle the menu\n *     }\n * }\n *\n * // In myotherapp/widgets/MenuToggle.js\n * class MenuToggle {\n *     constructor(menuName) {\n *         this.menuName = menuName;\n *     }\n *     toggle() {\n *         let signalHandler = new SignalHandlerSingleton();\n *         signalHandler.send(`toggleMenu#${this.menuName}`);\n *     }\n * }\n *\n * @example <caption>Multiple receivers</caption>\n * let signalHandler = new SignalHandlerSingleton();\n * signalHandler.addReceiver('myapp.mysignal', 'myotherapp.MyFirstReceiver', (receivedSignalInfo) => {\n *     console.log('Signal received by receiver 1!');\n * });\n * signalHandler.addReceiver('myapp.mysignal', 'myotherapp.MySecondReceiver', (receivedSignalInfo) => {\n *     console.log('Signal received by receiver 1!');\n * });\n * signalHandler.send('myapp.mysignal', {'the': 'data'});\n *\n *\n * @example <caption>Debugging</caption>\n * let signalHandler = new SignalHandlerSingleton();\n * signalHandler.addReceiver('mysignal', 'MyReceiver', (receivedSignalInfo) => {\n *     console.log('received signal:', receivedSignalInfo.toString());\n * });\n * signalHandler.send('myapp.mysignal', {'the': 'data'}, (sentSignalInfo) => {\n *     console.log('sent signal info:', sentSignalInfo.toString());\n * });\n *\n */\nexport default class SignalHandlerSingleton {\n\n  constructor() {\n    if(!_instance) {\n      _instance = this;\n      this._signalMap = new Map();\n      this._receiverMap = new Map();\n    }\n    return _instance;\n  }\n\n  /**\n   * Remove all receivers for all signals.\n   *\n   * Useful for debugging and tests, but should not be\n   * used for production code.\n   */\n  clearAllReceiversForAllSignals() {\n    this._signalMap.clear();\n  }\n\n  /**\n   * Add a receiver for a specific signal.\n   *\n   * @param {string} signalName The name of the signal.\n   *      Typically something like ``toggleMenu`` or ``myapp.toggleMenu``.\n   *\n   *      What if we have multiple objects listening for this ``toggleMenu``\n   *      signal, and we only want to toggle a specific menu? You need\n   *      to ensure the signalName is unique for each menu. We recommend\n   *      that you do this by adding ``#<context>``. For example\n   *      ``toggleMenu#mainmenu``. This is shown in one of the examples\n   *      above.\n   * @param {string} receiverName The name of the receiver.\n   *      Must be unique for the signal.\n   *      We recommend that you use a very explicit name for your signals.\n   *      It should normally be the full path to the method or function receiving\n   *      the signal. So if you have a class named ``myapp/menu/MenuComponent.js``\n   *      that receives a signal to toggle the menu, the receiverName should be\n   *      ``myapp.menu.MenuComponent``.\n   * @param callback The callback to call when the signal is sent.\n   *      The callback is called with a single argument - a\n   *      {@link ReceivedSignalInfo} object.\n   */\n  addReceiver(signalName, receiverName, callback) {\n    if(typeof callback === 'undefined') {\n      throw new TypeError('The callback argument for addReceiver() is required.');\n    }\n    if(!this._signalMap.has(signalName)) {\n      this._signalMap.set(signalName, new _SignalReceivers(signalName));\n    }\n    if(this._receiverMap.has(receiverName)) {\n      this._receiverMap.get(receiverName).add(signalName);\n    } else {\n      this._receiverMap.set(receiverName, new Set([signalName]));\n    }\n    let signal = this._signalMap.get(signalName);\n    signal.addReceiver(receiverName, callback)\n  }\n\n  /**\n   * Remove a receiver for a signal added with {@link SignalHandlerSingleton#addReceiver}.\n   *\n   * @param {string} signalName The name of the signal.\n   * @param {string} receiverName The name of the receiver.\n   */\n  removeReceiver(signalName, receiverName) {\n    if(this._signalMap.has(signalName)) {\n      let signal = this._signalMap.get(signalName);\n      signal.removeReceiver(receiverName);\n      if(signal.receiverCount() == 0) {\n        this._signalMap.delete(signalName);\n      }\n      let receiverSignalSet = this._receiverMap.get(receiverName);\n      if(receiverSignalSet != undefined) {\n        if(receiverSignalSet.has(signalName)) {\n          receiverSignalSet.delete(signalName);\n        }\n        if(receiverSignalSet.size == 0) {\n          this._receiverMap.delete(receiverName);\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all signals registered for a receiver.\n   *\n   * @param {string} receiverName The name of the receiver.\n   */\n  removeAllSignalsFromReceiver(receiverName) {\n    if(this._receiverMap.has(receiverName)) {\n      for(let signalName of this._receiverMap.get(receiverName)) {\n        this.removeReceiver(signalName, receiverName);\n      }\n    }\n  }\n\n  /**\n   * Check if a signal has a specific receiver.\n   *\n   * @param {string} signalName The name of the signal.\n   * @param {string} receiverName The name of the receiver.\n   */\n  hasReceiver(signalName, receiverName) {\n    if(this._signalMap.has(signalName)) {\n      let signal = this._signalMap.get(signalName);\n      return signal.hasReceiver(receiverName);\n    } else {\n      return false;\n    }\n  }\n\n\n  /**\n   * Remove all receivers for a specific signal.\n   *\n   * @param {string} signalName The name of the signal to remove.\n   */\n  clearAllReceiversForSignal(signalName) {\n    if(this._signalMap.has(signalName)) {\n      this._signalMap.delete(signalName);\n    }\n  }\n\n  /**\n   * Send a signal.\n   *\n   * @param {string} signalName The name of the signal to send.\n   * @param data Data to send to the callback of all receivers registered\n   *      for the signal.\n   * @param infoCallback An optional callback that receives information\n   *      about the signal. Useful for debugging what actually received\n   *      the signal. The ``infoCallback`` is called with a single\n   *      argument - a {@link SentSignalInfo} object.\n   */\n  send(signalName, data, infoCallback) {\n    let info = null;\n    if(infoCallback) {\n      info = new SentSignalInfo(signalName);\n    }\n    if(this._signalMap.has(signalName)) {\n      let signal = this._signalMap.get(signalName);\n      signal.send(data, info);\n    }\n    if(infoCallback) {\n      infoCallback(info);\n    }\n  }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DuplicateReceiverNameForSignal",
    "memberof": "source/SignalHandlerSingleton.js",
    "longname": "source/SignalHandlerSingleton.js~DuplicateReceiverNameForSignal",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/SignalHandlerSingleton",
    "importStyle": "{DuplicateReceiverNameForSignal}",
    "description": "Exception raised by {@link HttpCookies#getStrict} when the cookie is not found.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ReceivedSignalInfo",
    "memberof": "source/SignalHandlerSingleton.js",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/SignalHandlerSingleton",
    "importStyle": "{ReceivedSignalInfo}",
    "description": "Represents information about the received signal.\n\nAn object of this class is sent to the ``callback``\nof all signal receivers.\n\nThe data sent by the signal is available in\n{@link ReceivedSignalInfo.data}.",
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 3,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo#constructor",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "signalName",
        "types": [
          "*"
        ]
      },
      {
        "name": "receiverName",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo#data",
    "access": null,
    "description": "The data sent by {@link SignalHandlerSingleton#send}.",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "signalName",
    "memberof": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo#signalName",
    "access": null,
    "description": "The signal name.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "receiverName",
    "memberof": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo#receiverName",
    "access": null,
    "description": "The receiver name.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo#toString",
    "access": null,
    "description": "Get a string with information about the received signal.\nIncludes signal name and receiver name.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPrettyFormattedData",
    "memberof": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo#getPrettyFormattedData",
    "access": null,
    "description": "Get the data pretty formatted as a string.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toDebugString",
    "memberof": "source/SignalHandlerSingleton.js~ReceivedSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~ReceivedSignalInfo#toDebugString",
    "access": null,
    "description": "Get a string with debug information about the received signal.\nIncludes signal name, receiver name, and pretty formatted data.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "_SignalReceiver",
    "memberof": "source/SignalHandlerSingleton.js",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceiver",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/SignalHandlerSingleton",
    "importStyle": null,
    "description": "Private class used by {@link _SignalReceivers} to represent\na single receiver listening for a single signal.",
    "lineNumber": 78,
    "interface": false
  },
  {
    "__docId__": 11,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceiver",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceiver#constructor",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "signal",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "signal",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceiver",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceiver#signal",
    "access": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceiver",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceiver#name",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "callback",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceiver",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceiver#callback",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "trigger",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceiver",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceiver#trigger",
    "access": null,
    "description": "Asynchronously trigger the receiver callback.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The signal data (the data argument provided for\n   {@link SignalHandlerSingleton#send}."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SentSignalInfo",
    "memberof": "source/SignalHandlerSingleton.js",
    "longname": "source/SignalHandlerSingleton.js~SentSignalInfo",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/SignalHandlerSingleton",
    "importStyle": "{SentSignalInfo}",
    "description": "Object containing debugging information about a sent\nsignal.",
    "lineNumber": 102,
    "interface": false
  },
  {
    "__docId__": 17,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/SignalHandlerSingleton.js~SentSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~SentSignalInfo#constructor",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "signalName",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "signalName",
    "memberof": "source/SignalHandlerSingleton.js~SentSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~SentSignalInfo#signalName",
    "access": null,
    "description": "The signal name.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "triggeredReceiverNames",
    "memberof": "source/SignalHandlerSingleton.js~SentSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~SentSignalInfo#triggeredReceiverNames",
    "access": null,
    "description": "Array of triggered receiver names.",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_addReceiverName",
    "memberof": "source/SignalHandlerSingleton.js~SentSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~SentSignalInfo#_addReceiverName",
    "access": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "receiverName",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "source/SignalHandlerSingleton.js~SentSignalInfo",
    "longname": "source/SignalHandlerSingleton.js~SentSignalInfo#toString",
    "access": null,
    "description": "Get a string representation of the sent signal info.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "_SignalReceivers",
    "memberof": "source/SignalHandlerSingleton.js",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/SignalHandlerSingleton",
    "importStyle": null,
    "description": "Private class used by {@link SignalHandlerSingleton}\nto represent all receivers for a single signal.",
    "lineNumber": 142,
    "interface": false
  },
  {
    "__docId__": 23,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#constructor",
    "access": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#name",
    "access": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "receiverMap",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#receiverMap",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addReceiver",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#addReceiver",
    "access": null,
    "description": "Add a receiver.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "DuplicateReceiverNameForSignal If the receiver is already registered for the signal."
      }
    ],
    "params": [
      {
        "name": "receiverName",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeReceiver",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#removeReceiver",
    "access": null,
    "description": "Remove a receiver.\n\nIf the receiver is not registered for the signal,\nnothing happens.",
    "lineNumber": 169,
    "params": [
      {
        "name": "receiverName",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasReceiver",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#hasReceiver",
    "access": null,
    "description": "Check if we have a specific receiver for this signal.",
    "lineNumber": 178,
    "params": [
      {
        "name": "receiverName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "receiverCount",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#receiverCount",
    "access": null,
    "description": "Get the number of receivers registered for the signal.",
    "lineNumber": 185,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "send",
    "memberof": "source/SignalHandlerSingleton.js~_SignalReceivers",
    "longname": "source/SignalHandlerSingleton.js~_SignalReceivers#send",
    "access": null,
    "description": "Send the signal.",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data sent with the signal. Forwarded to\n     the signal receiver callback."
      },
      {
        "nullable": null,
        "types": [
          "SentSignalInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "If this is provided, we add the\n     name of all receivers the signal was sent to."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_instance",
    "memberof": "source/SignalHandlerSingleton.js",
    "longname": "source/SignalHandlerSingleton.js~_instance",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/SignalHandlerSingleton",
    "importStyle": null,
    "description": "The instance of the {@link SignalHandlerSingleton}.",
    "lineNumber": 211,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SignalHandlerSingleton",
    "memberof": "source/SignalHandlerSingleton.js",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/SignalHandlerSingleton",
    "importStyle": "SignalHandlerSingleton",
    "description": "Signal handler singleton for global communication.",
    "examples": [
      "<caption>Basic example</caption>\nlet signalHandler = new SignalHandlerSingleton();\nsignalHandler.addReceiver('myapp.mysignal', 'myotherapp.MyReceiver', (receivedSignalInfo) => {\n    console.log('Signal received. Data:', receivedSignalInfo.data);\n});\nsignalHandler.send('myapp.mysignal', {'the': 'data'});",
      "<caption>Recommended signal and receiver naming</caption>\n\n// In myapp/menu/MenuComponent.js\nclass MenuComponent {\n    constructor(menuName) {\n        this.menuName = menuName;\n        let signalHandler = new SignalHandlerSingleton();\n        signalHandler.addReceiver(\n            `toggleMenu#${this.menuName}`,\n            'myapp.menu.MenuComponent',\n            (receivedSignalInfo) => {\n                 this.toggle();\n            }\n        );\n    }\n    toggle() {\n        // Toggle the menu\n    }\n}\n\n// In myotherapp/widgets/MenuToggle.js\nclass MenuToggle {\n    constructor(menuName) {\n        this.menuName = menuName;\n    }\n    toggle() {\n        let signalHandler = new SignalHandlerSingleton();\n        signalHandler.send(`toggleMenu#${this.menuName}`);\n    }\n}",
      "<caption>Multiple receivers</caption>\nlet signalHandler = new SignalHandlerSingleton();\nsignalHandler.addReceiver('myapp.mysignal', 'myotherapp.MyFirstReceiver', (receivedSignalInfo) => {\n    console.log('Signal received by receiver 1!');\n});\nsignalHandler.addReceiver('myapp.mysignal', 'myotherapp.MySecondReceiver', (receivedSignalInfo) => {\n    console.log('Signal received by receiver 1!');\n});\nsignalHandler.send('myapp.mysignal', {'the': 'data'});",
      "<caption>Debugging</caption>\nlet signalHandler = new SignalHandlerSingleton();\nsignalHandler.addReceiver('mysignal', 'MyReceiver', (receivedSignalInfo) => {\n    console.log('received signal:', receivedSignalInfo.toString());\n});\nsignalHandler.send('myapp.mysignal', {'the': 'data'}, (sentSignalInfo) => {\n    console.log('sent signal info:', sentSignalInfo.toString());\n});"
    ],
    "lineNumber": 276,
    "interface": false
  },
  {
    "__docId__": 33,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#constructor",
    "access": null,
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_signalMap",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#_signalMap",
    "access": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_receiverMap",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#_receiverMap",
    "access": null,
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearAllReceiversForAllSignals",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#clearAllReceiversForAllSignals",
    "access": null,
    "description": "Remove all receivers for all signals.\n\nUseful for debugging and tests, but should not be\nused for production code.",
    "lineNumber": 293,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addReceiver",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#addReceiver",
    "access": null,
    "description": "Add a receiver for a specific signal.",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalName",
        "description": "The name of the signal.\n     Typically something like ``toggleMenu`` or ``myapp.toggleMenu``.\n\n     What if we have multiple objects listening for this ``toggleMenu``\n     signal, and we only want to toggle a specific menu? You need\n     to ensure the signalName is unique for each menu. We recommend\n     that you do this by adding ``#<context>``. For example\n     ``toggleMenu#mainmenu``. This is shown in one of the examples\n     above."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "receiverName",
        "description": "The name of the receiver.\n     Must be unique for the signal.\n     We recommend that you use a very explicit name for your signals.\n     It should normally be the full path to the method or function receiving\n     the signal. So if you have a class named ``myapp/menu/MenuComponent.js``\n     that receives a signal to toggle the menu, the receiverName should be\n     ``myapp.menu.MenuComponent``."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback to call when the signal is sent.\n     The callback is called with a single argument - a\n     {@link ReceivedSignalInfo} object."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeReceiver",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#removeReceiver",
    "access": null,
    "description": "Remove a receiver for a signal added with {@link SignalHandlerSingleton#addReceiver}.",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalName",
        "description": "The name of the signal."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "receiverName",
        "description": "The name of the receiver."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeAllSignalsFromReceiver",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#removeAllSignalsFromReceiver",
    "access": null,
    "description": "Remove all signals registered for a receiver.",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "receiverName",
        "description": "The name of the receiver."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasReceiver",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#hasReceiver",
    "access": null,
    "description": "Check if a signal has a specific receiver.",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalName",
        "description": "The name of the signal."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "receiverName",
        "description": "The name of the receiver."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearAllReceiversForSignal",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#clearAllReceiversForSignal",
    "access": null,
    "description": "Remove all receivers for a specific signal.",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalName",
        "description": "The name of the signal to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "send",
    "memberof": "source/SignalHandlerSingleton.js~SignalHandlerSingleton",
    "longname": "source/SignalHandlerSingleton.js~SignalHandlerSingleton#send",
    "access": null,
    "description": "Send a signal.",
    "lineNumber": 412,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalName",
        "description": "The name of the signal to send."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to send to the callback of all receivers registered\n     for the signal."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "infoCallback",
        "description": "An optional callback that receives information\n     about the signal. Useful for debugging what actually received\n     the signal. The ``infoCallback`` is called with a single\n     argument - a {@link SentSignalInfo} object."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/__testhelpers__/XMLHttpRequestMock.js",
    "memberof": null,
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export class XMLHttpRequestMock {\n    constructor(requestEventMethodName, resultingRequest) {\n        this.requestEventMethodName = requestEventMethodName;\n        this.onerror = null;\n        this.onload = null;\n        this.headers = [];\n        this.sentData = null;\n        this.resultingRequest = resultingRequest;\n    }\n\n    open() {}\n\n    setRequestHeader(header, value) {\n        this.headers.push({\n            header: header,\n            value: value\n        });\n    }\n\n    getAllResponseHeaders() {\n        return '';\n    }\n\n    send(data) {\n        this.sentData = data;\n        Object.assign(this, this.resultingRequest);\n        this[this.requestEventMethodName]();\n    }\n}\n"
  },
  {
    "__docId__": 44,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequestMock",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/__testhelpers__/XMLHttpRequestMock",
    "importStyle": "{XMLHttpRequestMock}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 45,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#constructor",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "requestEventMethodName",
        "types": [
          "*"
        ]
      },
      {
        "name": "resultingRequest",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "requestEventMethodName",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#requestEventMethodName",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onerror",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#onerror",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onload",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#onload",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "headers",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#headers",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sentData",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#sentData",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "resultingRequest",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#resultingRequest",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "open",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#open",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setRequestHeader",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#setRequestHeader",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "header",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAllResponseHeaders",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#getAllResponseHeaders",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "send",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#send",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sentData",
    "memberof": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock",
    "longname": "source/__testhelpers__/XMLHttpRequestMock.js~XMLHttpRequestMock#sentData",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/dom/DOMReplace.js",
    "memberof": null,
    "longname": "source/dom/DOMReplace.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import SignalHandlerSingleton from \"../SignalHandlerSingleton\";\n\n/**\n * DOM replacer that is mainly intended for DOM replace\n * where some other components may need to know about\n * the change to the DOM.\n *\n * All the methods send out a signal via {@link SignalHandlerSingleton}\n * when they make changes to the DOM.\n */\nexport default class DOMReplace {\n    /**\n     * @param {string} elementId The ID of the element to replace.\n     */\n    constructor(elementId) {\n        /**\n         * The element DOM ID.\n         *\n         * @type {string}\n         */\n        this.elementId = elementId;\n\n        /**\n         * The DOM element.\n         *\n         * @type {Element}\n         */\n        this.element = document.getElementById(elementId);\n    }\n\n    /**\n     * Replace innerHTML of the element.\n     *\n     * Sends a signal named ``ievv_jsbase.DOMReplace.replaceInnerHtml``\n     * when the replace is done. The signal is send with this object\n     * as the data.\n     *\n     * @param {string} htmlString The HTML to set as innerHTML of the element.\n     */\n    replaceInnerHtml(htmlString) {\n        this.element.innerHTML = htmlString;\n        let signalHandler = new SignalHandlerSingleton();\n        signalHandler.send('ievv_jsbase.DOMReplace.replaceInnerHtml', this);\n    }\n\n    /**\n     * Append innerHTML to the element.\n     *\n     * Sends a signal named ``ievv_jsbase.DOMReplace.appendInnerHtml``\n     * when the append is done. The signal is send with this object\n     * as the data.\n     *\n     * @param {string} htmlString The HTML to append to the innerHTML of the element.\n     */\n    appendInnerHtml(htmlString) {\n        this.element.innerHTML = this.element.innerHTML + htmlString;\n        let signalHandler = new SignalHandlerSingleton();\n        signalHandler.send('ievv_jsbase.DOMReplace.appendInnerHtml', this);\n    }\n\n    /**\n     * Prepend innerHTML to the element.\n     *\n     * Sends a signal named ``ievv_jsbase.DOMReplace.prependInnerHtml``\n     * when the prepend is done. The signal is send with this object\n     * as the data.\n     *\n     * @param {string} htmlString The HTML to prepend to the innerHTML of the element.\n     */\n    prependInnerHtml(htmlString) {\n        this.element.innerHTML = htmlString + this.element.innerHTML;\n        let signalHandler = new SignalHandlerSingleton();\n        signalHandler.send('ievv_jsbase.DOMReplace.prependInnerHtml', this);\n    }\n}\n"
  },
  {
    "__docId__": 58,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMReplace",
    "memberof": "source/dom/DOMReplace.js",
    "longname": "source/dom/DOMReplace.js~DOMReplace",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/dom/DOMReplace",
    "importStyle": "DOMReplace",
    "description": "DOM replacer that is mainly intended for DOM replace\nwhere some other components may need to know about\nthe change to the DOM.\n\nAll the methods send out a signal via {@link SignalHandlerSingleton}\nwhen they make changes to the DOM.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/dom/DOMReplace.js~DOMReplace",
    "longname": "source/dom/DOMReplace.js~DOMReplace#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "elementId",
        "description": "The ID of the element to replace."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "elementId",
    "memberof": "source/dom/DOMReplace.js~DOMReplace",
    "longname": "source/dom/DOMReplace.js~DOMReplace#elementId",
    "access": null,
    "description": "The element DOM ID.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "source/dom/DOMReplace.js~DOMReplace",
    "longname": "source/dom/DOMReplace.js~DOMReplace#element",
    "access": null,
    "description": "The DOM element.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replaceInnerHtml",
    "memberof": "source/dom/DOMReplace.js~DOMReplace",
    "longname": "source/dom/DOMReplace.js~DOMReplace#replaceInnerHtml",
    "access": null,
    "description": "Replace innerHTML of the element.\n\nSends a signal named ``ievv_jsbase.DOMReplace.replaceInnerHtml``\nwhen the replace is done. The signal is send with this object\nas the data.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "htmlString",
        "description": "The HTML to set as innerHTML of the element."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appendInnerHtml",
    "memberof": "source/dom/DOMReplace.js~DOMReplace",
    "longname": "source/dom/DOMReplace.js~DOMReplace#appendInnerHtml",
    "access": null,
    "description": "Append innerHTML to the element.\n\nSends a signal named ``ievv_jsbase.DOMReplace.appendInnerHtml``\nwhen the append is done. The signal is send with this object\nas the data.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "htmlString",
        "description": "The HTML to append to the innerHTML of the element."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prependInnerHtml",
    "memberof": "source/dom/DOMReplace.js~DOMReplace",
    "longname": "source/dom/DOMReplace.js~DOMReplace#prependInnerHtml",
    "access": null,
    "description": "Prepend innerHTML to the element.\n\nSends a signal named ``ievv_jsbase.DOMReplace.prependInnerHtml``\nwhen the prepend is done. The signal is send with this object\nas the data.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "htmlString",
        "description": "The HTML to prepend to the innerHTML of the element."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/dom/DOMReplaceFromUrl.js",
    "memberof": null,
    "longname": "source/dom/DOMReplaceFromUrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import DOMReplace from \"./DOMReplace\";\nimport HttpRequest from \"../http/HttpRequest\";\n\n\n/**\n * Extends {@link DOMReplace} adn change the methods to\n * replace by making a request to the server.\n */\nexport default class DOMReplaceFromUrl extends DOMReplace {\n    _makeRequest(url) {\n        return new HttpRequest(url);\n    }\n\n    extractHtmlStringFromResponse(response) {\n        return response.body;\n    }\n\n    _replaceFromUrl(url, callback) {\n        return new Promise((resolve, reject) => {\n            let request = this._makeRequest(url);\n            request.get().then((response) => {\n                let htmlString = this.extractHtmlStringFromResponse(response);\n                callback(htmlString);\n                resolve(htmlString, response);\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * Replace innerHTML of the element with data from a GET request\n     * to an URL.\n     *\n     * The actual replace of the innerHTML is done using\n     * {@link DOMReplace#replaceInnerHtml}.\n     *\n     * @param {string} url The URL to get the HTML from.\n     * @return {Promise} A promise. The resolve callback is called\n     *      with the html string as first argument and the {@link HttpResponse}\n     *      as the second argument. The reject callback is called with\n     *      one argument - the {@link HttpResponse}.\n     */\n    replaceInnerHtml(url) {\n        return this._replaceFromUrl(url, (htmlString) => {\n            super.replaceInnerHtml(htmlString);\n        });\n    }\n\n\n    /**\n     * Append to the innerHTML of the element with data from a GET request\n     * to an URL.\n     *\n     * The actual append of the innerHTML is done using\n     * {@link DOMReplace#appendInnerHtml}.\n     *\n     * @param {string} url The URL to get the HTML from.\n     * @return {Promise} A promise. The resolve callback is called\n     *      with the html string as first argument and the {@link HttpResponse}\n     *      as the second argument. The reject callback is called with\n     *      one argument - the {@link HttpResponse}.\n     */\n    appendInnerHtml(url) {\n        return this._replaceFromUrl(url, (htmlString) => {\n            super.appendInnerHtml(htmlString);\n        });\n    }\n\n    /**\n     * Prepend to the innerHTML of the element with data from a GET request\n     * to an URL.\n     *\n     * The actual prepend of the innerHTML is done using\n     * {@link DOMReplace#prependInnerHtml}.\n     *\n     * @param {string} url The URL to get the HTML from.\n     * @return {Promise} A promise. The resolve callback is called\n     *      with the html string as first argument and the {@link HttpResponse}\n     *      as the second argument. The reject callback is called with\n     *      one argument - the {@link HttpResponse}.\n     */\n    prependInnerHtml(url) {\n        return this._replaceFromUrl(url, (htmlString) => {\n            super.prependInnerHtml(htmlString);\n        });\n    }\n}\n"
  },
  {
    "__docId__": 66,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMReplaceFromUrl",
    "memberof": "source/dom/DOMReplaceFromUrl.js",
    "longname": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/dom/DOMReplaceFromUrl",
    "importStyle": "DOMReplaceFromUrl",
    "description": "Extends {@link DOMReplace} adn change the methods to\nreplace by making a request to the server.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "source/dom/DOMReplace.js~DOMReplace"
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_makeRequest",
    "memberof": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl",
    "longname": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl#_makeRequest",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "extractHtmlStringFromResponse",
    "memberof": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl",
    "longname": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl#extractHtmlStringFromResponse",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_replaceFromUrl",
    "memberof": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl",
    "longname": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl#_replaceFromUrl",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replaceInnerHtml",
    "memberof": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl",
    "longname": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl#replaceInnerHtml",
    "access": null,
    "description": "Replace innerHTML of the element with data from a GET request\nto an URL.\n\nThe actual replace of the innerHTML is done using\n{@link DOMReplace#replaceInnerHtml}.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to get the HTML from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise. The resolve callback is called\n     with the html string as first argument and the {@link HttpResponse}\n     as the second argument. The reject callback is called with\n     one argument - the {@link HttpResponse}."
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appendInnerHtml",
    "memberof": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl",
    "longname": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl#appendInnerHtml",
    "access": null,
    "description": "Append to the innerHTML of the element with data from a GET request\nto an URL.\n\nThe actual append of the innerHTML is done using\n{@link DOMReplace#appendInnerHtml}.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to get the HTML from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise. The resolve callback is called\n     with the html string as first argument and the {@link HttpResponse}\n     as the second argument. The reject callback is called with\n     one argument - the {@link HttpResponse}."
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prependInnerHtml",
    "memberof": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl",
    "longname": "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl#prependInnerHtml",
    "access": null,
    "description": "Prepend to the innerHTML of the element with data from a GET request\nto an URL.\n\nThe actual prepend of the innerHTML is done using\n{@link DOMReplace#prependInnerHtml}.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to get the HTML from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise. The resolve callback is called\n     with the html string as first argument and the {@link HttpResponse}\n     as the second argument. The reject callback is called with\n     one argument - the {@link HttpResponse}."
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/dom/DOMReplaceWithSameElementFromUrl.js",
    "memberof": null,
    "longname": "source/dom/DOMReplaceWithSameElementFromUrl.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import DOMReplaceFromUrl from \"./DOMReplaceFromUrl\";\nimport HtmlParser from \"./HtmlParser\";\n\n\n/**\n * Extends {@link DOMReplaceFromUrl} to replace the element\n * with the same element from the server response.\n *\n * This is intended to be used if you request a full page from the\n * server to replace a single element in your document.\n *\n * ## Example\n * Lets say you have a ``/pages/test`` that produce the following HTML:\n *\n * ```\n * <html>\n *     <body>\n *         <div id=\"id_something\">\n *             Initial data.\n *         </div>\n *     </body>\n * </html>\n * ```\n *\n * And you would like to replace the current content of the ``id_something`` element\n * with updated data from the server:\n *\n * ```\n * let domReplace = new DOMReplaceWithSameElementFromUrl('id_something');\n * domReplace.replaceInnerHtml('/pages/test')\n *     .then((htmlString, response) => {\n *        console.log(\n *            `successfully replaced the current content of id_something with: ${htmlString}`);\n *        console.log(`The full response from the server was: ${response.toString()}`);\n *     })\n *     .catch((error) => {\n *        console.error(`An error occurred: ${error.toString()}`);\n *     });\n * ```\n */\nexport default class DOMReplaceWithSameElementFromUrl extends DOMReplaceFromUrl {\n    /**\n     * Overridden to extract the innerHTML of the element\n     * with ID matching {@link DOMReplaceWithSameElementFromUrl.elementId}.\n     *\n     * @param response See {@link DOMReplaceFromUrl#extractHtmlStringFromResponse}\n     * @returns {string} The extracted HTML string.\n     */\n    extractHtmlStringFromResponse(response) {\n        let htmlParser = new HtmlParser(response.body);\n        let serverElement = htmlParser.querySelector(`#${this.elementId}`);\n        return serverElement.innerHTML.trim();\n    }\n}\n"
  },
  {
    "__docId__": 74,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMReplaceWithSameElementFromUrl",
    "memberof": "source/dom/DOMReplaceWithSameElementFromUrl.js",
    "longname": "source/dom/DOMReplaceWithSameElementFromUrl.js~DOMReplaceWithSameElementFromUrl",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/dom/DOMReplaceWithSameElementFromUrl",
    "importStyle": "DOMReplaceWithSameElementFromUrl",
    "description": "Extends {@link DOMReplaceFromUrl} to replace the element\nwith the same element from the server response.\n\nThis is intended to be used if you request a full page from the\nserver to replace a single element in your document.\n\n## Example\nLets say you have a ``/pages/test`` that produce the following HTML:\n\n```\n<html>\n    <body>\n        <div id=\"id_something\">\n            Initial data.\n        </div>\n    </body>\n</html>\n```\n\nAnd you would like to replace the current content of the ``id_something`` element\nwith updated data from the server:\n\n```\nlet domReplace = new DOMReplaceWithSameElementFromUrl('id_something');\ndomReplace.replaceInnerHtml('/pages/test')\n    .then((htmlString, response) => {\n       console.log(\n           `successfully replaced the current content of id_something with: ${htmlString}`);\n       console.log(`The full response from the server was: ${response.toString()}`);\n    })\n    .catch((error) => {\n       console.error(`An error occurred: ${error.toString()}`);\n    });\n```",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "source/dom/DOMReplaceFromUrl.js~DOMReplaceFromUrl"
    ]
  },
  {
    "__docId__": 75,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "extractHtmlStringFromResponse",
    "memberof": "source/dom/DOMReplaceWithSameElementFromUrl.js~DOMReplaceWithSameElementFromUrl",
    "longname": "source/dom/DOMReplaceWithSameElementFromUrl.js~DOMReplaceWithSameElementFromUrl#extractHtmlStringFromResponse",
    "access": null,
    "description": "Overridden to extract the innerHTML of the element\nwith ID matching {@link DOMReplaceWithSameElementFromUrl.elementId}.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The extracted HTML string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "See {@link DOMReplaceFromUrl#extractHtmlStringFromResponse}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The extracted HTML string."
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/dom/HtmlParser.js",
    "memberof": null,
    "longname": "source/dom/HtmlParser.js",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "content": "/**\n * HTML parser.\n *\n * Takes a HTML string, creates a temporary DOM document,\n * sets the HTML as innerHTML of the body of the temporary\n * document, and provides methods for extracting elements\n * from the temporary document.\n *\n * @example <caption>Parse a single html element and get the Element</caption>\n * let htmlParser = new HtmlParser('<div>Test</div>');\n * let divElement = htmlParser.firstRootElement;\n *\n * @example <caption>Parse multiple html elements</caption>\n * let htmlParser = new HtmlParser('<div>Test</div><p>Test 2</p>');\n * let elements = htmlParser.rootElements;\n *\n * @example <caption>Parse multiple html elements and query them</caption>\n * let htmlParser = new HtmlParser('<div>Test</div><p>Test 2</p>');\n * let elements = htmlParser.rootElements;\n *\n * @example <caption>Parse multiple html elements and query them</caption>\n * let htmlParser = new HtmlParser('<p>Test P 1</p><div>Test DIV</div><p>Test P 2</p>');\n * let divElement = htmlParser.querySelector('div');\n * let pElements = htmlParser.querySelectorAll('p');\n *\n * @example <caption>Parse a full HTML document</caption>\n * let htmlParser = new HtmlParser('<html><body><p>Test</p></body></html>');\n * let pElement = htmlParser.firstRootElement;\n */\nexport default class HtmlParser {\n    /**\n     *\n     * @param {string} htmlString The HTML string to parse.\n     */\n    constructor(htmlString) {\n        this._tempDocumentBody = this._parseHtml(htmlString);\n    }\n\n    _parseHtml(htmlString) {\n        var tempDocument = document.implementation.createHTMLDocument();\n        tempDocument.body.innerHTML = htmlString;\n        return tempDocument.body;\n    }\n\n    /**\n     * Get the root elements of the parsed document.\n     *\n     * @returns {HTMLCollection}\n     */\n    get rootElements() {\n        return this._tempDocumentBody.children;\n    }\n\n    /**\n     * Get the first root element of the parsed document.\n     *\n     * @returns {null|Element}\n     */\n    get firstRootElement() {\n        return this.rootElements[0];\n    }\n\n    /**\n     * Query the body element of the parsed document\n     * using Element.querySelector.\n     *\n     * @param {string} query The query.\n     * @returns {null|Element}\n     */\n    querySelector(query) {\n        return this._tempDocumentBody.querySelector(query);\n    }\n\n    /**\n     * Query the body element of the parsed document\n     * using Element.querySelectorAll.\n     *\n     * @param {string} query The query.\n     * @returns {NodeList}\n     */\n    querySelectorAll(query) {\n        return Array.from(this._tempDocumentBody.querySelectorAll(query));\n    }\n}\n"
  },
  {
    "__docId__": 77,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HtmlParser",
    "memberof": "source/dom/HtmlParser.js",
    "longname": "source/dom/HtmlParser.js~HtmlParser",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/dom/HtmlParser",
    "importStyle": "HtmlParser",
    "description": "HTML parser.\n\nTakes a HTML string, creates a temporary DOM document,\nsets the HTML as innerHTML of the body of the temporary\ndocument, and provides methods for extracting elements\nfrom the temporary document.",
    "examples": [
      "<caption>Parse a single html element and get the Element</caption>\nlet htmlParser = new HtmlParser('<div>Test</div>');\nlet divElement = htmlParser.firstRootElement;",
      "<caption>Parse multiple html elements</caption>\nlet htmlParser = new HtmlParser('<div>Test</div><p>Test 2</p>');\nlet elements = htmlParser.rootElements;",
      "<caption>Parse multiple html elements and query them</caption>\nlet htmlParser = new HtmlParser('<div>Test</div><p>Test 2</p>');\nlet elements = htmlParser.rootElements;",
      "<caption>Parse multiple html elements and query them</caption>\nlet htmlParser = new HtmlParser('<p>Test P 1</p><div>Test DIV</div><p>Test P 2</p>');\nlet divElement = htmlParser.querySelector('div');\nlet pElements = htmlParser.querySelectorAll('p');",
      "<caption>Parse a full HTML document</caption>\nlet htmlParser = new HtmlParser('<html><body><p>Test</p></body></html>');\nlet pElement = htmlParser.firstRootElement;"
    ],
    "lineNumber": 30,
    "interface": false
  },
  {
    "__docId__": 78,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/dom/HtmlParser.js~HtmlParser",
    "longname": "source/dom/HtmlParser.js~HtmlParser#constructor",
    "access": null,
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "htmlString",
        "description": "The HTML string to parse."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_tempDocumentBody",
    "memberof": "source/dom/HtmlParser.js~HtmlParser",
    "longname": "source/dom/HtmlParser.js~HtmlParser#_tempDocumentBody",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parseHtml",
    "memberof": "source/dom/HtmlParser.js~HtmlParser",
    "longname": "source/dom/HtmlParser.js~HtmlParser#_parseHtml",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "htmlString",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "rootElements",
    "memberof": "source/dom/HtmlParser.js~HtmlParser",
    "longname": "source/dom/HtmlParser.js~HtmlParser#rootElements",
    "access": null,
    "description": "Get the root elements of the parsed document.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLCollection}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLCollection"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "firstRootElement",
    "memberof": "source/dom/HtmlParser.js~HtmlParser",
    "longname": "source/dom/HtmlParser.js~HtmlParser#firstRootElement",
    "access": null,
    "description": "Get the first root element of the parsed document.",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|Element}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Element"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "querySelector",
    "memberof": "source/dom/HtmlParser.js~HtmlParser",
    "longname": "source/dom/HtmlParser.js~HtmlParser#querySelector",
    "access": null,
    "description": "Query the body element of the parsed document\nusing Element.querySelector.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "The query."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Element"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "querySelectorAll",
    "memberof": "source/dom/HtmlParser.js~HtmlParser",
    "longname": "source/dom/HtmlParser.js~HtmlParser#querySelectorAll",
    "access": null,
    "description": "Query the body element of the parsed document\nusing Element.querySelectorAll.",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NodeList}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "The query."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeList"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/dom/ScriptLoaderSingleton.js",
    "memberof": null,
    "longname": "source/dom/ScriptLoaderSingleton.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "let _instance = null;\n\n\n/**\n * A script that is loaded or being loaded by {@link ScriptLoaderSingleton}.\n */\nexport class Script {\n  constructor(src) {\n    this.state = 'new';\n    this.src = src;\n    this.scriptTag = null;\n    this._loadedCallbacks = [];\n    this._onLoad = this._onLoad.bind(this);\n  }\n\n  _onLoad() {\n    this.state = 'loaded';\n    for(let callbackObject of this._loadedCallbacks) {\n      callbackObject.resolve(this);\n    }\n    this._loadedCallbacks = [];\n  }\n\n  _loadScript() {\n    this.state = 'loading';\n    this.scriptTag = document.createElement('script');\n    this.scriptTag.src = this.src;\n    if (this.scriptTag.readyState) { //IE\n      this.scriptTag.onreadystatechange = () => {\n        if (this.scriptTag.readyState == \"loaded\" || this.scriptTag.readyState == \"complete\") {\n          this.scriptTag.onreadystatechange = null;\n          this._onLoad();\n        }\n      };\n    } else { //Others\n      this.scriptTag.onload = this._onLoad;\n    }\n\n    this.scriptTag.onload = this._onLoad;\n    this.scriptTag.onreadystatechange = this._onLoad;\n    document.body.appendChild(this.scriptTag);\n  }\n\n  _load() {\n    return new Promise((resolve, reject) => {\n      if(this.state == 'loaded') {\n        resolve(this);\n      } else {\n        this._loadedCallbacks.push({\n          resolve: resolve,\n          reject: reject\n        });\n        if(this.state == 'new') {\n          this._loadScript();\n        }\n      }\n    });\n  }\n}\n\n\n/**\n * Asyncronous script loader.\n *\n * @example\n * const scriptLoader = new ScriptLoaderSingleton();\n * scriptLoader.load('//example.com/myscript.js').then((script) => {\n *   console.log(`The ${script.src} script was loaded`);\n * });\n */\nexport default class ScriptLoaderSingleton {\n  /**\n   * Get an instance of the singleton.\n   *\n   * The first time this is called, we create a new instance.\n   * For all subsequent calls, we return the instance that was\n   * created on the first call.\n   */\n  constructor() {\n    if(!_instance) {\n      _instance = this;\n    }\n    this._scriptsMap = new Map(); // Maps src to Script objects\n    return _instance;\n  }\n\n  /**\n   * Load a script.\n   *\n   * @param {string} src The source URL of the script.\n   * @returns {Promise} A Promise that resolves when the script is loaded.\n   *    We do not handle errors (not possible with the insert script tag approach),\n   *    so this promise will never be rejected.\n   */\n  load(src) {\n    let script;\n    if(this._scriptsMap.has(src)) {\n      script = this._scriptsMap.get(src);\n    } else {\n      script = new Script(src);\n      this._scriptsMap.set(src, script);\n    }\n    return script._load();\n  }\n}\n"
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_instance",
    "memberof": "source/dom/ScriptLoaderSingleton.js",
    "longname": "source/dom/ScriptLoaderSingleton.js~_instance",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/dom/ScriptLoaderSingleton",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Script",
    "memberof": "source/dom/ScriptLoaderSingleton.js",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/dom/ScriptLoaderSingleton",
    "importStyle": "{Script}",
    "description": "A script that is loaded or being loaded by {@link ScriptLoaderSingleton}.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#state",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "src",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#src",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scriptTag",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#scriptTag",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_loadedCallbacks",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#_loadedCallbacks",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_onLoad",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#_onLoad",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_onLoad",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#_onLoad",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#state",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_loadedCallbacks",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#_loadedCallbacks",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadScript",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#_loadScript",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#state",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scriptTag",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#scriptTag",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_load",
    "memberof": "source/dom/ScriptLoaderSingleton.js~Script",
    "longname": "source/dom/ScriptLoaderSingleton.js~Script#_load",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ScriptLoaderSingleton",
    "memberof": "source/dom/ScriptLoaderSingleton.js",
    "longname": "source/dom/ScriptLoaderSingleton.js~ScriptLoaderSingleton",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/dom/ScriptLoaderSingleton",
    "importStyle": "ScriptLoaderSingleton",
    "description": "Asyncronous script loader.",
    "examples": [
      "const scriptLoader = new ScriptLoaderSingleton();\nscriptLoader.load('//example.com/myscript.js').then((script) => {\n  console.log(`The ${script.src} script was loaded`);\n});"
    ],
    "lineNumber": 71,
    "interface": false
  },
  {
    "__docId__": 102,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/dom/ScriptLoaderSingleton.js~ScriptLoaderSingleton",
    "longname": "source/dom/ScriptLoaderSingleton.js~ScriptLoaderSingleton#constructor",
    "access": null,
    "description": "Get an instance of the singleton.\n\nThe first time this is called, we create a new instance.\nFor all subsequent calls, we return the instance that was\ncreated on the first call.",
    "lineNumber": 79,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_scriptsMap",
    "memberof": "source/dom/ScriptLoaderSingleton.js~ScriptLoaderSingleton",
    "longname": "source/dom/ScriptLoaderSingleton.js~ScriptLoaderSingleton#_scriptsMap",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "source/dom/ScriptLoaderSingleton.js~ScriptLoaderSingleton",
    "longname": "source/dom/ScriptLoaderSingleton.js~ScriptLoaderSingleton#load",
    "access": null,
    "description": "Load a script.",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A Promise that resolves when the script is loaded.\n   We do not handle errors (not possible with the insert script tag approach),\n   so this promise will never be rejected."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "The source URL of the script."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise that resolves when the script is loaded.\n   We do not handle errors (not possible with the insert script tag approach),\n   so this promise will never be rejected."
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/html/CleanHtml.js",
    "memberof": null,
    "longname": "source/html/CleanHtml.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import htmlparser from \"htmlparser2\";\nimport {makeHtmlStartTag, makeHtmlEndTag, isInlineTag} from \"./utils\";\nimport TypeConvert from \"../utils/TypeConvert\";\nimport ObjectManager from \"../utils/ObjectManager\";\nimport typeDetect from \"../utils/typeDetect\";\nimport {PasteMarkerNotSetError} from \"./CleanHtmlErrors\";\n\n\nexport class CleanerNode {\n    constructor(options, parentNode, rootNode, preservePasteMarker, tagName, attributes={}) {\n        this.pasteMarkerAttribute = 'data-ievv-paste-marker';\n        this.preservePasteMarker = preservePasteMarker;\n        this.pasteMarkerNode = null;\n        this.rootNode = rootNode ? rootNode : this;\n        this._inlineWrapperNode = null;\n        this.options = options;\n        this.parentNode = parentNode;\n        this.originalTagName = tagName;\n        this.originalAttributes = attributes;\n        this.tagName = this.cleanTagName();\n        this.attributes = this.cleanAttributes();\n        this.children = [];\n        this.pasteLevels = {\n            root: 0,\n            block: 1,\n            inline: 2\n        };\n    }\n\n    getPasteLevel() {\n        if (this.isRootNode()) {\n            return this.pasteLevels.root;\n        }\n        if (isInlineTag(this.tagName)) {\n            return this.pasteLevels.inline;\n        }\n        return this.pasteLevels.block;\n    }\n\n    getPasteMarkerLevel() {\n        return this.rootNode.pasteMarkerNode.parentNode.getPasteLevel();\n    }\n\n    getDeepestPasteLevelInTree() {\n        let pasteLevel = this.getPasteLevel();\n        for (let child of this.children) {\n            if (pasteLevel == this.pasteLevels.inline) {\n                return pasteLevel; // Returning because already at deepest possible level.. no need to iterate further..\n            }\n            if (typeDetect(child) == 'object') {\n                const childPasteLevel = child.getDeepestPasteLevelInTree();\n                if (childPasteLevel > pasteLevel) {\n                    pasteLevel = childPasteLevel;\n                }\n            }\n        }\n        return pasteLevel;\n    }\n\n    getBlockNodeForNode(node) {\n      if (node.tagName != null && !isInlineTag(node.tagName)) {\n        return [true, node.tagName];\n      }\n      if (!node.isRootNode()) {\n        return this.getBlockNodeForNode(node.parentNode);\n      }\n      return [false, null];\n    }\n\n    checkIfNodeIsJustStringAndExtractString(node) {\n        if (typeDetect(node) == 'string') {\n            return [true, node];\n        }\n        if (node.tagName == null && node.children.length == 1) {\n            return this.checkIfNodeIsJustStringAndExtractString(node.children[0]);\n        }\n\n        const [pasteMarkerInBlockTag, pasteMarkerBlockTag] = this.getBlockNodeForNode(this.rootNode.pasteMarkerNode);\n        if (pasteMarkerInBlockTag && pasteMarkerBlockTag == node.tagName && node.children.length == 1) {\n            return this.checkIfNodeIsJustStringAndExtractString(node.children[0]);\n        }\n        return [false, null];\n    }\n\n    insertNodeAtPasteMarker(node) {\n        if (!this.rootNode.pasteMarkerNode) {\n            throw new PasteMarkerNotSetError(\"Cannot insert node at pasteMarker - aborting insertion\");\n        }\n        let [isStringNode, stringValue] = this.checkIfNodeIsJustStringAndExtractString(node);\n        if (isStringNode) {\n            // console.log(\"This node is just a string: \", node);\n            this.rootNode.pasteMarkerNode.parentNode.addChildNodeAtIndex(\n                this.rootNode.pasteMarkerNode.getParentChildListIndex(), stringValue);\n            return;\n        }\n        // console.log(\"This node is not a string: \", node);\n        // console.log(\"Got rootNode: \", this.rootNode);\n        const pasteLevelOfNewNode = node.getDeepestPasteLevelInTree();\n        while (this.getPasteMarkerLevel() >= pasteLevelOfNewNode) {\n           this.splitAtPasteMarker();\n        }\n\n        node.parentNode = this.rootNode.pasteMarkerNode.parentNode;\n        this.rootNode.pasteMarkerNode.parentNode.addChildNodeAtIndex(\n            this.rootNode.pasteMarkerNode.getParentChildListIndex(), node);\n        const [newMarkerParent, newMarkerIndex] = node.getLastPositionInNodeTree();\n        this.movePasteMarkerTo(newMarkerParent, newMarkerIndex+1);\n    }\n\n    getLastPositionInNodeTree() {\n        let parentNode = null, currentNode = this.rootNode;\n        while (currentNode.children.length > 0 &&\n               typeDetect(currentNode.children[currentNode.children.length-1]) == 'object') {\n            currentNode = currentNode.children[currentNode.children.length-1];\n        }\n        return [currentNode, currentNode.children.length-1];\n    }\n\n    splitAtPasteMarker() {\n        if (!this.rootNode.pasteMarkerNode) {\n            throw new Error(\"Cannot split at pasteMarker! pasteMarker is not set!\");\n        }\n        if (this.rootNode.pasteMarkerNode.parentNode.isRootNode()) {\n            throw new Error(\"Cannot split at pasteMarker! pasteMarker is placed at root!\");\n        }\n        this.rootNode.pasteMarkerNode.splitParentAfterMe();\n        this.movePasteMarkerTo(\n            this.rootNode.pasteMarkerNode.parentNode.parentNode,\n            this.rootNode.pasteMarkerNode.parentNode.getParentChildListIndex());\n    }\n\n    movePasteMarkerTo(node, index) {\n        const previousParent = this.rootNode.pasteMarkerNode.parentNode;\n        const previousParentIndex = this.rootNode.pasteMarkerNode.getParentChildListIndex();\n        previousParent.children.splice(previousParentIndex, 1);\n        this.rootNode.pasteMarkerNode.parentNode = node;\n        node.addChildNodeAtIndex(index, this.rootNode.pasteMarkerNode);\n    }\n\n    getParentChildListIndex() {\n        if (!this.parentNode) {\n            throw new Error(\"Cannot get parentChildListIndex. Has no parent.\");\n        }\n        return this.parentNode.children.indexOf(this);\n    }\n\n    splitAfterChildIndex(index) {\n        if (index >= this.children.length) {\n            throw new Error(`Cannot split children at index ${index}, children.length: ${this.children.length}`);\n        }\n\n        const newSiblingNode = new CleanerNode(\n          this.options, this.parentNode, this.rootNode,\n          this.preservePasteMarker, this.tagName, this.attributes);\n        newSiblingNode.children = this.children.slice(index);\n        for (let child of newSiblingNode.children) {\n            if (typeDetect(child) == 'object') {\n                child.parentNode = newSiblingNode;\n            }\n        }\n        this.children = this.children.slice(0, index);\n        this.parentNode.addChildNodeAtIndex(this.getParentChildListIndex()+1, newSiblingNode);\n    }\n\n    splitParentAfterMe() {\n        this.parentNode.splitAfterChildIndex(this.getParentChildListIndex());\n    }\n\n    addChildNodeAtIndex(index, node) {\n        this.children.splice(index, 0, node);\n    }\n\n    getClosestParentWithTagName(tagName) {\n        if(this.parentNode == null || this.parentNode.tagName == null) {\n            return null;\n        }\n        if(this.parentNode.tagName == tagName) {\n            return this.parentNode;\n        } else {\n            return this.parentNode.getClosestParentWithTagName(tagName);\n        }\n    }\n\n    transformTagName() {\n        if(this.originalTagName != null && this.options.transformTagsMap.has(this.originalTagName)) {\n            return this.options.transformTagsMap.get(this.originalTagName);\n        }\n        return this.originalTagName;\n    }\n\n    cleanTagName() {\n        const tagName = this.transformTagName();\n        if((tagName != null && this.options.allowedTagsSet.has(tagName)) || this.isSpecialNode()) {\n            return tagName;\n        }\n        return null;\n    }\n\n    cleanAttributes() {\n        const cleanedAttributes = {};\n        for(let attributeName of Object.keys(this.originalAttributes)) {\n            if(this.options.isAllowedAttributeForTagName(this.tagName, attributeName) || this.isSpecialNode()) {\n                cleanedAttributes[attributeName] = this.originalAttributes[attributeName];\n            }\n        }\n        return cleanedAttributes;\n    }\n\n    shouldWrapStandaloneInlineTags() {\n        return this.parentNode == null && this.options.wrapStandaloneInlineTagName != null;\n    }\n\n    getStandaloneInlineTagWrapper() {\n        if(this._inlineWrapperNode == null) {\n            const node = this.makeChildNode(\n                this.options.wrapStandaloneInlineTagName,\n                this.options.wrapStandaloneInlineTagAttributes);\n            this._inlineWrapperNode = node;\n            this.children.push(node);\n        }\n        return this._inlineWrapperNode;\n    }\n\n    stopWrappingStandaloneInlineTags() {\n        this._inlineWrapperNode = null;\n    }\n\n    addText(text) {\n        if(this.shouldWrapStandaloneInlineTags()) {\n            this.getStandaloneInlineTagWrapper().addText(text);\n        } else {\n            this.children.push(text);\n        }\n    }\n\n    makeChildNode(tagName, attributes) {\n        const cleanerNodeClass = this.options.getCleanerNodeClassForTagName(tagName);\n        return new cleanerNodeClass(\n            this.options, this, this.rootNode, this.preservePasteMarker,\n            tagName, attributes);\n    }\n\n    isInlineTag() {\n        return isInlineTag(this.tagName);\n    }\n\n    isRootNode() {\n      return this.parentNode == null;\n    }\n\n    isPasteMarker() {\n        if (this.originalAttributes.hasOwnProperty(this.pasteMarkerAttribute)) {\n            if (this.isRootNode()) {\n                throw new Error(\"the rootnode cannot be the paste marker-node!\");\n            }\n            this.rootNode.setPasteMarkerNode(this);\n            return true;\n        }\n        return false;\n    }\n\n    setPasteMarkerNode(node) {\n      this.pasteMarkerNode = node;\n    }\n\n    /**\n     * Special nodes are nodes like the paste-marker. If the cleaner is configured for it, these nodes should not be\n     * cleaned or altered in any way.\n     *\n     * @returns {boolean} if true, the current node is a special node, as such, any attributes is legal and any tagname is legal.\n     */\n    isSpecialNode() {\n        if (this.preservePasteMarker && this.isPasteMarker()) {\n            return true;\n        }\n\n        // Add if-tests for other special nodes here if any are added...\n\n        return false;\n    }\n\n    addChildNode(node) {\n        if(this.shouldWrapStandaloneInlineTags() && node.isInlineTag()) {\n            this.getStandaloneInlineTagWrapper().addChildNode(node);\n        } else {\n            this.stopWrappingStandaloneInlineTags();\n            this.children.push(node);\n        }\n    }\n\n    addChildNodeFromTag(tagName, attributes) {\n        const node = this.makeChildNode(tagName, attributes);\n        this.addChildNode(node);\n        return node;\n    }\n\n    shouldRenderTag() {\n        if (this.isSpecialNode()) {\n            return true;\n        }\n        if(this.tagName == null) {\n            return false;\n        }\n        const closestParentNodeWithSameTag = this.getClosestParentWithTagName(this.tagName);\n        if(closestParentNodeWithSameTag == null) {\n            return true;\n        }\n        return this.options.allowNestedWithinSameTagSet.has(this.tagName);\n    }\n\n    makeStartTag() {\n        if(this.shouldRenderTag()) {\n            return makeHtmlStartTag(this.tagName, this.attributes);\n        }\n        return '';\n    }\n\n    makeEndTag() {\n        if(this.shouldRenderTag()) {\n            return makeHtmlEndTag(this.tagName);\n        }\n        return '';\n    }\n\n    childrenToHtml() {\n        let html = '';\n        for(let child of this.children) {\n            if(typeof child == 'string') {\n                html += child;\n            } else {\n                html += child.toHtml();\n            }\n        }\n        return html;\n    }\n\n    toHtml() {\n        let html = `${this.makeStartTag()}${this.childrenToHtml()}${this.makeEndTag()}`;\n        if (ObjectManager.validate(this.options, 'normalizeEmptyTags')) {\n            const emptyTagHtml = `<${this.tagName}></${this.tagName}>`;\n            if(html == emptyTagHtml) {\n                if (ObjectManager.validate(this.options.normalizeEmptyTags, 'fill', this.tagName)) {\n                    const textToFillEmptyTag = this.options.normalizeEmptyTags.fill[this.tagName];\n                    return `<${this.tagName}>${textToFillEmptyTag}</${this.tagName}>`;\n                }\n                if (ObjectManager.validate(this.options.normalizeEmptyTags, 'remove')) {\n                    if (this.options.normalizeEmptyTags.remove.includes(this.tagName)) {\n                        return '';\n                    }\n                }\n            }\n        }\n\n        return html;\n    }\n\n    toString() {\n        return this.toHtml();\n    }\n}\n\n\n// Should be the default for nodes that can not contain\n// text as a direct child, such as UL, OL, TABLE, ...\n// and all the self-closing tags.\nexport class NoTextCleanerNode extends CleanerNode {\n    addText(text) {}\n}\n\n\nexport class FlatListCleanerNode extends NoTextCleanerNode {\n    shouldRenderTag() {\n        if(this.tagName == null) {\n            return false;\n        }\n        const closestUlParentNode = this.getClosestParentWithTagName(this.tagName);\n        return closestUlParentNode == null;\n    }\n\n    addChildNode(node) {\n        const closestListParentNode = this.getClosestParentWithTagName(this.tagName);\n        if(closestListParentNode == null) {\n            super.addChildNode(node);\n        } else {\n            closestListParentNode.addChildNode(node);\n        }\n    }\n}\n\n\n/*\nHandle paste:\n\n    <p>Hello PASTEHERE</p>\n    <ul>\n        <li>Item PASTEHERE</li>\n    </ul>\n\nHandle force single parent element (ul).\nHandle &nbsp; (should be removed)\n\n2 options:\n- Clean everything after paste, and handle invalid nesting in the cleaner.\n- Know where we are cleaning.\n\n*/\nexport class CleanHtmlParser {\n    constructor(html, options, preservePasteMarker) {\n        this.options = options;\n        this.preservePasteMarker = preservePasteMarker;\n        this._parse(html);\n        if(this._isWrappingStandaloneInline) {\n            this.endWrappingStandaloneInline();\n        }\n    }\n\n    _parse(html) {\n        this._rootNode = new this.options.rootCleanerNodeClass(\n            this.options,\n            null,  // parentNode\n            null,  // rootNode\n            this.preservePasteMarker,\n            this.options.rootCleanerNodeTagName,\n            this.options.rootCleanerNodeAttributes);\n        this._currentNode = this._rootNode;\n        const parser = new htmlparser.Parser({\n            onopentag: (...args) => {\n                this.onOpenTag(...args);\n            },\n            ontext: (...args) => {\n                this.onText(...args);\n            },\n            onclosetag: (...args) => {\n                this.onCloseTag(...args);\n            }\n        }, {decodeEntities: true});\n        parser.write(html);\n        parser.end();\n    }\n\n    onOpenTag(tagName, attributes) {\n        const node = this._currentNode.addChildNodeFromTag(tagName, attributes);\n        // console.log(`${tagName}: ${node.toString()}`);\n        this._currentNode = node;\n    }\n\n    onText(text) {\n        this._currentNode.addText(text);\n    }\n\n    onCloseTag(tagName) {\n        this._currentNode = this._currentNode.parentNode;\n    }\n\n    get rootNode() {\n        return this._rootNode;\n    }\n}\n\n\nexport class CleanHtmlOptions {\n    constructor() {\n        this._allowedTagsSet = new Set();\n        this._allowedAttributesMap = new Map();\n        this._allowNestedWithinSameTagSet = new Set();\n        this._transformTagsMap = new Map();\n        this.defaultCleanerNodeClass = CleanerNode;\n        this.rootCleanerNodeClass = CleanerNode;\n        this.rootCleanerNodeTagName = null;\n        this.rootCleanerNodeAttributes = {};\n        this._tagNameToCleanerNodeClassMap = new Map();\n        this.wrapStandaloneInlineTagName = null;\n        this.wrapStandaloneInlineTagAttributes = {};\n        this.normalizeEmptyTags = null;\n    }\n\n    get allowedTagsSet() {\n        return this._allowedTagsSet;\n    }\n\n    set allowedTagsSet(allowedTagsSet) {\n        this._allowedTagsSet = TypeConvert.toSet(allowedTagsSet);\n    }\n\n\n    get allowedAttributesMap() {\n        return this._allowedAttributesMap;\n    }\n\n    set allowedAttributesMap(allowedAttributesMap) {\n        this._allowedAttributesMap = TypeConvert.toMapOfSets(allowedAttributesMap);\n    }\n\n    isAllowedAttributeForTagName(tagName, attributeName) {\n        if(this._allowedAttributesMap.has(tagName)) {\n            return this._allowedAttributesMap.get(tagName).has(attributeName);\n        }\n        return false;\n    }\n\n\n    set transformTagsMap(transformTagsMap) {\n        this._transformTagsMap = TypeConvert.toMap(transformTagsMap);\n    }\n\n    get transformTagsMap() {\n        return this._transformTagsMap;\n    }\n\n\n    get allowNestedWithinSameTagSet() {\n        return this._allowNestedWithinSameTagSet;\n    }\n\n    set allowNestedWithinSameTagSet(allowNestedWithinSameTagSet) {\n        this._allowNestedWithinSameTagSet = TypeConvert.toSet(allowNestedWithinSameTagSet);\n    }\n\n\n    set tagNameToCleanerNodeClassMap(tagNameToCleanerNodeClassMap) {\n        this._tagNameToCleanerNodeClassMap = TypeConvert.toMap(tagNameToCleanerNodeClassMap);\n    }\n\n    get tagNameToCleanerNodeClassMap() {\n        return this._tagNameToCleanerNodeClassMap;\n    }\n\n    getCleanerNodeClassForTagName(tagName) {\n        if(this._tagNameToCleanerNodeClassMap.has(tagName)) {\n            return this._tagNameToCleanerNodeClassMap.get(tagName);\n        } else {\n            return this.defaultCleanerNodeClass;\n        }\n    }\n\n    setCleanerNodeClassForTagName(tagName, cleanerNodeClass) {\n        this._tagNameToCleanerNodeClassMap.set(tagName, cleanerNodeClass);\n    }\n\n    // updateFromObject(optionsObject) {\n    //     if(typeof optionsObject.allowedTagsSet != 'undefined') {\n    //         this.allowedTagsSet = optionsObject.allowedTagsSet;\n    //     }\n    //     if(typeof optionsObject.allowedAttributesMap != 'undefined') {\n    //         this.allowedAttributesMap = optionsObject.allowedAttributesMap;\n    //     }\n    //     if(typeof optionsObject.transformTagsMap != 'undefined') {\n    //         this.transformTagsMap = optionsObject.transformTagsMap;\n    //     }\n    // }\n}\n\n\n/**\n * HTML cleaner with extra post cleaning that makes it\n * suitable for cleaning input typed and pasted into\n * contenteditable editors.\n */\nexport default class CleanHtml {\n    constructor() {\n        this.options = new CleanHtmlOptions();\n    }\n\n    /**\n     * Called at the beginning of {@link CleanHtml#clean}\n     * before performing the default cleaning.\n     *\n     * Subclasses can override this to perform additional\n     * cleaning pre-cleaning.\n     *\n     * @param {string} html The HTML to pre-clean.\n     * @returns {string} The pre-cleaned HTML. Defaults to returning\n     *    the provided ``html`` unchanged.\n     */\n    preClean(html) {\n        return html;\n    }\n\n\n    /**\n     * Called at the end of {@link CleanHtml#clean}\n     * after performing the default cleaning.\n     *\n     * Subclasses can override this to perform additional\n     * cleaning post-cleaning.\n     *\n     * @param {string} html The HTML to post-clean.\n     * @returns {string} The cleaned HTML. Defaults to returning\n     *    the provided ``html`` unchanged.\n     */\n    postClean(html) {\n        return html;\n    }\n\n    _getCleanedTree(html, preservePasteMarker) {\n        return new CleanHtmlParser(html, this.options, preservePasteMarker);\n    }\n\n    _clean(html, preservePasteMarker) {\n        return this._getCleanedTree(html, preservePasteMarker).rootNode.toHtml();\n    }\n\n    /**\n     * Clean the provided html.\n     *\n     * @param {string} html The HTML to clean.\n     * @param preservePasteMarker {boolean} if true, leave the tag with `data-ievv-paste-marker` attribute.\n     * @returns {string} The cleaned HTML.\n     */\n    clean(html, preservePasteMarker=false) {\n        let cleanedHtml = this.preClean(html);\n        cleanedHtml = this._clean(cleanedHtml, preservePasteMarker);\n        cleanedHtml = this.postClean(cleanedHtml);\n        return cleanedHtml;\n    }\n\n    /**\n     * This function takes two html-blobs, `originalHtml` is the original text, `pastedHtml` is text to be inserted in\n     * `originalHtml`.\n     * The original html-blob should contain a 'marker-element' determining where to paste the given `pastedHtml`. This\n     * marker element should have the data-attribute `data-ievv-paste-marker`. If multiple marker-elements are present,\n     * an error will be logged, and `pastedHtml` will be inserted at the first one.\n     *\n     * Note: result from these examples will be cleaned once more using default cleaner, so if the cleaner is configured\n     * to wrap standalone text the standalone text in e.g. example 1 would be wrapped in some block-level tag before returning.\n     *\n     * @example <caption>1 - pasting unformatted text without marker:</caption>\n     * originalHtml: <p>Hello world! I am some text</p>\n     * pastedHtml: awesome\n     * result: <p>Hello world! I am some text</p>awesome\n     *\n     * @example <caption>2 - pasting formatted text without marker:</caption>\n     * originalHtml: <p>Hello world! I am some text</p>\n     * pastedHtml: <strong>awesome</strong>\n     * result: <p>Hello world! I am some text</p><strong>awesome</strong>\n     *\n     * @example <caption>3 - pasting unformatted text with marker:</caption>\n     * originalHtml: <p>Hello world! I am some <span data-ievv-paste-marker></span>text</p>\n     * pastedHtml: awesome\n     * result: <p>Hello world! I am some awesome<span data-ievv-paste-marker></span>text</p>\n     *\n     * @example <caption>4 - pasting formatted text with marker:</caption>\n     * originalHtml: <p>Hello world! I am some <span data-ievv-paste-marker></span>text</p>\n     * pastedHtml: <strong>awesome</strong>\n     * result: <p>Hello world! I am some <strong>awesome<span data-ievv-paste-marker></span></strong>text</p>\n     *\n     * @example <caption>5 - pasting block tag with marker:</caption>\n     * originalHtml: <p>Hello world! I am some <span data-ievv-paste-marker></span>text</p>\n     * pastedHtml: <p>awesome</p>\n     * result: <p>Hello world! I am some </p>\n     *         <p>awesome<span data-ievv-paste-marker></span></p>\n     *         <p>text</p>\n     *\n     * @example <caption>6 - pasting formatted text in formatting with marker:</caption>\n     * originalHtml: <p>Hello world! I am <strong>some <span data-ievv-paste-marker></span>text</strong></p>\n     * pastedHtml: <strong>awesome</strong>\n     * result: <p>Hello world! I am <strong>some </strong><strong>awesome<span data-ievv-paste-marker></span></strong><strong>text</strong></p>\n     *\n     * @param originalHtml\n     * @param pastedHtml\n     */\n    paste(originalHtml, pastedHtml) {\n        const cleanedPastedTree = this._getCleanedTree(pastedHtml);\n        const cleanedOriginalTree = this._getCleanedTree(originalHtml, true);\n\n        // console.log(`Running paste.\\n\\nCleaned original tree: ${cleanedOriginalTree.rootNode.toHtml()}\\n\\ncleanedPastedTree: ${cleanedPastedTree.rootNode.toHtml()}`);\n        // console.log(`cleanedOriginalTree.rootNode: `, cleanedOriginalTree.rootNode);\n        // console.log(`cleanedPastedTree.rootNode: `, cleanedPastedTree.rootNode);\n\n        try {\n            cleanedOriginalTree.rootNode.insertNodeAtPasteMarker(cleanedPastedTree.rootNode);\n        } catch(e) {\n            if (e instanceof PasteMarkerNotSetError) {\n                const cleanedOriginalHtml = cleanedOriginalTree.rootNode.toHtml();\n                const cleanedPastedHtml = cleanedPastedTree.rootNode.toHtml();\n                return this.clean(`${cleanedOriginalHtml}${cleanedPastedHtml}`, true);\n            } else {\n                throw e;\n            }\n        }\n\n        return this.clean(cleanedOriginalTree.rootNode.toHtml(), true);\n    }\n}\n"
  },
  {
    "__docId__": 106,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CleanerNode",
    "memberof": "source/html/CleanHtml.js",
    "longname": "source/html/CleanHtml.js~CleanerNode",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/CleanHtml",
    "importStyle": "{CleanerNode}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 107,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "rootNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "preservePasteMarker",
        "types": [
          "*"
        ]
      },
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pasteMarkerAttribute",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#pasteMarkerAttribute",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "preservePasteMarker",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#preservePasteMarker",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pasteMarkerNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#pasteMarkerNode",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rootNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#rootNode",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_inlineWrapperNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#_inlineWrapperNode",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "options",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#options",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parentNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#parentNode",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "originalTagName",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#originalTagName",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "originalAttributes",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#originalAttributes",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tagName",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#tagName",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "attributes",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#attributes",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#children",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pasteLevels",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#pasteLevels",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPasteLevel",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getPasteLevel",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPasteMarkerLevel",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getPasteMarkerLevel",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDeepestPasteLevelInTree",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getDeepestPasteLevelInTree",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getBlockNodeForNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getBlockNodeForNode",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkIfNodeIsJustStringAndExtractString",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#checkIfNodeIsJustStringAndExtractString",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertNodeAtPasteMarker",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#insertNodeAtPasteMarker",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLastPositionInNodeTree",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getLastPositionInNodeTree",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "splitAtPasteMarker",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#splitAtPasteMarker",
    "access": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "movePasteMarkerTo",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#movePasteMarkerTo",
    "access": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getParentChildListIndex",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getParentChildListIndex",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "splitAfterChildIndex",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#splitAfterChildIndex",
    "access": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#children",
    "access": null,
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "splitParentAfterMe",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#splitParentAfterMe",
    "access": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addChildNodeAtIndex",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#addChildNodeAtIndex",
    "access": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getClosestParentWithTagName",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getClosestParentWithTagName",
    "access": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "transformTagName",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#transformTagName",
    "access": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cleanTagName",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#cleanTagName",
    "access": null,
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cleanAttributes",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#cleanAttributes",
    "access": null,
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shouldWrapStandaloneInlineTags",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#shouldWrapStandaloneInlineTags",
    "access": null,
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getStandaloneInlineTagWrapper",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#getStandaloneInlineTagWrapper",
    "access": null,
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_inlineWrapperNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#_inlineWrapperNode",
    "access": null,
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "stopWrappingStandaloneInlineTags",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#stopWrappingStandaloneInlineTags",
    "access": null,
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_inlineWrapperNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#_inlineWrapperNode",
    "access": null,
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addText",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#addText",
    "access": null,
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeChildNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#makeChildNode",
    "access": null,
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isInlineTag",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#isInlineTag",
    "access": null,
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRootNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#isRootNode",
    "access": null,
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isPasteMarker",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#isPasteMarker",
    "access": null,
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPasteMarkerNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#setPasteMarkerNode",
    "access": null,
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pasteMarkerNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#pasteMarkerNode",
    "access": null,
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isSpecialNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#isSpecialNode",
    "access": null,
    "description": "Special nodes are nodes like the paste-marker. If the cleaner is configured for it, these nodes should not be\ncleaned or altered in any way.",
    "lineNumber": 272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} if true, the current node is a special node, as such, any attributes is legal and any tagname is legal."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "if true, the current node is a special node, as such, any attributes is legal and any tagname is legal."
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addChildNode",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#addChildNode",
    "access": null,
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addChildNodeFromTag",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#addChildNodeFromTag",
    "access": null,
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shouldRenderTag",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#shouldRenderTag",
    "access": null,
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeStartTag",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#makeStartTag",
    "access": null,
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeEndTag",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#makeEndTag",
    "access": null,
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "childrenToHtml",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#childrenToHtml",
    "access": null,
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toHtml",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#toHtml",
    "access": null,
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "source/html/CleanHtml.js~CleanerNode",
    "longname": "source/html/CleanHtml.js~CleanerNode#toString",
    "access": null,
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "NoTextCleanerNode",
    "memberof": "source/html/CleanHtml.js",
    "longname": "source/html/CleanHtml.js~NoTextCleanerNode",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/CleanHtml",
    "importStyle": "{NoTextCleanerNode}",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "interface": false,
    "extends": [
      "CleanerNode"
    ]
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addText",
    "memberof": "source/html/CleanHtml.js~NoTextCleanerNode",
    "longname": "source/html/CleanHtml.js~NoTextCleanerNode#addText",
    "access": null,
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FlatListCleanerNode",
    "memberof": "source/html/CleanHtml.js",
    "longname": "source/html/CleanHtml.js~FlatListCleanerNode",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/CleanHtml",
    "importStyle": "{FlatListCleanerNode}",
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "interface": false,
    "extends": [
      "NoTextCleanerNode"
    ]
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shouldRenderTag",
    "memberof": "source/html/CleanHtml.js~FlatListCleanerNode",
    "longname": "source/html/CleanHtml.js~FlatListCleanerNode#shouldRenderTag",
    "access": null,
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addChildNode",
    "memberof": "source/html/CleanHtml.js~FlatListCleanerNode",
    "longname": "source/html/CleanHtml.js~FlatListCleanerNode#addChildNode",
    "access": null,
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CleanHtmlParser",
    "memberof": "source/html/CleanHtml.js",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/CleanHtml",
    "importStyle": "{CleanHtmlParser}",
    "description": null,
    "lineNumber": 407,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 166,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#constructor",
    "access": null,
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "params": [
      {
        "name": "html",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "preservePasteMarker",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "options",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#options",
    "access": null,
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "preservePasteMarker",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#preservePasteMarker",
    "access": null,
    "description": null,
    "lineNumber": 410,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parse",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#_parse",
    "access": null,
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "params": [
      {
        "name": "html",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_rootNode",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#_rootNode",
    "access": null,
    "description": null,
    "lineNumber": 418,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_currentNode",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#_currentNode",
    "access": null,
    "description": null,
    "lineNumber": 425,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onOpenTag",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#onOpenTag",
    "access": null,
    "description": null,
    "lineNumber": 441,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_currentNode",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#_currentNode",
    "access": null,
    "description": null,
    "lineNumber": 444,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onText",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#onText",
    "access": null,
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onCloseTag",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#onCloseTag",
    "access": null,
    "description": null,
    "lineNumber": 451,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_currentNode",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#_currentNode",
    "access": null,
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "rootNode",
    "memberof": "source/html/CleanHtml.js~CleanHtmlParser",
    "longname": "source/html/CleanHtml.js~CleanHtmlParser#rootNode",
    "access": null,
    "description": null,
    "lineNumber": 455,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CleanHtmlOptions",
    "memberof": "source/html/CleanHtml.js",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/CleanHtml",
    "importStyle": "{CleanHtmlOptions}",
    "description": null,
    "lineNumber": 461,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 179,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#constructor",
    "access": null,
    "description": null,
    "lineNumber": 462,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_allowedTagsSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_allowedTagsSet",
    "access": null,
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_allowedAttributesMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_allowedAttributesMap",
    "access": null,
    "description": null,
    "lineNumber": 464,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_allowNestedWithinSameTagSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_allowNestedWithinSameTagSet",
    "access": null,
    "description": null,
    "lineNumber": 465,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_transformTagsMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_transformTagsMap",
    "access": null,
    "description": null,
    "lineNumber": 466,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaultCleanerNodeClass",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#defaultCleanerNodeClass",
    "access": null,
    "description": null,
    "lineNumber": 467,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rootCleanerNodeClass",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#rootCleanerNodeClass",
    "access": null,
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rootCleanerNodeTagName",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#rootCleanerNodeTagName",
    "access": null,
    "description": null,
    "lineNumber": 469,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rootCleanerNodeAttributes",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#rootCleanerNodeAttributes",
    "access": null,
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_tagNameToCleanerNodeClassMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_tagNameToCleanerNodeClassMap",
    "access": null,
    "description": null,
    "lineNumber": 471,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "wrapStandaloneInlineTagName",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#wrapStandaloneInlineTagName",
    "access": null,
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "wrapStandaloneInlineTagAttributes",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#wrapStandaloneInlineTagAttributes",
    "access": null,
    "description": null,
    "lineNumber": 473,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "normalizeEmptyTags",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#normalizeEmptyTags",
    "access": null,
    "description": null,
    "lineNumber": 474,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "allowedTagsSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#allowedTagsSet",
    "access": null,
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "allowedTagsSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#allowedTagsSet",
    "access": null,
    "description": null,
    "lineNumber": 481,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_allowedTagsSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_allowedTagsSet",
    "access": null,
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "allowedAttributesMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#allowedAttributesMap",
    "access": null,
    "description": null,
    "lineNumber": 486,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "allowedAttributesMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#allowedAttributesMap",
    "access": null,
    "description": null,
    "lineNumber": 490,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_allowedAttributesMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_allowedAttributesMap",
    "access": null,
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isAllowedAttributeForTagName",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#isAllowedAttributeForTagName",
    "access": null,
    "description": null,
    "lineNumber": 494,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "transformTagsMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#transformTagsMap",
    "access": null,
    "description": null,
    "lineNumber": 502,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_transformTagsMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_transformTagsMap",
    "access": null,
    "description": null,
    "lineNumber": 503,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "transformTagsMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#transformTagsMap",
    "access": null,
    "description": null,
    "lineNumber": 506,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "allowNestedWithinSameTagSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#allowNestedWithinSameTagSet",
    "access": null,
    "description": null,
    "lineNumber": 511,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "allowNestedWithinSameTagSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#allowNestedWithinSameTagSet",
    "access": null,
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_allowNestedWithinSameTagSet",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_allowNestedWithinSameTagSet",
    "access": null,
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "tagNameToCleanerNodeClassMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#tagNameToCleanerNodeClassMap",
    "access": null,
    "description": null,
    "lineNumber": 520,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 206,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_tagNameToCleanerNodeClassMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#_tagNameToCleanerNodeClassMap",
    "access": null,
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "tagNameToCleanerNodeClassMap",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#tagNameToCleanerNodeClassMap",
    "access": null,
    "description": null,
    "lineNumber": 524,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCleanerNodeClassForTagName",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#getCleanerNodeClassForTagName",
    "access": null,
    "description": null,
    "lineNumber": 528,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setCleanerNodeClassForTagName",
    "memberof": "source/html/CleanHtml.js~CleanHtmlOptions",
    "longname": "source/html/CleanHtml.js~CleanHtmlOptions#setCleanerNodeClassForTagName",
    "access": null,
    "description": null,
    "lineNumber": 536,
    "undocument": true,
    "params": [
      {
        "name": "tagName",
        "types": [
          "*"
        ]
      },
      {
        "name": "cleanerNodeClass",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CleanHtml",
    "memberof": "source/html/CleanHtml.js",
    "longname": "source/html/CleanHtml.js~CleanHtml",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/CleanHtml",
    "importStyle": "CleanHtml",
    "description": "HTML cleaner with extra post cleaning that makes it\nsuitable for cleaning input typed and pasted into\ncontenteditable editors.",
    "lineNumber": 559,
    "interface": false
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#constructor",
    "access": null,
    "description": null,
    "lineNumber": 560,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "options",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#options",
    "access": null,
    "description": null,
    "lineNumber": 561,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "preClean",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#preClean",
    "access": null,
    "description": "Called at the beginning of {@link CleanHtml#clean}\nbefore performing the default cleaning.\n\nSubclasses can override this to perform additional\ncleaning pre-cleaning.",
    "lineNumber": 575,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The pre-cleaned HTML. Defaults to returning\n   the provided ``html`` unchanged."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "The HTML to pre-clean."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The pre-cleaned HTML. Defaults to returning\n   the provided ``html`` unchanged."
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "postClean",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#postClean",
    "access": null,
    "description": "Called at the end of {@link CleanHtml#clean}\nafter performing the default cleaning.\n\nSubclasses can override this to perform additional\ncleaning post-cleaning.",
    "lineNumber": 591,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The cleaned HTML. Defaults to returning\n   the provided ``html`` unchanged."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "The HTML to post-clean."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The cleaned HTML. Defaults to returning\n   the provided ``html`` unchanged."
    },
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getCleanedTree",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#_getCleanedTree",
    "access": null,
    "description": null,
    "lineNumber": 595,
    "undocument": true,
    "params": [
      {
        "name": "html",
        "types": [
          "*"
        ]
      },
      {
        "name": "preservePasteMarker",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_clean",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#_clean",
    "access": null,
    "description": null,
    "lineNumber": 599,
    "undocument": true,
    "params": [
      {
        "name": "html",
        "types": [
          "*"
        ]
      },
      {
        "name": "preservePasteMarker",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clean",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#clean",
    "access": null,
    "description": "Clean the provided html.",
    "lineNumber": 610,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The cleaned HTML."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "The HTML to clean."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "preservePasteMarker",
        "description": "{boolean} if true, leave the tag with `data-ievv-paste-marker` attribute."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The cleaned HTML."
    },
    "generator": false
  },
  {
    "__docId__": 218,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paste",
    "memberof": "source/html/CleanHtml.js~CleanHtml",
    "longname": "source/html/CleanHtml.js~CleanHtml#paste",
    "access": null,
    "description": "This function takes two html-blobs, `originalHtml` is the original text, `pastedHtml` is text to be inserted in\n`originalHtml`.\nThe original html-blob should contain a 'marker-element' determining where to paste the given `pastedHtml`. This\nmarker element should have the data-attribute `data-ievv-paste-marker`. If multiple marker-elements are present,\nan error will be logged, and `pastedHtml` will be inserted at the first one.\n\nNote: result from these examples will be cleaned once more using default cleaner, so if the cleaner is configured\nto wrap standalone text the standalone text in e.g. example 1 would be wrapped in some block-level tag before returning.",
    "examples": [
      "<caption>1 - pasting unformatted text without marker:</caption>\noriginalHtml: <p>Hello world! I am some text</p>\npastedHtml: awesome\nresult: <p>Hello world! I am some text</p>awesome",
      "<caption>2 - pasting formatted text without marker:</caption>\noriginalHtml: <p>Hello world! I am some text</p>\npastedHtml: <strong>awesome</strong>\nresult: <p>Hello world! I am some text</p><strong>awesome</strong>",
      "<caption>3 - pasting unformatted text with marker:</caption>\noriginalHtml: <p>Hello world! I am some <span data-ievv-paste-marker></span>text</p>\npastedHtml: awesome\nresult: <p>Hello world! I am some awesome<span data-ievv-paste-marker></span>text</p>",
      "<caption>4 - pasting formatted text with marker:</caption>\noriginalHtml: <p>Hello world! I am some <span data-ievv-paste-marker></span>text</p>\npastedHtml: <strong>awesome</strong>\nresult: <p>Hello world! I am some <strong>awesome<span data-ievv-paste-marker></span></strong>text</p>",
      "<caption>5 - pasting block tag with marker:</caption>\noriginalHtml: <p>Hello world! I am some <span data-ievv-paste-marker></span>text</p>\npastedHtml: <p>awesome</p>\nresult: <p>Hello world! I am some </p>\n        <p>awesome<span data-ievv-paste-marker></span></p>\n        <p>text</p>",
      "<caption>6 - pasting formatted text in formatting with marker:</caption>\noriginalHtml: <p>Hello world! I am <strong>some <span data-ievv-paste-marker></span>text</strong></p>\npastedHtml: <strong>awesome</strong>\nresult: <p>Hello world! I am <strong>some </strong><strong>awesome<span data-ievv-paste-marker></span></strong><strong>text</strong></p>"
    ],
    "lineNumber": 662,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "originalHtml",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pastedHtml",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/html/CleanHtmlErrors.js",
    "memberof": null,
    "longname": "source/html/CleanHtmlErrors.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport makeCustomError from '../makeCustomError';\n\nexport let PasteMarkerNotSetError = makeCustomError(\"PasteMarkerNotSet\");"
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "PasteMarkerNotSetError",
    "memberof": "source/html/CleanHtmlErrors.js",
    "longname": "source/html/CleanHtmlErrors.js~PasteMarkerNotSetError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/CleanHtmlErrors",
    "importStyle": "{PasteMarkerNotSetError}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/html/utils.js",
    "memberof": null,
    "longname": "source/html/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nconst _SELF_CLOSING_TAGS = new Set([\n    'img',\n    'br',\n    'hr',\n    'area',\n    'base',\n    'basefont',\n    'input',\n    'link',\n    'meta'\n]);\n\nconst _INLINE_TAGS = new Set([\n    'b',\n    'big',\n    'i',\n    'small',\n    'tt',\n    'abbr',\n    'acronym',\n    'cite',\n    'code',\n    'dfn',\n    'em',\n    'kbd',\n    'strong',\n    'samp',\n    'time',\n    'var',\n    'a',\n    'bdo',\n    'br',\n    'img',\n    'map',\n    'object',\n    'q',\n    'script',\n    'span',\n    'sub',\n    'sup',\n    'button',\n    'input',\n    'label',\n    'select',\n    'textarea',\n]);\n\n\n/**\n * Returns ``True`` if the provided ``tagName`` is a self closing tag.\n *\n * @param {string} tagName The tag name.\n */\nexport function isSelfClosingTag(tagName) {\n    return _SELF_CLOSING_TAGS.has(tagName);\n}\n\n\n/**\n * Returns ``True`` if the provided ``tagName`` is an inline tag.\n *\n * @param {string} tagName The tag name.\n */\nexport function isInlineTag(tagName) {\n    return _INLINE_TAGS.has(tagName);\n}\n\n\n/**\n * Escape HTML attribute value.\n *\n * @param value The attribute value to escape. Coerced to string if it\n *      not a string.\n * @returns {string}\n */\nexport function escapeAttributeValue(value) {\n    if (typeof(value) != 'string') {\n        value = `${value}`;\n    }\n    return value.replace(/\\&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/\\>/g, '&gt;')\n        .replace(/\\\"/g, '&quot;');\n}\n\n\n/**\n * Takes an object that maps attribute names to values, and\n * returns it as html formatted attributes.\n *\n * The result will start with an empty space if the provided\n * object is not empty.\n *\n * @param {{}} attributes Object mapping attribute names to values.\n * @returns {string} The HTML encoded attributes.\n */\nexport function attributeObjectToHtml(attributes) {\n    if(typeof attributes == 'undefined') {\n        return '';\n    }\n    let resultHtml = '';\n    for(let attributeName of Object.keys(attributes)) {\n        let attributeValue = attributes[attributeName];\n        let escapedValue = escapeAttributeValue(attributeValue);\n        resultHtml += ` ${attributeName}=\"${escapedValue}\"`;\n    }\n    return resultHtml;\n}\n\n\n/**\n * Make a HTML start tag.\n *\n * Handles self-closing tags automatically.\n *\n * @param {string} tagName Tag name.\n * @param {{}} attributes Object mapping attribute names to values.\n * @returns {string} The HTML start tag.\n */\nexport function makeHtmlStartTag(tagName, attributes) {\n    // NOTE: We use HTML5 syntax for self-closing tags, so no /> is needed\n    return `<${tagName}${attributeObjectToHtml(attributes)}>`;\n}\n\n\n/**\n * Make a HTML end tag.\n *\n * Handles self-closing tags automatically.\n *\n * @param {string} tagName Tag name.\n * @returns {string} The HTML end tag.\n */\nexport function makeHtmlEndTag(tagName) {\n    if(isSelfClosingTag(tagName)) {\n        return '';\n    } else {\n        return `</${tagName}>`;\n    }\n}\n"
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_SELF_CLOSING_TAGS",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~_SELF_CLOSING_TAGS",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_INLINE_TAGS",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~_INLINE_TAGS",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isSelfClosingTag",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~isSelfClosingTag",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": "{isSelfClosingTag}",
    "description": "Returns ``True`` if the provided ``tagName`` is a self closing tag.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tagName",
        "description": "The tag name."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isInlineTag",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~isInlineTag",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": "{isInlineTag}",
    "description": "Returns ``True`` if the provided ``tagName`` is an inline tag.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tagName",
        "description": "The tag name."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 226,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "escapeAttributeValue",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~escapeAttributeValue",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": "{escapeAttributeValue}",
    "description": "Escape HTML attribute value.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The attribute value to escape. Coerced to string if it\n     not a string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 227,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "attributeObjectToHtml",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~attributeObjectToHtml",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": "{attributeObjectToHtml}",
    "description": "Takes an object that maps attribute names to values, and\nreturns it as html formatted attributes.\n\nThe result will start with an empty space if the provided\nobject is not empty.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The HTML encoded attributes."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{}"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "Object mapping attribute names to values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The HTML encoded attributes."
    },
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeHtmlStartTag",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~makeHtmlStartTag",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": "{makeHtmlStartTag}",
    "description": "Make a HTML start tag.\n\nHandles self-closing tags automatically.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The HTML start tag."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tagName",
        "description": "Tag name."
      },
      {
        "nullable": null,
        "types": [
          "{}"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "Object mapping attribute names to values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The HTML start tag."
    },
    "generator": false
  },
  {
    "__docId__": 229,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeHtmlEndTag",
    "memberof": "source/html/utils.js",
    "longname": "source/html/utils.js~makeHtmlEndTag",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/html/utils",
    "importStyle": "{makeHtmlEndTag}",
    "description": "Make a HTML end tag.\n\nHandles self-closing tags automatically.",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The HTML end tag."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tagName",
        "description": "Tag name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The HTML end tag."
    },
    "generator": false
  },
  {
    "__docId__": 230,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpCookies.js",
    "memberof": null,
    "longname": "source/http/HttpCookies.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import makeCustomError from \"../makeCustomError\";\n\n\n/**\n * Exception raised by {@link HttpCookies#getStrict} when the cookie is not found.\n *\n * @type {Error}\n */\nexport let HttpCookieNotFoundError = makeCustomError('HttpCookieNotFoundError');\n\n/**\n * Makes working with ``document.cookie`` easy.\n *\n * @example <caption>Get a cookie named \"name\"</caption>\n * import HttpCookies from 'ievv_jsbase/http/HttpCookies';\n * let cookies = HttpCookies();\n * let name = cookies.get('name');\n *\n * @example <caption>Get a cookie named \"pageurl\", with a fallback</caption>\n * import HttpCookies from 'ievv_jsbase/http/HttpCookies';\n * let cookies = HttpCookies();\n * let name = cookies.get('pageurl', 'http://example.com');\n *\n * @example <caption>Get a cookie named \"name\" in strict mode</caption>\n * import HttpCookies from 'ievv_jsbase/http/HttpCookies';\n * import {HttpCookieNotFoundError} from 'ievv_jsbase/http/HttpCookies';\n * let cookies = HttpCookies();\n * try {\n *     let name = cookies.getStrict('name');\n * } catch(e) {\n *     if(e instanceof HttpCookieNotFoundError) {\n *         console.error('Cookie not found', e);\n *     } else {\n *         throw e;\n *     }\n * }\n */\nexport default class HttpCookies {\n    /**\n     * @param {string} rawCookies Raw cookies string. This is\n     *      optional - it defaults to ``document.cookie``.\n     */\n    constructor(rawCookies) {\n        this.rawCookies = rawCookies || document.cookie;\n        this.cookies = this.__parse();\n    }\n\n    __parse() {\n        let cookies = {};\n        if (this.rawCookies && this.rawCookies !== '') {\n            let cookiesArray = this.rawCookies.split(';');\n            for (let i = 0; i < cookiesArray.length; i++) {\n                let cookie = cookiesArray[i].trim();\n                let cookieArray = cookie.split('=', 2);\n                if(cookieArray.length === 2) {\n                    let name = cookieArray[0];\n                    let value = cookieArray[1];\n                    cookies[name.trim()] = value.trim();\n                }\n            }\n        }\n        return cookies;\n    }\n\n    /**\n     * Get cookie value.\n     *\n     * @param {string} cookieName The name of the cookie.\n     * @param fallback Fallback value if the cookie with the provided\n     *      ``cookieName`` does not exist.\n     *      Defaults to ``undefined``.\n     * @return {string} The cookie value, or the fallback value if no cookie\n     *      with the provided ``cookieName`` is found.\n     */\n    get(cookieName, fallback) {\n        let value = this.cookies[cookieName];\n        if(typeof value === 'undefined') {\n            return fallback;\n        } else {\n            return value;\n        }\n    }\n\n    /**\n     * Get cookie value and throw exception if it is not found.\n     *\n     * @param {string} cookieName The name of the cookie.\n     * @returns {string} The cookie value.\n     * @throws {HttpCookieNotFoundError} If no cookie named ``cookieName`` is found.\n     */\n    getStrict(cookieName) {\n        let value = this.get(cookieName);\n        if(typeof value === 'undefined') {\n            throw new HttpCookieNotFoundError(`Cookie not found: \"${cookieName}\".`);\n        }\n        return value;\n    }\n\n    /**\n     * Check if a cookie is among the parsed cookies.\n     *\n     * @param {string} cookieName The name of the cookie to look for.\n     * @returns {boolean} ``true`` if the cookie is among the parsed cookies.\n     */\n    contains(cookieName) {\n        return typeof this.cookies[cookieName] !== 'undefined';\n    }\n}\n"
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "HttpCookieNotFoundError",
    "memberof": "source/http/HttpCookies.js",
    "longname": "source/http/HttpCookies.js~HttpCookieNotFoundError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpCookies",
    "importStyle": "{HttpCookieNotFoundError}",
    "description": "Exception raised by {@link HttpCookies#getStrict} when the cookie is not found.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpCookies",
    "memberof": "source/http/HttpCookies.js",
    "longname": "source/http/HttpCookies.js~HttpCookies",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpCookies",
    "importStyle": "HttpCookies",
    "description": "Makes working with ``document.cookie`` easy.",
    "examples": [
      "<caption>Get a cookie named \"name\"</caption>\nimport HttpCookies from 'ievv_jsbase/http/HttpCookies';\nlet cookies = HttpCookies();\nlet name = cookies.get('name');",
      "<caption>Get a cookie named \"pageurl\", with a fallback</caption>\nimport HttpCookies from 'ievv_jsbase/http/HttpCookies';\nlet cookies = HttpCookies();\nlet name = cookies.get('pageurl', 'http://example.com');",
      "<caption>Get a cookie named \"name\" in strict mode</caption>\nimport HttpCookies from 'ievv_jsbase/http/HttpCookies';\nimport {HttpCookieNotFoundError} from 'ievv_jsbase/http/HttpCookies';\nlet cookies = HttpCookies();\ntry {\n    let name = cookies.getStrict('name');\n} catch(e) {\n    if(e instanceof HttpCookieNotFoundError) {\n        console.error('Cookie not found', e);\n    } else {\n        throw e;\n    }\n}"
    ],
    "lineNumber": 38,
    "interface": false
  },
  {
    "__docId__": 233,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/http/HttpCookies.js~HttpCookies",
    "longname": "source/http/HttpCookies.js~HttpCookies#constructor",
    "access": null,
    "description": "",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rawCookies",
        "description": "Raw cookies string. This is\n     optional - it defaults to ``document.cookie``."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rawCookies",
    "memberof": "source/http/HttpCookies.js~HttpCookies",
    "longname": "source/http/HttpCookies.js~HttpCookies#rawCookies",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cookies",
    "memberof": "source/http/HttpCookies.js~HttpCookies",
    "longname": "source/http/HttpCookies.js~HttpCookies#cookies",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "__parse",
    "memberof": "source/http/HttpCookies.js~HttpCookies",
    "longname": "source/http/HttpCookies.js~HttpCookies#__parse",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "source/http/HttpCookies.js~HttpCookies",
    "longname": "source/http/HttpCookies.js~HttpCookies#get",
    "access": null,
    "description": "Get cookie value.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": "The name of the cookie."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fallback",
        "description": "Fallback value if the cookie with the provided\n     ``cookieName`` does not exist.\n     Defaults to ``undefined``."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The cookie value, or the fallback value if no cookie\n     with the provided ``cookieName`` is found."
    },
    "generator": false
  },
  {
    "__docId__": 238,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getStrict",
    "memberof": "source/http/HttpCookies.js~HttpCookies",
    "longname": "source/http/HttpCookies.js~HttpCookies#getStrict",
    "access": null,
    "description": "Get cookie value and throw exception if it is not found.",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The cookie value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": "The name of the cookie."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The cookie value."
    },
    "throws": [
      {
        "types": [
          "HttpCookieNotFoundError"
        ],
        "description": "If no cookie named ``cookieName`` is found."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "contains",
    "memberof": "source/http/HttpCookies.js~HttpCookies",
    "longname": "source/http/HttpCookies.js~HttpCookies#contains",
    "access": null,
    "description": "Check if a cookie is among the parsed cookies.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} ``true`` if the cookie is among the parsed cookies."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": "The name of the cookie to look for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "``true`` if the cookie is among the parsed cookies."
    },
    "generator": false
  },
  {
    "__docId__": 240,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpDjangoFileRequest.js",
    "memberof": null,
    "longname": "source/http/HttpDjangoFileRequest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import HttpFileRequest from './HttpFileRequest'\nimport HttpCookies from './HttpCookies'\n\n/**\n * Extends HttpFileRequest with automatic handling of\n * the Django csrftoken.\n */\nexport default class HttpDjangoFileRequest extends HttpFileRequest {\n  /**\n   * @param args Same args as for {@link HttpResponse}\n   */\n  constructor (...args) {\n    super(...args)\n    this._cookies = new HttpCookies()\n  }\n\n  /**\n   * Returns the value of the ``csrftoken`` cookie.\n   *\n   * @returns {string} Csrf token.\n   */\n  get csrftoken () {\n    return this._cookies.getStrict('csrftoken')\n  }\n\n  /**\n   * Ensures the csrftoken cookie value is automatically set in the\n   * ``X-CSRFToken`` header for all request except GET and HEAD.\n   *\n   * @param method See {@link HttpRequest}.\n   */\n  setDefaultRequestHeaders (method) {\n    super.setDefaultRequestHeaders(method)\n    let shouldAddCsrfToken = !(method === 'GET' || method === 'HEAD')\n    if (shouldAddCsrfToken) {\n      this.setRequestHeader('X-CSRFToken', this.csrftoken)\n    }\n  }\n}\n"
  },
  {
    "__docId__": 241,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpDjangoFileRequest",
    "memberof": "source/http/HttpDjangoFileRequest.js",
    "longname": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpDjangoFileRequest",
    "importStyle": "HttpDjangoFileRequest",
    "description": "Extends HttpFileRequest with automatic handling of\nthe Django csrftoken.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "source/http/HttpFileRequest.js~HttpFileRequest"
    ]
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest",
    "longname": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Same args as for {@link HttpResponse}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_cookies",
    "memberof": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest",
    "longname": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest#_cookies",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "csrftoken",
    "memberof": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest",
    "longname": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest#csrftoken",
    "access": null,
    "description": "Returns the value of the ``csrftoken`` cookie.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Csrf token."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Csrf token."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultRequestHeaders",
    "memberof": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest",
    "longname": "source/http/HttpDjangoFileRequest.js~HttpDjangoFileRequest#setDefaultRequestHeaders",
    "access": null,
    "description": "Ensures the csrftoken cookie value is automatically set in the\n``X-CSRFToken`` header for all request except GET and HEAD.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "See {@link HttpRequest}."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpDjangoJsonRequest.js",
    "memberof": null,
    "longname": "source/http/HttpDjangoJsonRequest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import HttpJsonRequest from './HttpJsonRequest'\nimport HttpCookies from './HttpCookies'\n\n/**\n * Extends {@link HttpJsonRequest} with automatic handling\n * of the Django csrftoken.\n *\n * @example <caption>Make a POST request</caption>\n * const request = new HttpDjangoJsonRequest('http://example.com/api/users/');\n * request.post({'name': 'Peter Pan', 'age': 14})\n *     .then((response) => {\n *         console.log('Success!', response.bodydata);\n *     })\n *     .catch((error) => {\n *         console.error('Error:', error.toString());\n *     });\n */\nexport default class HttpDjangoJsonRequest extends HttpJsonRequest {\n  /**\n   * @param args Same args as for {@link HttpResponse}.\n   */\n  constructor(...args) {\n    super(...args);\n    this._cookies = new HttpCookies();\n  }\n\n  /**\n   * Returns the value of the ``csrftoken`` cookie.\n   */\n  get csrftoken() {\n    return this._cookies.getStrict('csrftoken');\n  }\n\n  /**\n   * Ensures the csrftoken cookie value is automatically set in\n   * the ``X-CSRFToken`` header for all requests except GET and HEAD.\n   *\n   * @param method See {@link HttpRequest}.\n   */\n  setDefaultRequestHeaders(method) {\n    super.setDefaultRequestHeaders(method);\n    let shouldAddCsrfToken = !(method == 'GET' || method == 'HEAD');\n    if(shouldAddCsrfToken) {\n      this.setRequestHeader(\"X-CSRFToken\", this.csrftoken);\n    }\n  }\n}\n"
  },
  {
    "__docId__": 247,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpDjangoJsonRequest",
    "memberof": "source/http/HttpDjangoJsonRequest.js",
    "longname": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpDjangoJsonRequest",
    "importStyle": "HttpDjangoJsonRequest",
    "description": "Extends {@link HttpJsonRequest} with automatic handling\nof the Django csrftoken.",
    "examples": [
      "<caption>Make a POST request</caption>\nconst request = new HttpDjangoJsonRequest('http://example.com/api/users/');\nrequest.post({'name': 'Peter Pan', 'age': 14})\n    .then((response) => {\n        console.log('Success!', response.bodydata);\n    })\n    .catch((error) => {\n        console.error('Error:', error.toString());\n    });"
    ],
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "source/http/HttpJsonRequest.js~HttpJsonRequest"
    ]
  },
  {
    "__docId__": 248,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest",
    "longname": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest#constructor",
    "access": null,
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Same args as for {@link HttpResponse}."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_cookies",
    "memberof": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest",
    "longname": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest#_cookies",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "csrftoken",
    "memberof": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest",
    "longname": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest#csrftoken",
    "access": null,
    "description": "Returns the value of the ``csrftoken`` cookie.",
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultRequestHeaders",
    "memberof": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest",
    "longname": "source/http/HttpDjangoJsonRequest.js~HttpDjangoJsonRequest#setDefaultRequestHeaders",
    "access": null,
    "description": "Ensures the csrftoken cookie value is automatically set in\nthe ``X-CSRFToken`` header for all requests except GET and HEAD.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "See {@link HttpRequest}."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpFileRequest.js",
    "memberof": null,
    "longname": "source/http/HttpFileRequest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import HttpRequest from './HttpRequest'\nimport HttpFileResponse from './HttpFileResponse'\n\n/**\n * Extends HttpRequest with file request/response handling.\n */\nexport default class HttpFileRequest extends HttpRequest {\n  /**\n   * Overridden to return the response as a\n   * {@link HttpFileResponse} instead of a HttpResponse.\n   *\n   * @returns {HttpFileResponse}\n   */\n  makeResponse () {\n    return new HttpFileResponse(this.request)\n  }\n\n  /**\n   * Overridden to ensure we send the correct content-type header for\n   * file requests.\n   */\n  setDefaultRequestHeaders (method) {\n    super.setDefaultRequestHeaders(method)\n    this.setRequestHeader('Accept', 'multipart/form-data')\n  }\n}\n"
  },
  {
    "__docId__": 253,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpFileRequest",
    "memberof": "source/http/HttpFileRequest.js",
    "longname": "source/http/HttpFileRequest.js~HttpFileRequest",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpFileRequest",
    "importStyle": "HttpFileRequest",
    "description": "Extends HttpRequest with file request/response handling.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "source/http/HttpRequest.js~HttpRequest"
    ]
  },
  {
    "__docId__": 254,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeResponse",
    "memberof": "source/http/HttpFileRequest.js~HttpFileRequest",
    "longname": "source/http/HttpFileRequest.js~HttpFileRequest#makeResponse",
    "access": null,
    "description": "Overridden to return the response as a\n{@link HttpFileResponse} instead of a HttpResponse.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HttpFileResponse}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "HttpFileResponse"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 255,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultRequestHeaders",
    "memberof": "source/http/HttpFileRequest.js~HttpFileRequest",
    "longname": "source/http/HttpFileRequest.js~HttpFileRequest#setDefaultRequestHeaders",
    "access": null,
    "description": "Overridden to ensure we send the correct content-type header for\nfile requests.",
    "lineNumber": 22,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 256,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpFileResponse.js",
    "memberof": null,
    "longname": "source/http/HttpFileResponse.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import HttpResponse from './HttpResponse'\n\n/**\n * Extends HttpResponse with extra functionality for\n * working with JSON response data.\n */\nexport default class HttpFileResponse extends HttpResponse {}\n"
  },
  {
    "__docId__": 257,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpFileResponse",
    "memberof": "source/http/HttpFileResponse.js",
    "longname": "source/http/HttpFileResponse.js~HttpFileResponse",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpFileResponse",
    "importStyle": "HttpFileResponse",
    "description": "Extends HttpResponse with extra functionality for\nworking with JSON response data.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "source/http/HttpResponse.js~HttpResponse"
    ]
  },
  {
    "__docId__": 258,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpJsonRequest.js",
    "memberof": null,
    "longname": "source/http/HttpJsonRequest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import HttpJsonResponse from \"./HttpJsonResponse\"\nimport HttpRequest from \"./HttpRequest\"\nimport ObjectManager from '../utils/ObjectManager'\n\n\n/**\n * Extends {@link HttpRequest} with transparent JSON request/response handling.\n *\n * @example <caption>Make a GET request</caption>\n * const request = new JsonHttpRequest('http://example.com/api/users/')\n * request.urlParser.queryString.set('search', 'doe')\n * request.get()\n *     .then((response) => {\n *         console.log('Success!', response.bodydata)\n *     })\n *     .catch((error) => {\n *         console.error('Error:', error.toString())\n *     })\n */\nexport default class JsonHttpRequest extends HttpRequest {\n  /**\n   * Overridden to automatically convert request data to JSON.\n   */\n  makeRequestBody(data) {\n    return JSON.stringify(data)\n  }\n\n  /**\n   * Overridden to return the response as a\n   * {@link HttpJsonResponse} instead if a HttpResponse.\n   *\n   * @returns {HttpJsonResponse}\n   */\n  makeResponse() {\n    return new HttpJsonResponse(this.request)\n  }\n\n  /**\n   * Overridden to ensure we send the correct content-type header for\n   * json requests.\n   */\n  setDefaultRequestHeaders(method) {\n    super.setDefaultRequestHeaders(method)\n    this.setRequestHeader('Accept', 'application/json')\n    this.setRequestHeader('Content-Type', 'application/json; charset=UTF-8')\n  }\n\n  /**\n   * Shortcut for getting all pagination pages and resolve an array\n   * of the results for all pages.\n   *\n   * Assumes your API uses pagination where the ``next`` page is returned as\n   * an URL, and that the results for each pagination page is an array.\n   *\n   * The first page retrived is whatever this request is configured for,\n   * so you can use this to do things like request pagination page 10 -> 20,\n   * just ensure the request is configured so that the page that would have\n   * been retrieved if you just used ``get()`` would have been page 10.\n   *\n   * @param {string} resultsAttribute The attribute in the response data that\n   *    contains the results array. Defaults to ``results``.\n   * @param {string} nextUrlAttribute The attribute in the response data that\n   *    contains the URL of the next pagination page. Defaults to ``next``.\n   * @param {number} maxPages The max number of pages to load. If this is ``null``\n   *    (the default) we load all pages until the ``nextUrlAttribute`` value is ``null``\n   *    or ``undefined``.\n   * @returns {Promise<any>}\n   */\n  getAllPaginationPages (maxPages = null, resultsAttribute = 'results', nextUrlAttribute = 'next') {\n    return new Promise((resolve, reject) => {\n      const results = []\n      let loadedPageCount = 0\n      const recursiveLoadAllPagesFromApi = (request) => {\n        request.get()\n          .then((response) => {\n            results.push(...response.bodydata[resultsAttribute])\n            loadedPageCount += 1\n            let hasMaxPageCount = maxPages !== null && loadedPageCount >= maxPages\n            if (!hasMaxPageCount && ObjectManager.validate(response, 'bodydata', nextUrlAttribute)) {\n              const nextRequest = request.deepCopy()\n              nextRequest.setUrl(response.bodydata.next)\n              recursiveLoadAllPagesFromApi(nextRequest)\n            } else {\n              resolve(results)\n            }\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      }\n      recursiveLoadAllPagesFromApi(this)\n    })\n  }\n}\n"
  },
  {
    "__docId__": 259,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "JsonHttpRequest",
    "memberof": "source/http/HttpJsonRequest.js",
    "longname": "source/http/HttpJsonRequest.js~JsonHttpRequest",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpJsonRequest",
    "importStyle": "JsonHttpRequest",
    "description": "Extends {@link HttpRequest} with transparent JSON request/response handling.",
    "examples": [
      "<caption>Make a GET request</caption>\nconst request = new JsonHttpRequest('http://example.com/api/users/')\nrequest.urlParser.queryString.set('search', 'doe')\nrequest.get()\n    .then((response) => {\n        console.log('Success!', response.bodydata)\n    })\n    .catch((error) => {\n        console.error('Error:', error.toString())\n    })"
    ],
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "source/http/HttpRequest.js~HttpRequest"
    ]
  },
  {
    "__docId__": 260,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeRequestBody",
    "memberof": "source/http/HttpJsonRequest.js~JsonHttpRequest",
    "longname": "source/http/HttpJsonRequest.js~JsonHttpRequest#makeRequestBody",
    "access": null,
    "description": "Overridden to automatically convert request data to JSON.",
    "lineNumber": 24,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 261,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeResponse",
    "memberof": "source/http/HttpJsonRequest.js~JsonHttpRequest",
    "longname": "source/http/HttpJsonRequest.js~JsonHttpRequest#makeResponse",
    "access": null,
    "description": "Overridden to return the response as a\n{@link HttpJsonResponse} instead if a HttpResponse.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HttpJsonResponse}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "HttpJsonResponse"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 262,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultRequestHeaders",
    "memberof": "source/http/HttpJsonRequest.js~JsonHttpRequest",
    "longname": "source/http/HttpJsonRequest.js~JsonHttpRequest#setDefaultRequestHeaders",
    "access": null,
    "description": "Overridden to ensure we send the correct content-type header for\njson requests.",
    "lineNumber": 42,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 263,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAllPaginationPages",
    "memberof": "source/http/HttpJsonRequest.js~JsonHttpRequest",
    "longname": "source/http/HttpJsonRequest.js~JsonHttpRequest#getAllPaginationPages",
    "access": null,
    "description": "Shortcut for getting all pagination pages and resolve an array\nof the results for all pages.\n\nAssumes your API uses pagination where the ``next`` page is returned as\nan URL, and that the results for each pagination page is an array.\n\nThe first page retrived is whatever this request is configured for,\nso you can use this to do things like request pagination page 10 -> 20,\njust ensure the request is configured so that the page that would have\nbeen retrieved if you just used ``get()`` would have been page 10.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "resultsAttribute",
        "description": "The attribute in the response data that\n   contains the results array. Defaults to ``results``."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nextUrlAttribute",
        "description": "The attribute in the response data that\n   contains the URL of the next pagination page. Defaults to ``next``."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxPages",
        "description": "The max number of pages to load. If this is ``null``\n   (the default) we load all pages until the ``nextUrlAttribute`` value is ``null``\n   or ``undefined``."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 264,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpJsonResponse.js",
    "memberof": null,
    "longname": "source/http/HttpJsonResponse.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import HttpResponse from \"./HttpResponse\";\n\n\n/**\n * Extends HttpResponse with extra functionality for\n * working with JSON response data.\n *\n * The most important addition is the {@link HttpJsonResponse#bodydata}\n * property that you will want to use instead of\n * {@link HttpResponse#body}.\n */\nexport default class HttpJsonResponse extends HttpResponse {\n\n    /**\n     * Get the response body (the responseText attribute of the XMLHttpRequest)\n     * decoded from JSON.\n     */\n    get bodydata() {\n        if(this.isConnectionRefused()) {\n            return null;\n        } else {\n            return this.__parseResponseTextAsJson();\n        }\n    }\n\n    __parseResponseTextAsJson() {\n        return JSON.parse(this.body);\n    }\n\n    /**\n     * Overriden to make use of JSON.stringify to produce more\n     * pretty output.\n     */\n    getPrettyfiedBody() {\n        let prettyBody;\n        try {\n            prettyBody = JSON.stringify(this.bodydata, null, 2);\n        } catch (SyntaxError) {\n            prettyBody = this.body;\n        }\n        return prettyBody;\n    }\n}\n"
  },
  {
    "__docId__": 265,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpJsonResponse",
    "memberof": "source/http/HttpJsonResponse.js",
    "longname": "source/http/HttpJsonResponse.js~HttpJsonResponse",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpJsonResponse",
    "importStyle": "HttpJsonResponse",
    "description": "Extends HttpResponse with extra functionality for\nworking with JSON response data.\n\nThe most important addition is the {@link HttpJsonResponse#bodydata}\nproperty that you will want to use instead of\n{@link HttpResponse#body}.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "source/http/HttpResponse.js~HttpResponse"
    ]
  },
  {
    "__docId__": 266,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "bodydata",
    "memberof": "source/http/HttpJsonResponse.js~HttpJsonResponse",
    "longname": "source/http/HttpJsonResponse.js~HttpJsonResponse#bodydata",
    "access": null,
    "description": "Get the response body (the responseText attribute of the XMLHttpRequest)\ndecoded from JSON.",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 267,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "__parseResponseTextAsJson",
    "memberof": "source/http/HttpJsonResponse.js~HttpJsonResponse",
    "longname": "source/http/HttpJsonResponse.js~HttpJsonResponse#__parseResponseTextAsJson",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 268,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPrettyfiedBody",
    "memberof": "source/http/HttpJsonResponse.js~HttpJsonResponse",
    "longname": "source/http/HttpJsonResponse.js~HttpJsonResponse#getPrettyfiedBody",
    "access": null,
    "description": "Overriden to make use of JSON.stringify to produce more\npretty output.",
    "lineNumber": 34,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 269,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpRequest.js",
    "memberof": null,
    "longname": "source/http/HttpRequest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import HttpResponse from \"./HttpResponse\"\nimport {UrlParser} from \"./UrlParser\"\n\n\n/**\n * API for performing HTTP requests.\n *\n * @example <caption>Make a POST request</caption>\n * const request = new HttpRequest('http://example.com/api/users/')\n * request.post('Hello world')\n *     .then((response) => {\n *         // Success - response is a HttpResponse object.\n *         console.log(response.toString())\n *         if(response.isSuccess()) {\n *             console.log('Success: ', response.body)\n *         } else if (response.isRedirect) {\n *             console.log('Hmm strange, we got a redirect instead of a 2xx response.')\n *         }\n *     })\n *     .catch((error) => {\n *         // Error - response is an HttpResponse object.\n *         console.error(error.toString())\n *         if(error.response.isRedirect()) {\n *             // Yes - redirect is treated as an error by default.\n *             // you can change this by supplying an extra argument\n *             // to HttpResponse()\n *             console.log('We got a 3xx response!', error.response.body)\n *         } else if(error.response.isClientError()) {\n *             console.log('We got a 4xx response!', error.response.body)\n *         } else if (error.response.isServerError()) {\n *             console.log('We got a 5xx response!', error.response.body)\n *         } else if (error.response.isConnectionRefused()) {\n *             console.log('Connection refused.')\n *         }\n *         // throw error  // You can throw the error as an exception\n *     })\n *\n * @example <caption>Make a GET request with a querystring</caption>\n * const request = new HttpRequest('http://example.com/api/users/')\n * request.urlParser.queryString.set('search', 'doe')\n * request.get()\n *     .then((response) => {\n *         console.log('Success!', response.toString())\n *     })\n *     .catch((error) => {\n *         console.error('Error:', error.toString())\n *     })\n */\nexport default class HttpRequest {\n  /**\n   * @param {string} url The URL to request.\n   *      If this is supplied, it is passed to\n   *      {@link HttpRequest#setUrl}\n   */\n  constructor(url) {\n    this._treatRedirectResponseAsError = true\n    this.requestHeaders = new Map()\n    this.request = null\n    this._urlParser = null\n    if(typeof url !== 'undefined') {\n      this.setUrl(url)\n    }\n  }\n\n  /**\n   * Create a deep copy of this HttpRequest object.\n   *\n   * WARNING: This does not copy request headers since those\n   * are set on the XMLHttpRequest object, and that object is\n   * reset in the copy.\n   *\n   * @return The copy.\n   */\n  deepCopy () {\n    let copy = Object.assign(Object.create(this), this)\n    copy.request = null\n    if (this._urlParser !== null) {\n      copy._urlParser = this._urlParser.deepCopy()\n    }\n    copy.requestHeaders = new Map(this.requestHeaders)\n    return copy\n  }\n\n  /**\n   * Get the parsed URL of the request.\n   *\n   * @returns {UrlParser} The UrlParser for the parsed URL.\n   */\n  get urlParser() {\n    return this._urlParser\n  }\n\n  /**\n   * Set the URL of the request.\n   *\n   * @param {String} url The URL.\n   */\n  setUrl(url) {\n    this._urlParser = new UrlParser(url)\n  }\n\n  /**\n   * Set how we treat 3xx responses.\n   *\n   * By default they are treated as errors, but you can change\n   * this behavior by calling this function.\n   *\n   * @param {bool} treatRedirectResponseAsError Treat 3xx responses as\n   *      errors?\n   *\n   * @example <caption>Do not treat 3xx responses as error</caption>\n   * const request = HttpRequest('http://example.com/api/')\n   * request.setTreatRedirectResponseAsError(false)\n   */\n  setTreatRedirectResponseAsError(treatRedirectResponseAsError) {\n    this._treatRedirectResponseAsError = treatRedirectResponseAsError\n  }\n\n  _makeXMLHttpRequest () {\n    return new XMLHttpRequest()\n  }\n\n  /**\n   * Send the request.\n   *\n   * @param method The HTTP method. I.e.: \"get\", \"post\", ...\n   * @param data Request body data. This is sent through\n   *      {@link HttpRequest#makeRequestBody} before it\n   *      is sent.*\n   * @return {Promise} A Promise.\n   *\n   *      The resolve function argument is an\n   *      an object of whatever {@link HttpRequest#makeResponse}\n   *      returns.\n   *\n   *      The reject function argument is a\n   *      {@link HttpResponseError} object created using\n   *      {@link HttpResponse#toError}.\n   */\n  send(method, data) {\n    method = method.toUpperCase()\n    if(this._urlParser === null) {\n      throw new TypeError('Can not call send() without an url.')\n    }\n    return new Promise((resolve, reject) => {\n      this.request = this._makeXMLHttpRequest()\n      this.request.open(method, this.urlParser.buildUrl(), true)\n      this.setDefaultRequestHeaders(method)\n      this._applyRequestHeadersToRequest()\n      this.request.onload  = () => this._onComplete(resolve, reject)\n      this.request.send(this.makeRequestBody(data))\n    })\n  }\n\n  /**\n   * Shortcut for ``send(\"get\", data)``.\n   *\n   * @see {@link HttpRequest#send}\n   */\n  get(data) {\n    return this.send('get', data)\n  }\n\n  /**\n   * Shortcut for ``send(\"head\", data)``.\n   *\n   * @see {@link HttpRequest#send}\n   */\n  head(data) {\n    return this.send('head', data)\n  }\n\n  /**\n   * Shortcut for ``send(\"post\", data)``.\n   *\n   * @see {@link HttpRequest#send}\n   */\n  post(data) {\n    return this.send('post', data)\n  }\n\n  /**\n   * Shortcut for ``send(\"put\", data)``.\n   *\n   * @see {@link HttpRequest#send}\n   */\n  put(data) {\n    return this.send('put', data)\n  }\n\n  /**\n   * Shortcut for ``send(\"patch\", data)``.\n   *\n   * @see {@link HttpRequest#send}\n   */\n  patch(data) {\n    return this.send('patch', data)\n  }\n\n  /**\n   * Shortcut for ``send(\"delete\", data)``.\n   *\n   * Named httpdelete to avoid crash with builtin keyword ``delete``.\n   *\n   * @see {@link HttpRequest#send}\n   */\n  httpdelete(data) {\n    return this.send('delete', data)\n  }\n\n  /**\n   * Make request body from the provided data.\n   *\n   * By default this just returns the provided data,\n   * but subclasses can override this to perform automatic\n   * conversion.\n   *\n   * Must return a string.\n   */\n  makeRequestBody(data) {\n    return data\n  }\n\n  /**\n   * Creates a {@link HttpResponse}.\n   * @returns {HttpResponse}\n   */\n  makeResponse() {\n    return new HttpResponse(this.request)\n  }\n\n  _applyRequestHeadersToRequest () {\n    for (let [header, value] of this.requestHeaders) {\n      this.request.setRequestHeader(header, value)\n    }\n  }\n\n  /**\n   * Set a request header.\n   *\n   * @param header The header name. E.g.: ``\"Content-type\"``.\n   * @param value The header value.\n   */\n  setRequestHeader(header, value) {\n    this.requestHeaders.set(header, value)\n  }\n\n  /**\n   * Set default request headers.\n   *\n   * Does nothing by default, but subclasses can override this.\n   *\n   * @param method The HTTP request method (GET, POST, PUT, ...).\n   *      Will always be uppercase.\n   */\n  setDefaultRequestHeaders(method) {}\n\n  _onComplete(resolve, reject) {\n    let response = this.makeResponse()\n    let isSuccess = false\n    if(this._treatRedirectResponseAsError) {\n      isSuccess = response.isSuccess()\n    } else {\n      isSuccess = response.isSuccess() || response.isRedirect()\n    }\n    if(isSuccess) {\n      resolve(response)\n    } else {\n      reject(response.toError())\n    }\n  }\n}\n"
  },
  {
    "__docId__": 270,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpRequest",
    "memberof": "source/http/HttpRequest.js",
    "longname": "source/http/HttpRequest.js~HttpRequest",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpRequest",
    "importStyle": "HttpRequest",
    "description": "API for performing HTTP requests.",
    "examples": [
      "<caption>Make a POST request</caption>\nconst request = new HttpRequest('http://example.com/api/users/')\nrequest.post('Hello world')\n    .then((response) => {\n        // Success - response is a HttpResponse object.\n        console.log(response.toString())\n        if(response.isSuccess()) {\n            console.log('Success: ', response.body)\n        } else if (response.isRedirect) {\n            console.log('Hmm strange, we got a redirect instead of a 2xx response.')\n        }\n    })\n    .catch((error) => {\n        // Error - response is an HttpResponse object.\n        console.error(error.toString())\n        if(error.response.isRedirect()) {\n            // Yes - redirect is treated as an error by default.\n            // you can change this by supplying an extra argument\n            // to HttpResponse()\n            console.log('We got a 3xx response!', error.response.body)\n        } else if(error.response.isClientError()) {\n            console.log('We got a 4xx response!', error.response.body)\n        } else if (error.response.isServerError()) {\n            console.log('We got a 5xx response!', error.response.body)\n        } else if (error.response.isConnectionRefused()) {\n            console.log('Connection refused.')\n        }\n        // throw error  // You can throw the error as an exception\n    })",
      "<caption>Make a GET request with a querystring</caption>\nconst request = new HttpRequest('http://example.com/api/users/')\nrequest.urlParser.queryString.set('search', 'doe')\nrequest.get()\n    .then((response) => {\n        console.log('Success!', response.toString())\n    })\n    .catch((error) => {\n        console.error('Error:', error.toString())\n    })"
    ],
    "lineNumber": 49,
    "interface": false
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#constructor",
    "access": null,
    "description": "",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to request.\n     If this is supplied, it is passed to\n     {@link HttpRequest#setUrl}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 272,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_treatRedirectResponseAsError",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#_treatRedirectResponseAsError",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "requestHeaders",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#requestHeaders",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "request",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#request",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_urlParser",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#_urlParser",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deepCopy",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#deepCopy",
    "access": null,
    "description": "Create a deep copy of this HttpRequest object.\n\nWARNING: This does not copy request headers since those\nare set on the XMLHttpRequest object, and that object is\nreset in the copy.",
    "lineNumber": 74,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The copy."
    },
    "generator": false
  },
  {
    "__docId__": 277,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "urlParser",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#urlParser",
    "access": null,
    "description": "Get the parsed URL of the request.",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{UrlParser} The UrlParser for the parsed URL."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UrlParser"
      ],
      "spread": false,
      "description": "The UrlParser for the parsed URL."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 278,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setUrl",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#setUrl",
    "access": null,
    "description": "Set the URL of the request.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 279,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_urlParser",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#_urlParser",
    "access": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setTreatRedirectResponseAsError",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#setTreatRedirectResponseAsError",
    "access": null,
    "description": "Set how we treat 3xx responses.\n\nBy default they are treated as errors, but you can change\nthis behavior by calling this function.",
    "examples": [
      "<caption>Do not treat 3xx responses as error</caption>\nconst request = HttpRequest('http://example.com/api/')\nrequest.setTreatRedirectResponseAsError(false)"
    ],
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "treatRedirectResponseAsError",
        "description": "Treat 3xx responses as\n     errors?"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 281,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_treatRedirectResponseAsError",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#_treatRedirectResponseAsError",
    "access": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_makeXMLHttpRequest",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#_makeXMLHttpRequest",
    "access": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 283,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "send",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#send",
    "access": null,
    "description": "Send the request.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The HTTP method. I.e.: \"get\", \"post\", ..."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Request body data. This is sent through\n     {@link HttpRequest#makeRequestBody} before it\n     is sent.*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise.\n\n     The resolve function argument is an\n     an object of whatever {@link HttpRequest#makeResponse}\n     returns.\n\n     The reject function argument is a\n     {@link HttpResponseError} object created using\n     {@link HttpResponse#toError}."
    },
    "generator": false
  },
  {
    "__docId__": 284,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "request",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#request",
    "access": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#get",
    "access": null,
    "description": "Shortcut for ``send(\"get\", data)``.",
    "see": [
      "{@link HttpRequest#send}"
    ],
    "lineNumber": 160,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 286,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "head",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#head",
    "access": null,
    "description": "Shortcut for ``send(\"head\", data)``.",
    "see": [
      "{@link HttpRequest#send}"
    ],
    "lineNumber": 169,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 287,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "post",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#post",
    "access": null,
    "description": "Shortcut for ``send(\"post\", data)``.",
    "see": [
      "{@link HttpRequest#send}"
    ],
    "lineNumber": 178,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 288,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "put",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#put",
    "access": null,
    "description": "Shortcut for ``send(\"put\", data)``.",
    "see": [
      "{@link HttpRequest#send}"
    ],
    "lineNumber": 187,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 289,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "patch",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#patch",
    "access": null,
    "description": "Shortcut for ``send(\"patch\", data)``.",
    "see": [
      "{@link HttpRequest#send}"
    ],
    "lineNumber": 196,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 290,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "httpdelete",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#httpdelete",
    "access": null,
    "description": "Shortcut for ``send(\"delete\", data)``.\n\nNamed httpdelete to avoid crash with builtin keyword ``delete``.",
    "see": [
      "{@link HttpRequest#send}"
    ],
    "lineNumber": 207,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 291,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeRequestBody",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#makeRequestBody",
    "access": null,
    "description": "Make request body from the provided data.\n\nBy default this just returns the provided data,\nbut subclasses can override this to perform automatic\nconversion.\n\nMust return a string.",
    "lineNumber": 220,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 292,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeResponse",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#makeResponse",
    "access": null,
    "description": "Creates a {@link HttpResponse}.",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HttpResponse}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "HttpResponse"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 293,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_applyRequestHeadersToRequest",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#_applyRequestHeadersToRequest",
    "access": null,
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 294,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setRequestHeader",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#setRequestHeader",
    "access": null,
    "description": "Set a request header.",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "header",
        "description": "The header name. E.g.: ``\"Content-type\"``."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The header value."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 295,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultRequestHeaders",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#setDefaultRequestHeaders",
    "access": null,
    "description": "Set default request headers.\n\nDoes nothing by default, but subclasses can override this.",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The HTTP request method (GET, POST, PUT, ...).\n     Will always be uppercase."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 296,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_onComplete",
    "memberof": "source/http/HttpRequest.js~HttpRequest",
    "longname": "source/http/HttpRequest.js~HttpRequest#_onComplete",
    "access": null,
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [
      {
        "name": "resolve",
        "types": [
          "*"
        ]
      },
      {
        "name": "reject",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 297,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/HttpResponse.js",
    "memberof": null,
    "longname": "source/http/HttpResponse.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import makeCustomError from \"../makeCustomError\";\n\n\n/**\n * Error class created by {@link HttpResponse#toError}.\n *\n * @type {Error}\n */\nexport let HttpResponseError = makeCustomError('HttpResponseError');\n\n\n\n/**\n * HTTP response.\n *\n * Wraps a XMLHttpRequest to make it easier to get\n * information about the response from the server.\n */\nexport default class HttpResponse {\n    /**\n     *\n     * @param request A XMLHttpRequest object.\n     */\n    constructor(request) {\n        this.request = request;\n    }\n\n    /**\n     * Returns ``true`` if {@link HttpResponse#status} is\n     * 200 or larger and less than 300.\n     */\n    isSuccess() {\n        return this.status >= 200 && this.status < 300;\n    }\n\n    /**\n     * Returns ``true`` if {@link HttpResponse#status} is\n     * 300 or larger and less than 400.\n     */\n    isRedirect() {\n        return this.status >= 300 && this.status < 400;\n    }\n\n    /**\n     * Returns ``true`` if {@link HttpResponse#status} is\n     * 400 or larger and less than 500.\n     */\n    isClientError() {\n        return this.status >= 400 && this.status < 500;\n    }\n\n    /**\n     * Returns ``true`` if {@link HttpResponse#status} is\n     * 500 or larger.\n     */\n    isServerError() {\n        return this.status >= 500;\n    }\n\n    /**\n     * Returns ``true`` if {@link HttpResponse#status} is 0.\n     * Assuming the XMLHttpRequest was actually sent, this\n     * means that the connection was refused.\n     */\n    isConnectionRefused() {\n        return this.status === 0;\n    }\n\n    /**\n     * Get the status code of the response (the status attribute of the XMLHttpRequest).\n     */\n    get status() {\n        return this.request.status;\n    }\n\n    /**\n     * Get the response body (the responseText attribute of the XMLHttpRequest).\n     */\n    get body() {\n        return this.request.responseText;\n    }\n\n    /**\n     * Get the response header as string.\n     */\n    responseHeaderToString() {\n        if(this.connectionRefused) {\n            return \"ERROR: Connection refused\";\n        } else {\n            return `HTTP ${this.status}\\n${this.request.getAllResponseHeaders()}`;\n        }\n    }\n\n    /**\n     * Create a {@link HttpResponseError} from this HttpResponse.\n     *\n     * @returns {HttpResponseError} An HttpResponseError with this HttpResponse\n     *      as the ``response`` property.\n     */\n    toError() {\n        return new HttpResponseError(this.toString(), {\n            response: this\n        });\n    }\n\n    /**\n     * Get {@link HttpResponse#body} pretty formatted.\n     *\n     * By default, this just returns {@link HttpResponse#body}\n     * but subclasses can override this to prettify the body\n     * if they know the output format of the body.\n     */\n    getPrettyfiedBody() {\n        return this.body;\n    }\n\n    /**\n     * Format as a string suitable for debugging.\n     */\n    toString() {\n        return `${this.responseHeaderToString()}\\n\\n${this.getPrettyfiedBody()}`\n    }\n}\n"
  },
  {
    "__docId__": 298,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "HttpResponseError",
    "memberof": "source/http/HttpResponse.js",
    "longname": "source/http/HttpResponse.js~HttpResponseError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpResponse",
    "importStyle": "{HttpResponseError}",
    "description": "Error class created by {@link HttpResponse#toError}.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HttpResponse",
    "memberof": "source/http/HttpResponse.js",
    "longname": "source/http/HttpResponse.js~HttpResponse",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/HttpResponse",
    "importStyle": "HttpResponse",
    "description": "HTTP response.\n\nWraps a XMLHttpRequest to make it easier to get\ninformation about the response from the server.",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 300,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#constructor",
    "access": null,
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "A XMLHttpRequest object."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 301,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "request",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#request",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isSuccess",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#isSuccess",
    "access": null,
    "description": "Returns ``true`` if {@link HttpResponse#status} is\n200 or larger and less than 300.",
    "lineNumber": 32,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 303,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRedirect",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#isRedirect",
    "access": null,
    "description": "Returns ``true`` if {@link HttpResponse#status} is\n300 or larger and less than 400.",
    "lineNumber": 40,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 304,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isClientError",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#isClientError",
    "access": null,
    "description": "Returns ``true`` if {@link HttpResponse#status} is\n400 or larger and less than 500.",
    "lineNumber": 48,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 305,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isServerError",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#isServerError",
    "access": null,
    "description": "Returns ``true`` if {@link HttpResponse#status} is\n500 or larger.",
    "lineNumber": 56,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 306,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isConnectionRefused",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#isConnectionRefused",
    "access": null,
    "description": "Returns ``true`` if {@link HttpResponse#status} is 0.\nAssuming the XMLHttpRequest was actually sent, this\nmeans that the connection was refused.",
    "lineNumber": 65,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 307,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "status",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#status",
    "access": null,
    "description": "Get the status code of the response (the status attribute of the XMLHttpRequest).",
    "lineNumber": 72,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 308,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "body",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#body",
    "access": null,
    "description": "Get the response body (the responseText attribute of the XMLHttpRequest).",
    "lineNumber": 79,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 309,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "responseHeaderToString",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#responseHeaderToString",
    "access": null,
    "description": "Get the response header as string.",
    "lineNumber": 86,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 310,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toError",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#toError",
    "access": null,
    "description": "Create a {@link HttpResponseError} from this HttpResponse.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HttpResponseError} An HttpResponseError with this HttpResponse\n     as the ``response`` property."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "HttpResponseError"
      ],
      "spread": false,
      "description": "An HttpResponseError with this HttpResponse\n     as the ``response`` property."
    },
    "generator": false
  },
  {
    "__docId__": 311,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPrettyfiedBody",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#getPrettyfiedBody",
    "access": null,
    "description": "Get {@link HttpResponse#body} pretty formatted.\n\nBy default, this just returns {@link HttpResponse#body}\nbut subclasses can override this to prettify the body\nif they know the output format of the body.",
    "lineNumber": 113,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 312,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "source/http/HttpResponse.js~HttpResponse",
    "longname": "source/http/HttpResponse.js~HttpResponse#toString",
    "access": null,
    "description": "Format as a string suitable for debugging.",
    "lineNumber": 120,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 313,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/QueryString.js",
    "memberof": null,
    "longname": "source/http/QueryString.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import typeDetect from '../utils/typeDetect'\n\n/**\n * Query-string creator and parser.\n *\n * @example <caption>Basics - build a querystring</caption>\n * const querystring = new QueryString();\n * querystring.set('name', 'Peter');\n * querystring.setIterable('tags', ['person', 'male']);\n * const encodedQuerystring = querystring.urlencode();\n * // encodedQuerystring === 'name=Peter&tags=person&tags=male'  // order may vary\n *\n * @example <caption>Parse a querystring</caption>\n * const querystring = new QueryString('name=Peter&tags=person&tags=male');\n * const name = querystring.get('name');\n * const tags = querystring.getArray('tags');\n * const firstTag = querystring.get('tags');\n *\n * @example <caption>Parse a querystring from window.location.search</caption>\n * // window.location.search == \"?name=test&age=12\"\n * const querystring = new QueryString(window.location.search);\n * const name = querystring.get('name');\n * const age = querystring.get('age');\n *\n * @example <caption>Parse and modify a querystring</caption>\n * const querystring = new QueryString('name=Peter&tags=person&tags=male');\n * querystring.set('name', 'John');\n * querystring.append('tags', 'important');\n * // querystring.urlencode() === 'name=John&tags=person&tags=male&tags=important'\n * querystring.setIterable('tags', ['male']);\n * // querystring.urlencode() === 'name=John&tags=male'\n */\nexport default class QueryString {\n  /**\n   *\n   * @param {string} querystring Optional input querystring to parse.\n   */\n  constructor(querystring='') {\n    this._queryStringMap = new Map();\n    if(querystring) {\n      if(typeof querystring !== 'string') {\n        throw new TypeError('The querystring argument must be a string.')\n      }\n      this._parseQueryString(querystring);\n    }\n  }\n\n  /**\n   * Create a deep copy of this QueryString object.\n   *\n   * @return The copy.\n   */\n  deepCopy () {\n    let copy = Object.assign(Object.create(this), this)\n    copy._queryStringMap = new Map(this._queryStringMap)\n    return copy\n  }\n\n  /**\n   * Returns ``true`` if the querystring is empty, otherwise ``false``.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this._queryStringMap.size === 0;\n  }\n\n  /**\n   * Remove all keys and values from the QueryString.\n   */\n  clear() {\n    this._queryStringMap.clear();\n  }\n\n  _parseQueryStringItem(querystringItem) {\n    const splitPair = querystringItem.split('=');\n    const key = decodeURIComponent(splitPair[0]);\n    const value = decodeURIComponent(splitPair[1]);\n    this.append(key, value);\n  }\n\n  _parseQueryString(querystring) {\n    if(querystring.substring(0, 1) == '?') {\n      querystring = querystring.substring(1);\n    }\n    const splitQueryString = querystring.split('&');\n    for(const querystringItem of splitQueryString) {\n      this._parseQueryStringItem(querystringItem);\n    }\n  }\n\n  _addToKey(key, value) {\n    this._queryStringMap.get(key).push(value);\n  }\n\n  _setKeyToEmptyArray(key) {\n    this._queryStringMap.set(key, []);\n  }\n\n  /**\n   * Set values from a querystring, like window.location.search.\n   *\n   * Overwrites any key/value pairs currently in this object with keys in the\n   * provided ``querystring``.\n   *\n   * @example\n   * const querystring = new QueryString();\n   * querystring.set('name', 'oldname');\n   * querystring.addValuesFromQueryString('name=newname&age=33');\n   * // querystring.get('name') == 'newname'\n   * // querystring.get('age') == '33'\n   *\n   * @param {string} querystring A querystring, like the one in window.location.search.\n   *    Examples: ``\"?a=10\"``, ``\"a=10\"``, ``\"a=10&s=test\"``.\n   */\n  setValuesFromQueryString(querystring) {\n    this.merge(new this.constructor(querystring));\n  }\n\n  /**\n   * Set values from an Object.\n   *\n   * Overwrites any key/value pairs currently in this QueryString\n   * with key/value pairs in the provided ``object``.\n   *\n   * Uses {@link QueryString#setSmart} to set the values, so\n   * the values of the map can be both simple types and\n   * iterables like arrays and sets.\n   *\n   * @example\n   * const querystring = new QueryString();\n   * querystring.set('name', 'oldname');\n   * querystring.addValuesFromObject({\n   *   name: 'newname',\n   *   age: 33,\n   *   tags: ['tag1', 'tag2']\n   * });\n   * // querystring.get('name') == 'newname'\n   * // querystring.get('age') == 33\n   * // querystring.getArray('tags') == ['tag1', 'tag2']\n   *\n   * @param {Object} object An Object.\n   */\n  setValuesFromObject(object) {\n    for(let key of Object.keys(object)) {\n      this.setSmart(key, object[key]);\n    }\n  }\n\n  /**\n   * Set values from a Map.\n   *\n   * Overwrites any key/value pairs currently in this QueryString\n   * with key/value pairs in the provided ``map``.\n   *\n   * Uses {@link QueryString#setSmart} to set the values, so\n   * the values of the map can be both simple types and\n   * iterables like arrays and sets.\n   *\n   * @example\n   * const querystring = new QueryString();\n   * querystring.set('name', 'oldname');\n   * querystring.addValuesFromMap(new Map([\n   *   ['name', 'newname'],\n   *   ['age', 33],\n   *   ['tags', ['tag1', 'tag2']]\n   * ]));\n   * // querystring.get('name') == 'newname'\n   * // querystring.get('age') == 33\n   * // querystring.getArray('tags') == ['tag1', 'tag2']\n   *\n   * @param {Map} map A map.\n   */\n  setValuesFromMap(map) {\n    for(let [key, value] of map.entries()) {\n      this.setSmart(key, value);\n    }\n  }\n\n  /**\n   * Merge {@link QueryString} objects into with this object.\n   *\n   * Overwrites any key/value pairs currently in this object with keys in the\n   * provided queryStringObjects in provided order, with the last\n   * one overwriting any preceding values.\n   *\n   * @example\n   * const querystring = new QueryString('name=oldname');\n   * querystring.merge(\n   *    new QueryString('name=newname1&age=33'),\n   *    new QueryString('name=newname2&size=large'));\n   * // querystring.get('name') == 'newname2'\n   * // querystring.get('age') == '33'\n   * // querystring.get('size') == 'large'\n   *\n   * @param queryStringObjects Zero or more {@link QueryString} objects.\n   */\n  merge(...queryStringObjects) {\n    for(let queryStringObject of queryStringObjects) {\n      for (let [key, value] of queryStringObject._queryStringMap) {\n        this._queryStringMap.set(key, value);\n      }\n    }\n  }\n\n  /**\n   * Set value from an iterable.\n   *\n   * @param {string} key The key to set.\n   * @param iterable Something that can be iterated with a\n   *      ``for(const value of iterable)`` loop.\n   *      All the values in the iterable must be strings.\n   *      If the iterable is empty the key will be removed\n   *      from the QueryString.\n   *\n   * @example\n   * const querystring = QueryString();\n   * querystring.setIterable('names', ['Peter', 'Jane']);\n   */\n  setIterable(key, iterable) {\n    this._setKeyToEmptyArray(key);\n    for(const value of iterable) {\n      this._addToKey(key, value);\n    }\n    if(this._queryStringMap.get(key).length === 0) {\n      this.remove(key);\n    }\n  }\n\n  /**\n   * Set a value.\n   *\n   * @param {string} key The key to store the value as.\n   * @param {string} value The value to set.\n   *\n   * @example\n   * const querystring = QueryString();\n   * querystring.set('name', 'Peter');\n   */\n  set(key, value) {\n    this.setIterable(key, [value]);\n  }\n\n  /**\n   * Calls {@link QueryString#set} or {@link QueryString#setIterable} depending\n   * on the type of the provided value.\n   *\n   * @param {string} key The key to store the value as.\n   * @param {string|number|boolean|array|Set} value The value to set using\n   *    {@link QueryString#set} or {@link QueryString#setIterable} depending\n   *    on the type.\n   */\n  setSmart(key, value) {\n    const valueType = typeDetect(value)\n    if(valueType === 'string' || valueType === 'number' || valueType === 'boolean') {\n      this.set(key, value)\n    } else if(valueType === 'array' || valueType === 'set') {\n      this.setIterable(key, value)\n    } else {\n      throw new Error(`Unsupporter value type: ${valueType}`)\n    }\n  }\n\n  /**\n   * Get a value.\n   *\n   * @param {string} key The key to get the value for.\n   * @param {string} fallback An optional fallback value if the key is\n   *      not in the QueryString. Defaults to ``undefined``.\n   */\n  get(key, fallback) {\n    const value = this._queryStringMap.get(key);\n    if(typeof value === 'undefined') {\n      return fallback;\n    } else {\n      return value[0];\n    }\n  }\n\n  /**\n   * Append a value to a key.\n   *\n   * @param {string} key The key to append a value to.\n   * @param {string} value The value to append.\n   *\n   * @example\n   * const querystring = QueryString();\n   * querystring.append('names', 'Jane');\n   * querystring.append('names', 'Joe');\n   * // querystring.urlencode() === 'names=Jane&names=Joe'\n   */\n  append(key, value) {\n    if (!this._queryStringMap.has(key)) {\n      this._setKeyToEmptyArray(key);\n    }\n    this._addToKey(key, value);\n  }\n\n  /**\n   * Get the values for the specified key as an array.\n   *\n   * Always returns an array, even if the value was set\n   * with {@link QueryString#set}.\n   *\n   * @param {string} key The key to get the values for.\n   * @param {Array} fallback An optional fallback value if they\n   *      key is not in the QueryString. Defaults to an empty array.\n   * @returns {Array}\n   */\n  getArray(key, fallback) {\n    if (this._queryStringMap.has(key)) {\n      const valueArray = this._queryStringMap.get(key);\n      return Array.from(valueArray);\n    }\n    if(typeof falback !== 'undefined') {\n      return [];\n    }\n    return fallback;\n  }\n\n  /**\n   * Remove the specified key from the QueryString.\n   *\n   * @param {string} key The key to remove.\n   */\n  remove(key) {\n    this._queryStringMap.delete(key);\n  }\n\n  /**\n   * Check if the QueryString contains the given key.\n   *\n   * @param {string} key The key to check for.\n   * @returns {boolean}\n   */\n  has(key) {\n    return this._queryStringMap.has(key);\n  }\n\n  _encodeKeyValue(key, value) {\n    key = `${key}`;\n    value = `${value}`;\n    return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  }\n\n  /**\n   * Get the QueryString object as a string in query-string format.\n   *\n   * @example\n   * const querystring = QueryString();\n   * querystring.set('next', '/a&b/');\n   * querystring.set('name', 'john');\n   * let urlEncodedQuerystring = querystring.urlencode();\n   * // urlEncodedQuerystring === 'name=john&next=%2Fa%26b%2F'  // order may vary\n   *\n   * @example <caption>Sort keys</caption>\n   * const querystring = QueryString();\n   * querystring.set('name', 'john');\n   * querystring.set('age', 33);\n   * let urlEncodedQuerystring = querystring.urlencode({sortKeys: true});\n   * // urlEncodedQuerystring === 'age=33&name=john'\n   *\n   * @example <caption>Sort values</caption>\n   * const querystring = QueryString();\n   * querystring.setIterable('name', ['john', 'amy', 'xion']);\n   * let urlEncodedQuerystring = querystring.urlencode();\n   * // urlEncodedQuerystring === 'name=amy&name=john&name=xion'\n   *\n   *\n   * @param {Object} options Options. All are optional\n   * @param {boolean} options.sortKeys Sort the keys using Array.sort? ``false`` by default.\n   * @param {boolean} options.sortValues Sort the values using Array.sort? ``false`` by default.\n   *    This only makes sense if you have keys with multiple values.\n   * @param {boolean} options.skipEmptyValues Skip empty values? ``false`` by default.\n   */\n  urlencode(options={}) {\n    const {sortKeys, sortValues, skipEmptyValues} = options\n    let keys = this._queryStringMap.keys()\n    if(sortKeys) {\n      keys = Array.from(keys)\n      keys.sort()\n    }\n\n    let urlEncodedArray = [];\n    for(let key of keys) {\n      let valueArray = this._queryStringMap.get(key);\n      if(sortValues) {\n        valueArray = Array.from(valueArray)\n        valueArray.sort()\n      }\n      for(const value of valueArray) {\n        if(skipEmptyValues && `${value}` === '') {\n          continue\n        }\n        urlEncodedArray.push(this._encodeKeyValue(key, value));\n      }\n    }\n    return urlEncodedArray.join('&');\n  }\n}\n"
  },
  {
    "__docId__": 314,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "QueryString",
    "memberof": "source/http/QueryString.js",
    "longname": "source/http/QueryString.js~QueryString",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/QueryString",
    "importStyle": "QueryString",
    "description": "Query-string creator and parser.",
    "examples": [
      "<caption>Basics - build a querystring</caption>\nconst querystring = new QueryString();\nquerystring.set('name', 'Peter');\nquerystring.setIterable('tags', ['person', 'male']);\nconst encodedQuerystring = querystring.urlencode();\n// encodedQuerystring === 'name=Peter&tags=person&tags=male'  // order may vary",
      "<caption>Parse a querystring</caption>\nconst querystring = new QueryString('name=Peter&tags=person&tags=male');\nconst name = querystring.get('name');\nconst tags = querystring.getArray('tags');\nconst firstTag = querystring.get('tags');",
      "<caption>Parse a querystring from window.location.search</caption>\n// window.location.search == \"?name=test&age=12\"\nconst querystring = new QueryString(window.location.search);\nconst name = querystring.get('name');\nconst age = querystring.get('age');",
      "<caption>Parse and modify a querystring</caption>\nconst querystring = new QueryString('name=Peter&tags=person&tags=male');\nquerystring.set('name', 'John');\nquerystring.append('tags', 'important');\n// querystring.urlencode() === 'name=John&tags=person&tags=male&tags=important'\nquerystring.setIterable('tags', ['male']);\n// querystring.urlencode() === 'name=John&tags=male'"
    ],
    "lineNumber": 33,
    "interface": false
  },
  {
    "__docId__": 315,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#constructor",
    "access": null,
    "description": "",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "querystring",
        "description": "Optional input querystring to parse."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 316,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_queryStringMap",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#_queryStringMap",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deepCopy",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#deepCopy",
    "access": null,
    "description": "Create a deep copy of this QueryString object.",
    "lineNumber": 53,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The copy."
    },
    "generator": false
  },
  {
    "__docId__": 318,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#isEmpty",
    "access": null,
    "description": "Returns ``true`` if the querystring is empty, otherwise ``false``.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 319,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#clear",
    "access": null,
    "description": "Remove all keys and values from the QueryString.",
    "lineNumber": 71,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 320,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parseQueryStringItem",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#_parseQueryStringItem",
    "access": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "querystringItem",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 321,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parseQueryString",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#_parseQueryString",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "querystring",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 322,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_addToKey",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#_addToKey",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 323,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_setKeyToEmptyArray",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#_setKeyToEmptyArray",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 324,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setValuesFromQueryString",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#setValuesFromQueryString",
    "access": null,
    "description": "Set values from a querystring, like window.location.search.\n\nOverwrites any key/value pairs currently in this object with keys in the\nprovided ``querystring``.",
    "examples": [
      "const querystring = new QueryString();\nquerystring.set('name', 'oldname');\nquerystring.addValuesFromQueryString('name=newname&age=33');\n// querystring.get('name') == 'newname'\n// querystring.get('age') == '33'"
    ],
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "querystring",
        "description": "A querystring, like the one in window.location.search.\n   Examples: ``\"?a=10\"``, ``\"a=10\"``, ``\"a=10&s=test\"``."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 325,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setValuesFromObject",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#setValuesFromObject",
    "access": null,
    "description": "Set values from an Object.\n\nOverwrites any key/value pairs currently in this QueryString\nwith key/value pairs in the provided ``object``.\n\nUses {@link QueryString#setSmart} to set the values, so\nthe values of the map can be both simple types and\niterables like arrays and sets.",
    "examples": [
      "const querystring = new QueryString();\nquerystring.set('name', 'oldname');\nquerystring.addValuesFromObject({\n  name: 'newname',\n  age: 33,\n  tags: ['tag1', 'tag2']\n});\n// querystring.get('name') == 'newname'\n// querystring.get('age') == 33\n// querystring.getArray('tags') == ['tag1', 'tag2']"
    ],
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "An Object."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 326,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setValuesFromMap",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#setValuesFromMap",
    "access": null,
    "description": "Set values from a Map.\n\nOverwrites any key/value pairs currently in this QueryString\nwith key/value pairs in the provided ``map``.\n\nUses {@link QueryString#setSmart} to set the values, so\nthe values of the map can be both simple types and\niterables like arrays and sets.",
    "examples": [
      "const querystring = new QueryString();\nquerystring.set('name', 'oldname');\nquerystring.addValuesFromMap(new Map([\n  ['name', 'newname'],\n  ['age', 33],\n  ['tags', ['tag1', 'tag2']]\n]));\n// querystring.get('name') == 'newname'\n// querystring.get('age') == 33\n// querystring.getArray('tags') == ['tag1', 'tag2']"
    ],
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "A map."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 327,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "merge",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#merge",
    "access": null,
    "description": "Merge {@link QueryString} objects into with this object.\n\nOverwrites any key/value pairs currently in this object with keys in the\nprovided queryStringObjects in provided order, with the last\none overwriting any preceding values.",
    "examples": [
      "const querystring = new QueryString('name=oldname');\nquerystring.merge(\n   new QueryString('name=newname1&age=33'),\n   new QueryString('name=newname2&size=large'));\n// querystring.get('name') == 'newname2'\n// querystring.get('age') == '33'\n// querystring.get('size') == 'large'"
    ],
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "queryStringObjects",
        "description": "Zero or more {@link QueryString} objects."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 328,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setIterable",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#setIterable",
    "access": null,
    "description": "Set value from an iterable.",
    "examples": [
      "const querystring = QueryString();\nquerystring.setIterable('names', ['Peter', 'Jane']);"
    ],
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to set."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": "Something that can be iterated with a\n     ``for(const value of iterable)`` loop.\n     All the values in the iterable must be strings.\n     If the iterable is empty the key will be removed\n     from the QueryString."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 329,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#set",
    "access": null,
    "description": "Set a value.",
    "examples": [
      "const querystring = QueryString();\nquerystring.set('name', 'Peter');"
    ],
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to store the value as."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to set."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 330,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setSmart",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#setSmart",
    "access": null,
    "description": "Calls {@link QueryString#set} or {@link QueryString#setIterable} depending\non the type of the provided value.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to store the value as."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "boolean",
          "array",
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to set using\n   {@link QueryString#set} or {@link QueryString#setIterable} depending\n   on the type."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 331,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#get",
    "access": null,
    "description": "Get a value.",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to get the value for."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fallback",
        "description": "An optional fallback value if the key is\n     not in the QueryString. Defaults to ``undefined``."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 332,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#append",
    "access": null,
    "description": "Append a value to a key.",
    "examples": [
      "const querystring = QueryString();\nquerystring.append('names', 'Jane');\nquerystring.append('names', 'Joe');\n// querystring.urlencode() === 'names=Jane&names=Joe'"
    ],
    "lineNumber": 292,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to append a value to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to append."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 333,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getArray",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#getArray",
    "access": null,
    "description": "Get the values for the specified key as an array.\n\nAlways returns an array, even if the value was set\nwith {@link QueryString#set}.",
    "lineNumber": 310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to get the values for."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fallback",
        "description": "An optional fallback value if they\n     key is not in the QueryString. Defaults to an empty array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 334,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#remove",
    "access": null,
    "description": "Remove the specified key from the QueryString.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 335,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "has",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#has",
    "access": null,
    "description": "Check if the QueryString contains the given key.",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to check for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 336,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_encodeKeyValue",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#_encodeKeyValue",
    "access": null,
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 337,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "urlencode",
    "memberof": "source/http/QueryString.js~QueryString",
    "longname": "source/http/QueryString.js~QueryString#urlencode",
    "access": null,
    "description": "Get the QueryString object as a string in query-string format.",
    "examples": [
      "const querystring = QueryString();\nquerystring.set('next', '/a&b/');\nquerystring.set('name', 'john');\nlet urlEncodedQuerystring = querystring.urlencode();\n// urlEncodedQuerystring === 'name=john&next=%2Fa%26b%2F'  // order may vary",
      "<caption>Sort keys</caption>\nconst querystring = QueryString();\nquerystring.set('name', 'john');\nquerystring.set('age', 33);\nlet urlEncodedQuerystring = querystring.urlencode({sortKeys: true});\n// urlEncodedQuerystring === 'age=33&name=john'",
      "<caption>Sort values</caption>\nconst querystring = QueryString();\nquerystring.setIterable('name', ['john', 'amy', 'xion']);\nlet urlEncodedQuerystring = querystring.urlencode();\n// urlEncodedQuerystring === 'name=amy&name=john&name=xion'"
    ],
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options. All are optional"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sortKeys",
        "description": "Sort the keys using Array.sort? ``false`` by default."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sortValues",
        "description": "Sort the values using Array.sort? ``false`` by default.\n   This only makes sense if you have keys with multiple values."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.skipEmptyValues",
        "description": "Skip empty values? ``false`` by default."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 338,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/http/UrlParser.js",
    "memberof": null,
    "longname": "source/http/UrlParser.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import QueryString from \"./QueryString\";\n\n\n/**\n * URL parser.\n *\n * @example\n * const urlparser = new UrlParser('http://example.com/api/people?name=Jane');\n * urlparser.queryString.set('search', 'doe');\n * // urlparser.buildUrl() === 'http://example.com/api/people?name=Jane&search=doe'\n */\nexport class UrlParser {\n\n  /**\n   * Join URL paths.\n   *\n   * @example\n   * UrlParser.pathJoin('/test', 'user/')  // == '/test/user/'\n   * UrlParser.pathJoin('/test/', 'user/')  // == '/test/user/'\n   * UrlParser.pathJoin('/test/', '/user/')  // == '/test/user/'\n   * UrlParser.pathJoin('/test')  // == '/test'\n   * UrlParser.pathJoin('http://example.com/test/', '/user/', 10) // == http://example.com/test/user/10\n   *\n   * @param firstPath The first path. Can be an URL.\n   * @param paths Paths to join with the first path.\n   * @returns {string} The resulting path/url after joining.\n   */\n  static pathJoin(firstPath, ...paths) {\n    let outputPath = firstPath;\n    for(let path of paths) {\n      path = `${path}`;\n      if(outputPath.endsWith('/')) {\n        outputPath = outputPath.substring(0, outputPath.length - 1);\n      }\n      if(path.startsWith('/')) {\n        path = path.substring(1);\n      }\n      outputPath = `${outputPath}/${path}`;\n    }\n    return outputPath;\n  }\n\n  constructor(url) {\n    if(typeof url !== 'string') {\n      throw new TypeError('url must be a string.');\n    }\n    const urlSplit = url.split('?');\n    this._baseUrl = urlSplit[0];\n    this._parsedBaseUrl = this._parseBaseUrl();\n\n    /**\n     * The query-string of the the URL.\n     * @type {QueryString}\n     */\n    this.queryString = null;\n\n    if(urlSplit.length > 1) {\n      this.setQueryString(new QueryString(urlSplit[1]));\n    } else {\n      this.setQueryString(new QueryString());\n    }\n  }\n\n  /**\n   * Create a deep copy of this UrlParser object.\n   *\n   * @return The copy.\n   */\n  deepCopy () {\n    let copy = Object.assign(Object.create(this), this)\n    if(this.queryString !== null) {\n      copy.queryString = this.queryString.deepCopy()\n    }\n    return copy\n  }\n\n  _splitDomainAndPath(domainAndPath) {\n    let split = domainAndPath.split('/');\n    let domain = split.shift();\n    let path = '';\n    if(split.length > 0) {\n      path = `/${split.join('/')}`;\n    }\n    return {\n      domain: domain,\n      path: path\n    }\n  }\n\n  _parseBaseUrl() {\n    let parsedBaseUrl = {\n      scheme: null,\n      path: '',\n      domain: null\n    };\n    if(this._baseUrl.match(/^[a-zA-Z0-9]+:\\/\\//)) {\n      // We have a full URL (<scheme>://<domain><path>)\n      let split = this._baseUrl.split('://');\n      parsedBaseUrl.scheme = split.shift();\n      let remaining = split.join('://');\n      let domainAndPath = this._splitDomainAndPath(remaining);\n      parsedBaseUrl.domain = domainAndPath.domain;\n      parsedBaseUrl.path = domainAndPath.path;\n    } else if(this._baseUrl.length > 0 && this._baseUrl.substring(0, 1) == '/') {\n      // We have path only\n      parsedBaseUrl.path = `${this._baseUrl}`;\n    } else {\n      // We have domain and path, but no scheme (<domain><path>)\n      let domainAndPath = this._splitDomainAndPath(this._baseUrl);\n      parsedBaseUrl.domain = domainAndPath.domain;\n      parsedBaseUrl.path = domainAndPath.path;\n    }\n    return parsedBaseUrl;\n  }\n\n  get scheme() {\n    return this._parsedBaseUrl.scheme;\n  }\n\n  get path() {\n    return this._parsedBaseUrl.path;\n  }\n\n  get domain() {\n    return this._parsedBaseUrl.domain;\n  }\n\n  /**\n   * Build the URL.\n   * @returns {String} The built URL.\n   */\n  buildUrl() {\n    let url = this._baseUrl;\n    if(!this.queryString.isEmpty()) {\n      url = `${url}?${this.queryString.urlencode()}`;\n    }\n    return url;\n  }\n\n  /**\n   * Set/replace the query-string.\n   *\n   * @param {QueryString} queryStringObject The QueryString object\n   *      to replace the current query-string with.\n   *\n   * @example\n   * const urlparser = UrlParser('http://example.com/api/people');\n   * const querystring = new QueryString();\n   * querystring.set('search', 'doe');\n   * urlparser.setQueryString(querystring);\n   * // urlparser.buildUrl() === 'http://example.com/api/people?search=doe'\n   */\n  setQueryString(queryStringObject) {\n    this.queryString = queryStringObject;\n  }\n}\n"
  },
  {
    "__docId__": 339,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "UrlParser",
    "memberof": "source/http/UrlParser.js",
    "longname": "source/http/UrlParser.js~UrlParser",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/http/UrlParser",
    "importStyle": "{UrlParser}",
    "description": "URL parser.",
    "examples": [
      "const urlparser = new UrlParser('http://example.com/api/people?name=Jane');\nurlparser.queryString.set('search', 'doe');\n// urlparser.buildUrl() === 'http://example.com/api/people?name=Jane&search=doe'"
    ],
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 340,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "pathJoin",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser.pathJoin",
    "access": null,
    "description": "Join URL paths.",
    "examples": [
      "UrlParser.pathJoin('/test', 'user/')  // == '/test/user/'\nUrlParser.pathJoin('/test/', 'user/')  // == '/test/user/'\nUrlParser.pathJoin('/test/', '/user/')  // == '/test/user/'\nUrlParser.pathJoin('/test')  // == '/test'\nUrlParser.pathJoin('http://example.com/test/', '/user/', 10) // == http://example.com/test/user/10"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The resulting path/url after joining."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "firstPath",
        "description": "The first path. Can be an URL."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "Paths to join with the first path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The resulting path/url after joining."
    },
    "generator": false
  },
  {
    "__docId__": 341,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#constructor",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 342,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_baseUrl",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#_baseUrl",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_parsedBaseUrl",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#_parsedBaseUrl",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "queryString",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#queryString",
    "access": null,
    "description": "The query-string of the the URL.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "QueryString"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deepCopy",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#deepCopy",
    "access": null,
    "description": "Create a deep copy of this UrlParser object.",
    "lineNumber": 69,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The copy."
    },
    "generator": false
  },
  {
    "__docId__": 346,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_splitDomainAndPath",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#_splitDomainAndPath",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "domainAndPath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 347,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parseBaseUrl",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#_parseBaseUrl",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 348,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "scheme",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#scheme",
    "access": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 349,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#path",
    "access": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 350,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "domain",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#domain",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 351,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "buildUrl",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#buildUrl",
    "access": null,
    "description": "Build the URL.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} The built URL."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The built URL."
    },
    "generator": false
  },
  {
    "__docId__": 352,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setQueryString",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#setQueryString",
    "access": null,
    "description": "Set/replace the query-string.",
    "examples": [
      "const urlparser = UrlParser('http://example.com/api/people');\nconst querystring = new QueryString();\nquerystring.set('search', 'doe');\nurlparser.setQueryString(querystring);\n// urlparser.buildUrl() === 'http://example.com/api/people?search=doe'"
    ],
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "QueryString"
        ],
        "spread": false,
        "optional": false,
        "name": "queryStringObject",
        "description": "The QueryString object\n     to replace the current query-string with."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 353,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "queryString",
    "memberof": "source/http/UrlParser.js~UrlParser",
    "longname": "source/http/UrlParser.js~UrlParser#queryString",
    "access": null,
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/log/AbstractLogger.js",
    "memberof": null,
    "longname": "source/log/AbstractLogger.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import LOGLEVEL from \"./loglevel\";\n\n\n/**\n */\nexport default class AbstractLogger {\n  getLogLevel() {\n    throw new Error('Must be overridden in subclasses.');\n  }\n\n  /**\n   * Returns ``true`` if loglevel is higher\n   * than or equal to {@link LogLevels#DEBUG}.\n   */\n  get isDebug() {\n    return this.getLogLevel() >= LOGLEVEL.DEBUG;\n  }\n\n  /**\n   * Returns ``true`` if loglevel is higher\n   * than or equal to {@link LogLevels#INFO}.\n   */\n  get isInfo() {\n    return this.getLogLevel() >= LOGLEVEL.INFO;\n  }\n\n  /**\n   * Returns ``true`` if loglevel is higher\n   * than or equal to {@link LogLevels#WARNING}.\n   */\n  get isWarning() {\n    return this.getLogLevel() >= LOGLEVEL.WARNING;\n  }\n\n  /**\n   * Returns ``true`` if loglevel is higher\n   * than or equal to {@link LogLevels#ERROR}.\n   */\n  get isError() {\n    return this.getLogLevel() >= LOGLEVEL.ERROR;\n  }\n\n  _noOutput() {\n\n  }\n\n  /**\n   * Exposes console.log. Will only print if current level is\n   * higher than or equal to {@link LogLevels#DEBUG}.\n   * @returns {Function} console.log\n   */\n  get debug() {\n    if (this.getLogLevel() >= LOGLEVEL.DEBUG) {\n      return console.log.bind(console);\n    }\n    return this._noOutput;\n  }\n\n  /**\n   * Exposes console.log. Will only print if current level is\n   * higher than or equal to {@link LogLevels#INFO}.\n   * @returns {Function} console.log\n   */\n  get info() {\n    if (this.getLogLevel() >= LOGLEVEL.INFO) {\n      return console.log.bind(console);\n    }\n    return this._noOutput;\n  }\n\n  /**\n   * Exposes console.warn. Will only print if current level is\n   * higher than or equal to {@link LogLevels#WARNING}.\n   * @returns {Function} console.warn\n   */\n  get warning() {\n    if(this.getLogLevel() >= LOGLEVEL.WARNING) {\n      return console.warn.bind(console);\n    }\n    return this._noOutput;\n  }\n\n  /**\n   * Exposes console.error. Will only print if current level is\n   * higher than or equal to {@link LogLevels#ERROR}.\n   * @returns {Function} console.error\n   */\n  get error() {\n    if (this.getLogLevel() >= LOGLEVEL.ERROR) {\n      return console.error.bind(console);\n    }\n    return this._noOutput;\n  }\n\n}\n"
  },
  {
    "__docId__": 355,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AbstractLogger",
    "memberof": "source/log/AbstractLogger.js",
    "longname": "source/log/AbstractLogger.js~AbstractLogger",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/log/AbstractLogger",
    "importStyle": "AbstractLogger",
    "description": "",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 356,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLogLevel",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#getLogLevel",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 357,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isDebug",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#isDebug",
    "access": null,
    "description": "Returns ``true`` if loglevel is higher\nthan or equal to {@link LogLevels#DEBUG}.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 358,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isInfo",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#isInfo",
    "access": null,
    "description": "Returns ``true`` if loglevel is higher\nthan or equal to {@link LogLevels#INFO}.",
    "lineNumber": 23,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 359,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isWarning",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#isWarning",
    "access": null,
    "description": "Returns ``true`` if loglevel is higher\nthan or equal to {@link LogLevels#WARNING}.",
    "lineNumber": 31,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 360,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isError",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#isError",
    "access": null,
    "description": "Returns ``true`` if loglevel is higher\nthan or equal to {@link LogLevels#ERROR}.",
    "lineNumber": 39,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 361,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_noOutput",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#_noOutput",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 362,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "debug",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#debug",
    "access": null,
    "description": "Exposes console.log. Will only print if current level is\nhigher than or equal to {@link LogLevels#DEBUG}.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} console.log"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "console.log"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 363,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "info",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#info",
    "access": null,
    "description": "Exposes console.log. Will only print if current level is\nhigher than or equal to {@link LogLevels#INFO}.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} console.log"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "console.log"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 364,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "warning",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#warning",
    "access": null,
    "description": "Exposes console.warn. Will only print if current level is\nhigher than or equal to {@link LogLevels#WARNING}.",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} console.warn"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "console.warn"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 365,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "error",
    "memberof": "source/log/AbstractLogger.js~AbstractLogger",
    "longname": "source/log/AbstractLogger.js~AbstractLogger#error",
    "access": null,
    "description": "Exposes console.error. Will only print if current level is\nhigher than or equal to {@link LogLevels#ERROR}.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} console.error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "console.error"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 366,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/log/Logger.js",
    "memberof": null,
    "longname": "source/log/Logger.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import AbstractLogger from \"./AbstractLogger\";\nimport LOGLEVEL from \"./loglevel\";\n\n\nexport default class Logger extends AbstractLogger {\n    /**\n     *\n     * @param {string} name The name of the logger.\n     * @param {LoggerSingleton} loggerSingleton The logger singleton\n     *      this logger belongs to.\n     */\n    constructor(name, loggerSingleton) {\n        super();\n        this._name = name;\n        this._logLevel = null;\n        this._loggerSingleton = loggerSingleton;\n    }\n\n    /**\n     * Get the name of this logger.\n     * @returns {string}\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Set the loglevel for this logger.\n     *\n     * @param {int} logLevel The log level. Must be one of the loglevels\n     *      defined in {@link LogLevels}.\n     * @throws {RangeError} if {@link LogLevels#validateLogLevel} fails.\n     */\n    setLogLevel(logLevel) {\n        LOGLEVEL.validateLogLevel(logLevel);\n        this._logLevel = logLevel;\n    }\n\n    /**\n     * Get the log level.\n     *\n     * If no log level has been set with {@link Logger#setLogLevel},\n     * this returns {@link LoggerSingleton#getDefaultLogLevel}.\n     *\n     * @returns {int}\n     */\n    getLogLevel() {\n        if(this._logLevel == null) {\n            return this._loggerSingleton.getDefaultLogLevel();\n        }\n        return this._logLevel;\n    }\n\n    /**\n     * Get textual name for the log level. If the logger\n     * does not have a logLevel (if it inherits it from the LoggerSingleton)\n     * a string with information about this and the default logLevel for the\n     * LoggerSingleton is returned.\n     *\n     * Intended for debugging. The format of the string may change.\n     *\n     * @returns {string}\n     */\n\n    getTextualNameForLogLevel() {\n        if(this._logLevel == null) {\n            return '[default for LoggerSingleton - ' +\n                `${this._loggerSingleton.getTextualNameForDefaultLogLevel()}]`;\n        }\n        return LOGLEVEL.getTextualNameForLogLevel(this.getLogLevel());\n    }\n\n    getDebugInfoString() {\n        return `${this.name}: ${this.getTextualNameForLogLevel()}`;\n    }\n}\n"
  },
  {
    "__docId__": 367,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Logger",
    "memberof": "source/log/Logger.js",
    "longname": "source/log/Logger.js~Logger",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/log/Logger",
    "importStyle": "Logger",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "source/log/AbstractLogger.js~AbstractLogger"
    ]
  },
  {
    "__docId__": 368,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the logger."
      },
      {
        "nullable": null,
        "types": [
          "LoggerSingleton"
        ],
        "spread": false,
        "optional": false,
        "name": "loggerSingleton",
        "description": "The logger singleton\n     this logger belongs to."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 369,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_name",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#_name",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logLevel",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#_logLevel",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_loggerSingleton",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#_loggerSingleton",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#name",
    "access": null,
    "description": "Get the name of this logger.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 373,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setLogLevel",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#setLogLevel",
    "access": null,
    "description": "Set the loglevel for this logger.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "logLevel",
        "description": "The log level. Must be one of the loglevels\n     defined in {@link LogLevels}."
      }
    ],
    "throws": [
      {
        "types": [
          "RangeError"
        ],
        "description": "if {@link LogLevels#validateLogLevel} fails."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 374,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logLevel",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#_logLevel",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLogLevel",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#getLogLevel",
    "access": null,
    "description": "Get the log level.\n\nIf no log level has been set with {@link Logger#setLogLevel},\nthis returns {@link LoggerSingleton#getDefaultLogLevel}.",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{int}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 376,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextualNameForLogLevel",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#getTextualNameForLogLevel",
    "access": null,
    "description": "Get textual name for the log level. If the logger\ndoes not have a logLevel (if it inherits it from the LoggerSingleton)\na string with information about this and the default logLevel for the\nLoggerSingleton is returned.\n\nIntended for debugging. The format of the string may change.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 377,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDebugInfoString",
    "memberof": "source/log/Logger.js~Logger",
    "longname": "source/log/Logger.js~Logger#getDebugInfoString",
    "access": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 378,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/log/LoggerSingleton.js",
    "memberof": null,
    "longname": "source/log/LoggerSingleton.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Logger from \"./Logger\";\nimport LOGLEVEL from \"./loglevel\";\n\nlet _instance = null;\n\n\n/**\n * A logging system.\n *\n * @example <caption>Create and use a logger</caption>\n * import LoggerSingleton from 'ievv_jsbase/lib/log/LoggerSingleton';\n * let mylogger = new LoggerSingleton().loggerSingleton.getLogger('myproject.MyClass');\n * mylogger.debug('Hello debug world');\n * mylogger.info('Hello info world');\n * mylogger.warning('Hello warning world');\n * mylogger.error('Hello error world');\n *\n * @example <caption>Set a default loglevel for all loggers</caption>\n * import LOGLEVEL from 'ievv_jsbase/lib/log/loglevel';\n * new LoggerSingleton().setDefaultLogLevel(LOGLEVEL.DEBUG);\n *\n * @example <caption>Set a custom loglevel for a single logger</caption>\n * import LOGLEVEL from 'ievv_jsbase/lib/log/loglevel';\n * new LoggerSingleton().getLogger('mylogger').setLogLevel(LOGLEVEL.DEBUG);\n */\nexport default class LoggerSingleton {\n    /**\n     * Get an instance of the singleton.\n     *\n     * The first time this is called, we create a new instance.\n     * For all subsequent calls, we return the instance that was\n     * created on the first call.\n     */\n    constructor() {\n        if(!_instance) {\n            _instance = this;\n        }\n        this._loggerMap = new Map();\n        this.reset();\n        return _instance;\n    }\n\n    /**\n     * Get the number of loggers registered using\n     * {@link getLogger}.\n     *\n     * @returns {number} The number of loggers.\n     */\n    getLoggerCount() {\n        return this._loggerMap.size;\n    }\n\n    /**\n     * Reset to default log level, and clear all\n     * custom loggers.\n     */\n    reset() {\n        this._logLevel = LOGLEVEL.WARNING;\n        this._loggerMap.clear();\n    }\n\n    /**\n     * Get the default log level.\n     *\n     * Defaults to {@link LogLevels#WARNING} if not overridden\n     * with {@LoggerSingleton#setDefaultLogLevel}.\n     *\n     * @returns {int} One of the loglevels defined in {@link LogLevels}\n     */\n    getDefaultLogLevel() {\n        return this._logLevel;\n    }\n\n    /**\n     * Set the default loglevel.\n     *\n     * All loggers use this by default unless\n     * you override their loglevel.\n     *\n     * @example <caption>Override loglevel of a specific logger</caption>\n     * import LoggerSingleton from 'ievv_jsbase/log/LoggerSingleton';\n     * import LOGLEVEL from 'ievv_jsbase/log/loglevel';\n     * let loggerSingleton = new LoggerSingleton();\n     * loggerSingleton.getLogger('mylogger').setLogLevel(LOGLEVEL.DEBUG);\n     *\n     * @param logLevel The log level. Must be one of the loglevels\n     *      defined in {@link LogLevels}.\n     * @throws {RangeError} if {@link LogLevels#validateLogLevel} fails.\n     */\n    setDefaultLogLevel(logLevel) {\n        LOGLEVEL.validateLogLevel(logLevel);\n        this._logLevel = logLevel;\n    }\n\n    /**\n     * Get a logger.\n     *\n     * @param {string} name A name for the logger. Should be a unique name,\n     *      so typically the full import path of the class/function using\n     *      the logger.\n     * @returns {Logger}\n     */\n    getLogger(name) {\n        if(!this._loggerMap.has(name)) {\n            this._loggerMap.set(name, new Logger(name, this));\n        }\n        return this._loggerMap.get(name);\n    }\n\n    /**\n     * Get the names of all the registered loggers.\n     *\n     * @returns {Array} Sorted array with the same of the loggers.\n     */\n    getLoggerNameArray() {\n        let loggerNames = Array.from(this._loggerMap.keys());\n        loggerNames.sort();\n        return loggerNames;\n    }\n\n    /**\n     * Get textual name for the default log level.\n     *\n     * Intended for debugging. The format of the string may change.\n     *\n     * @returns {string}\n     */\n    getTextualNameForDefaultLogLevel() {\n        return LOGLEVEL.getTextualNameForLogLevel(this.getDefaultLogLevel());\n    }\n\n    /**\n     * Get a string that summarize information about all the\n     * loggers. The string has a list of loglevels with\n     * their loglevel. Perfect for debugging.\n     *\n     * Intended for debugging. The format of the string may change.\n     *\n     * @returns {string}\n     */\n    getDebugInfoString() {\n        let loggerInfoString = `Default logLevel: ` +\n            `${this.getTextualNameForDefaultLogLevel()}\\n` +\n            `Loggers:\\n`;\n        if(this.getLoggerCount() === 0) {\n            loggerInfoString += '(no loggers)\\n';\n        } else {\n            for (let loggerName of this.getLoggerNameArray()) {\n                let logger = this.getLogger(loggerName);\n                loggerInfoString +=\n                    ` - ${logger.getDebugInfoString()}\\n`;\n            }\n        }\n        return loggerInfoString;\n    }\n}\n"
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_instance",
    "memberof": "source/log/LoggerSingleton.js",
    "longname": "source/log/LoggerSingleton.js~_instance",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/log/LoggerSingleton",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoggerSingleton",
    "memberof": "source/log/LoggerSingleton.js",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/log/LoggerSingleton",
    "importStyle": "LoggerSingleton",
    "description": "A logging system.",
    "examples": [
      "<caption>Create and use a logger</caption>\nimport LoggerSingleton from 'ievv_jsbase/lib/log/LoggerSingleton';\nlet mylogger = new LoggerSingleton().loggerSingleton.getLogger('myproject.MyClass');\nmylogger.debug('Hello debug world');\nmylogger.info('Hello info world');\nmylogger.warning('Hello warning world');\nmylogger.error('Hello error world');",
      "<caption>Set a default loglevel for all loggers</caption>\nimport LOGLEVEL from 'ievv_jsbase/lib/log/loglevel';\nnew LoggerSingleton().setDefaultLogLevel(LOGLEVEL.DEBUG);",
      "<caption>Set a custom loglevel for a single logger</caption>\nimport LOGLEVEL from 'ievv_jsbase/lib/log/loglevel';\nnew LoggerSingleton().getLogger('mylogger').setLogLevel(LOGLEVEL.DEBUG);"
    ],
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 381,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#constructor",
    "access": null,
    "description": "Get an instance of the singleton.\n\nThe first time this is called, we create a new instance.\nFor all subsequent calls, we return the instance that was\ncreated on the first call.",
    "lineNumber": 34,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 382,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_loggerMap",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#_loggerMap",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLoggerCount",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#getLoggerCount",
    "access": null,
    "description": "Get the number of loggers registered using\n{@link getLogger}.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The number of loggers."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The number of loggers."
    },
    "generator": false
  },
  {
    "__docId__": 384,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "reset",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#reset",
    "access": null,
    "description": "Reset to default log level, and clear all\ncustom loggers.",
    "lineNumber": 57,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 385,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logLevel",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#_logLevel",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDefaultLogLevel",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#getDefaultLogLevel",
    "access": null,
    "description": "Get the default log level.\n\nDefaults to {@link LogLevels#WARNING} if not overridden\nwith {@LoggerSingleton#setDefaultLogLevel}.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{int} One of the loglevels defined in {@link LogLevels}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": "One of the loglevels defined in {@link LogLevels}"
    },
    "generator": false
  },
  {
    "__docId__": 387,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultLogLevel",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#setDefaultLogLevel",
    "access": null,
    "description": "Set the default loglevel.\n\nAll loggers use this by default unless\nyou override their loglevel.",
    "examples": [
      "<caption>Override loglevel of a specific logger</caption>\nimport LoggerSingleton from 'ievv_jsbase/log/LoggerSingleton';\nimport LOGLEVEL from 'ievv_jsbase/log/loglevel';\nlet loggerSingleton = new LoggerSingleton();\nloggerSingleton.getLogger('mylogger').setLogLevel(LOGLEVEL.DEBUG);"
    ],
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "logLevel",
        "description": "The log level. Must be one of the loglevels\n     defined in {@link LogLevels}."
      }
    ],
    "throws": [
      {
        "types": [
          "RangeError"
        ],
        "description": "if {@link LogLevels#validateLogLevel} fails."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 388,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logLevel",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#_logLevel",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLogger",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#getLogger",
    "access": null,
    "description": "Get a logger.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Logger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A name for the logger. Should be a unique name,\n     so typically the full import path of the class/function using\n     the logger."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 390,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLoggerNameArray",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#getLoggerNameArray",
    "access": null,
    "description": "Get the names of all the registered loggers.",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Sorted array with the same of the loggers."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Sorted array with the same of the loggers."
    },
    "generator": false
  },
  {
    "__docId__": 391,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextualNameForDefaultLogLevel",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#getTextualNameForDefaultLogLevel",
    "access": null,
    "description": "Get textual name for the default log level.\n\nIntended for debugging. The format of the string may change.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 392,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDebugInfoString",
    "memberof": "source/log/LoggerSingleton.js~LoggerSingleton",
    "longname": "source/log/LoggerSingleton.js~LoggerSingleton#getDebugInfoString",
    "access": null,
    "description": "Get a string that summarize information about all the\nloggers. The string has a list of loglevels with\ntheir loglevel. Perfect for debugging.\n\nIntended for debugging. The format of the string may change.",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 393,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/log/loglevel.js",
    "memberof": null,
    "longname": "source/log/loglevel.js",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "content": "/**\n * Defines valid log levels.\n *\n * Not used directly, but instead via the LOGLEVEL\n * constant exported as default by this module.\n *\n * @example\n * import LOGLEVEL from 'ievv_jsbase/log/loglevel';\n * console.log('The debug loglevel is:', LOGLEVEL.DEBUG);\n * LOGLEVEL.validateLogLevel(10);\n */\nexport class LogLevels {\n    constructor() {\n        this._prettyLogLevelNames = {};\n        this._prettyLogLevelNames[this.DEBUG] = 'DEBUG';\n        this._prettyLogLevelNames[this.INFO] = 'INFO';\n        this._prettyLogLevelNames[this.WARNING] = 'WARNING';\n        this._prettyLogLevelNames[this.ERROR] = 'ERROR';\n        this._prettyLogLevelNames[this.SILENT] = 'SILENT';\n    }\n\n    /**\n     * Get the number for log level DEBUG.\n     * @returns {number}\n     */\n    get DEBUG() {\n        return 4;\n    }\n\n    /**\n     * Get the number for log level INFO.\n     * @returns {number}\n     */\n    get INFO() {\n        return 3;\n    }\n\n    /**\n     * Get the number for log level WARNING.\n     * @returns {number}\n     */\n    get WARNING() {\n        return 2;\n    }\n\n    /**\n     * Get the number for log level ERROR.\n     * @returns {number}\n     */\n    get ERROR() {\n        return 1;\n    }\n\n    /**\n     * Get the number for log level SILENT.\n     * @returns {number}\n     */\n    get SILENT() {\n        return 0;\n    }\n\n    /**\n     * Validate a log level.\n     *\n     * Should be used by all functions/methods that set a log level.\n     *\n     * @param logLevel The loglevel.\n     * @throws {RangeError} If ``logLevel`` is not one\n     *   of:\n     *\n     *   - {@link LogLevels#DEBUG}\n     *   - {@link LogLevels#INFO}\n     *   - {@link LogLevels#WARNING}\n     *   - {@link LogLevels#ERROR}\n     *   - {@link LogLevels#SILENT}\n     */\n    validateLogLevel(logLevel) {\n        if (logLevel > this.DEBUG || logLevel < this.SILENT) {\n            throw new RangeError(\n                `Invalid log level: ${logLevel}, must be between ` +\n                `${this.SILENT} (SILENT) and ${this.DEBUG} (DEBUG)`);\n        }\n    }\n\n    /**\n     * Get the textual name for a log level.\n     *\n     * @param {number} logLevel The log level to get a textual name for.\n     * @returns {string}\n     *\n     * @example\n     * const infoText = LOGLEVEL.getTextualNameForLogLevel(LOGLEVEL.INFO);\n     * // infoText === 'INFO'\n     */\n    getTextualNameForLogLevel(logLevel) {\n        return this._prettyLogLevelNames[logLevel];\n    }\n}\n\nconst LOGLEVEL = new LogLevels();\nexport default LOGLEVEL;\n"
  },
  {
    "__docId__": 394,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LogLevels",
    "memberof": "source/log/loglevel.js",
    "longname": "source/log/loglevel.js~LogLevels",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/log/loglevel",
    "importStyle": "{LogLevels}",
    "description": "Defines valid log levels.\n\nNot used directly, but instead via the LOGLEVEL\nconstant exported as default by this module.",
    "examples": [
      "import LOGLEVEL from 'ievv_jsbase/log/loglevel';\nconsole.log('The debug loglevel is:', LOGLEVEL.DEBUG);\nLOGLEVEL.validateLogLevel(10);"
    ],
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 395,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 396,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_prettyLogLevelNames",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#_prettyLogLevelNames",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "DEBUG",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#DEBUG",
    "access": null,
    "description": "Get the number for log level DEBUG.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 398,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "INFO",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#INFO",
    "access": null,
    "description": "Get the number for log level INFO.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 399,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "WARNING",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#WARNING",
    "access": null,
    "description": "Get the number for log level WARNING.",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 400,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "ERROR",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#ERROR",
    "access": null,
    "description": "Get the number for log level ERROR.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 401,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "SILENT",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#SILENT",
    "access": null,
    "description": "Get the number for log level SILENT.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 402,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validateLogLevel",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#validateLogLevel",
    "access": null,
    "description": "Validate a log level.\n\nShould be used by all functions/methods that set a log level.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "logLevel",
        "description": "The loglevel."
      }
    ],
    "throws": [
      {
        "types": [
          "RangeError"
        ],
        "description": "If ``logLevel`` is not one\n  of:\n\n  - {@link LogLevels#DEBUG}\n  - {@link LogLevels#INFO}\n  - {@link LogLevels#WARNING}\n  - {@link LogLevels#ERROR}\n  - {@link LogLevels#SILENT}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 403,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextualNameForLogLevel",
    "memberof": "source/log/loglevel.js~LogLevels",
    "longname": "source/log/loglevel.js~LogLevels#getTextualNameForLogLevel",
    "access": null,
    "description": "Get the textual name for a log level.",
    "examples": [
      "const infoText = LOGLEVEL.getTextualNameForLogLevel(LOGLEVEL.INFO);\n// infoText === 'INFO'"
    ],
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "logLevel",
        "description": "The log level to get a textual name for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 404,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/makeCustomError.js",
    "memberof": null,
    "longname": "source/makeCustomError.js",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "content": "/**\n * Make a custom error \"class\".\n *\n * Makes an old style prototype based error class.\n *\n * @example <caption>Typical usage</caption>\n * // In myerrors.js\n * export let MyCustomError = makeCustomError('MyCustomError');\n *\n * // Using the error\n * import {MyCustomError} from './myerrors';\n * throw new MyCustomError('The message');\n *\n * @example <caption>Throwing the error - complete example</caption>\n * try {\n *     throw new MyCustomError('The message', {\n *          code: 'stuff_happened',\n *          details: {\n *              size: 10\n *          }\n *     });\n * } catch(e) {\n *     if(e instanceof MyCustomError) {\n *         console.error(`${e.toString()} -- Code: ${e.code}. Size: ${e.details.size}`);\n *     }\n * }\n *\n * @example <caption>Define an error that extends Error</caption>\n * let NotFoundError = makeCustomError('NotFoundError');\n * // error instanceof NotFoundError === true\n * // error instanceof Error === true\n *\n * @example <caption>Define an error that extends a built in error</caption>\n * let MyValueError = makeCustomError('MyValueError', TypeError);\n * let error = new MyValueError();\n * // error instanceof MyValueError === true\n * // error instanceof TypeError === true\n * // error instanceof Error === true\n *\n * @example <caption>Define an error that extends another custom error</caption>\n * let MySuperError = makeCustomError('MySuperError', TypeError);\n * let MySubError = makeCustomError('MySubError', MySuperError);\n * let error = new MySubError();\n * // error instanceof MySubError === true\n * // error instanceof MySuperError === true\n * // error instanceof TypeError === true\n * // error instanceof Error === true\n *\n * @param {string} name The name of the error class.\n * @param {Error} extendsError An optional Error to extend.\n *      Defaults to {@link Error}. Can be a built in error\n *      or a custom error created by this function.\n * @returns {Error} The created error class.\n */\nexport default function makeCustomError(name, extendsError) {\n    extendsError = extendsError || Error;\n    let CustomError = function(message, properties) {\n        this.message = message;\n        var last_part = new extendsError().stack.match(/[^\\s]+$/);\n        this.stack = `${this.name} at ${last_part}`;\n        if(typeof properties !== 'undefined') {\n            Object.assign(this, properties);\n        }\n    };\n    Object.setPrototypeOf(CustomError, extendsError);\n    CustomError.prototype = Object.create(extendsError.prototype);\n    CustomError.prototype.constructor = CustomError;\n    CustomError.prototype.message = \"\";\n    CustomError.prototype.name = name;\n    return CustomError;\n}\n"
  },
  {
    "__docId__": 405,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeCustomError",
    "memberof": "source/makeCustomError.js",
    "longname": "source/makeCustomError.js~makeCustomError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/makeCustomError",
    "importStyle": "makeCustomError",
    "description": "Make a custom error \"class\".\n\nMakes an old style prototype based error class.",
    "examples": [
      "<caption>Typical usage</caption>\n// In myerrors.js\nexport let MyCustomError = makeCustomError('MyCustomError');\n\n// Using the error\nimport {MyCustomError} from './myerrors';\nthrow new MyCustomError('The message');",
      "<caption>Throwing the error - complete example</caption>\ntry {\n    throw new MyCustomError('The message', {\n         code: 'stuff_happened',\n         details: {\n             size: 10\n         }\n    });\n} catch(e) {\n    if(e instanceof MyCustomError) {\n        console.error(`${e.toString()} -- Code: ${e.code}. Size: ${e.details.size}`);\n    }\n}",
      "<caption>Define an error that extends Error</caption>\nlet NotFoundError = makeCustomError('NotFoundError');\n// error instanceof NotFoundError === true\n// error instanceof Error === true",
      "<caption>Define an error that extends a built in error</caption>\nlet MyValueError = makeCustomError('MyValueError', TypeError);\nlet error = new MyValueError();\n// error instanceof MyValueError === true\n// error instanceof TypeError === true\n// error instanceof Error === true",
      "<caption>Define an error that extends another custom error</caption>\nlet MySuperError = makeCustomError('MySuperError', TypeError);\nlet MySubError = makeCustomError('MySubError', MySuperError);\nlet error = new MySubError();\n// error instanceof MySubError === true\n// error instanceof MySuperError === true\n// error instanceof TypeError === true\n// error instanceof Error === true"
    ],
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Error} The created error class."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the error class."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "extendsError",
        "description": "An optional Error to extend.\n     Defaults to {@link Error}. Can be a built in error\n     or a custom error created by this function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "The created error class."
    },
    "generator": false
  },
  {
    "__docId__": 406,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/polyfill/all.js",
    "memberof": null,
    "longname": "source/polyfill/all.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import elementRemovePolyfill from './elementRemovePolyfill';\n\nelementRemovePolyfill();\n"
  },
  {
    "__docId__": 407,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/polyfill/elementRemovePolyfill.js",
    "memberof": null,
    "longname": "source/polyfill/elementRemovePolyfill.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\n * Element.remove() polyfill for IE11 compatibility\n */\nexport default function elementRemovePolyfill() {\n    if (!('remove' in Element.prototype)) {\n        Element.prototype.remove = function() {\n            if (this.parentNode) {\n                this.parentNode.removeChild(this);\n            }\n        };\n    }\n}\n"
  },
  {
    "__docId__": 408,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "elementRemovePolyfill",
    "memberof": "source/polyfill/elementRemovePolyfill.js",
    "longname": "source/polyfill/elementRemovePolyfill.js~elementRemovePolyfill",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/polyfill/elementRemovePolyfill",
    "importStyle": "elementRemovePolyfill",
    "description": "Element.remove() polyfill for IE11 compatibility",
    "lineNumber": 4,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 409,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/ObjectManager.js",
    "memberof": null,
    "longname": "source/utils/ObjectManager.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import typeDetect from \"./typeDetect\";\n/**\n * Utility-class with several static functions to simplify validation, merging and other standard operations on\n * javascript-Objects.\n */\nexport default class ObjectManager {\n    /**\n     * Checks that given object is not null and not undefined. Also checks the same inwards in provided nested keys\n     *\n     * @example\n     *  let check = this._hasOwnValue({\"foo\": {\"bar\": \"\"}}, false, true, \"foo\", \"bar\");\n     *  // check is now false. key \"foo\" is found, key \"bar\" is found, but \"bar\" is emptyString, and params specify to check for them\n     *\n     * @example\n     *  let check = this._hasOwnValue({\"foo\": {\"bar\": {}}}, true, false, \"foo\", \"bar\");\n     *  // check is now false. key \"foo\" is found, key \"bar\" is found, but \"bar\" is {}, and params specify to check for emptyObject.\n     *\n     * @example\n     *  let check = this._hasOwnValue({\"foo\": {\"bar\": {}}}, false, false, \"foo\", \"bar\");\n     *  // check is now true. key \"foo\" is found, key \"bar\" is found, so no requested values are null or undefined.\n     *\n     *  NOTE: Other functions in this file lets you ignore the boolean params - so just use them :)\n     *\n     * @param givenObject   The object to validate\n     * @param emptyObject   if true - keys mapped to empty object {} will also give false\n     * @param emptyString   if true - keys mapped to empty string \"\" will also give false\n     * @param args          nested keys to look for, so to validate myObject.foo.bar call this._hasOwnValue(myObject, false, false, \"foo\". \"bar\")\n     * @returns {boolean}   true if validation passes, false if not.\n     */\n    static _hasOwnValue(givenObject, emptyObject, emptyString, ...args) {\n        function checkValue(value) {\n            return (value != undefined && value != null && (!emptyObject || value != {}) && (!emptyString || value != \"\"));\n        }\n\n        if (!checkValue(givenObject)) {\n            return false;\n        }\n\n        for (let key of args) {\n            if (!(key in givenObject) || !checkValue(givenObject[key])) {\n                return false;\n            }\n            givenObject = givenObject[key];\n        }\n\n        return true;\n    }\n\n    /**\n     * Validate that an object and nested keys are not null, undefined or empty string \"\".\n     *\n     * @example\n     * // check that myObject.foo.bar exists:\n     * validateAllowEmptyObject(myObject, \"foo\", \"bar\")\n     *\n     * @param givenObject   the object to validate\n     * @param args          nested keys to check\n     * @returns {boolean}   true if neither the object or any provided nested key is null, undefined or \"\"\n     */\n    static validateAllowEmptyObject(givenObject, ...args) {\n        return this._hasOwnValue(givenObject, false, true, ...args);\n    }\n\n    /**\n     * Validate that an object and nested keys are not null, undefined or empty object {}.\n     *\n     * @example\n     * // check that myObject.foo.bar exists:\n     * validateAllowEmptyObject(myObject, \"foo\", \"bar\")\n     *\n     * @param givenObject   the object to validate\n     * @param args          nested keys to check\n     * @returns {boolean}   true if neither the object or any provided nested key is null, undefined or {}\n     */\n    static validateAllowEmptyString(givenObject, ...args) {\n        return this._hasOwnValue(givenObject, true, false, ...args);\n    }\n\n    /**\n     * Validate that an object and nested keys are not null, undefined or empty string \"\" or empty object {}.\n     *\n     * @example\n     * // check that myObject.foo.bar exists:\n     * validateAllowEmptyObject(myObject, \"foo\", \"bar\")\n     *\n     * @param givenObject   the object to validate\n     * @param args          nested keys to check\n     * @returns {boolean}   true if neither the object or any provided nested key is null, undefined, {} or \"\"\n     */\n    static validate(givenObject, ...args) {\n        return this._hasOwnValue(givenObject, true, true, ...args);\n    }\n\n    /**\n     * Validate that an object and nested keys are not null or undefined.\n     *\n     * @example\n     * // check that myObject.foo.bar exists:\n     * validateAllowEmptyObject(myObject, \"foo\", \"bar\")\n     *\n     * @param givenObject   the object to validate\n     * @param args          nested keys to check\n     * @returns {boolean}   true if neither the object or any provided nested key is null or undefined.\n     */\n    static validateAllowEmptyStringAndEmptyObject(givenObject, ...args) {\n        return this._hasOwnValue(givenObject, false, false, ...args);\n    }\n\n    /**\n     * uses {@link validate} to lookup given args in given objectToBeValidated.\n     * This ensures the lookup is not null, undefined, empty object, or empty string.\n     * If this test fails, given fallbackValue is returned.\n     *\n     * @example\n     *  // to validate myObject.foo.bar, and get \"helloworld\" back as default if it is empty:\n     *  validateOrFallback(\"helloworld\", myObject, \"foo\", \"bar\")\n     *\n     * @param fallbackValue         what to return if empty\n     * @param objectToBeValidated   object to do lookup in\n     * @param args                  indices used for lookup in object\n     * @returns {*}                 lookup in objectToBeValidated if validation succeeded, fallbackValue if not.\n     */\n    static validateOrFallback(fallbackValue, objectToBeValidated, ...args) {\n        if (!this.validate(objectToBeValidated, ...args)) {\n            return fallbackValue;\n        }\n        for (let arg of args) {\n            objectToBeValidated = objectToBeValidated[arg];\n        }\n        return objectToBeValidated;\n    }\n\n    /**\n     * Utilityfunction to simplify validation! uses {@link validateOrFallback} for validation, and executes\n     * given callback (and returns returnvalue from it) if validation fails.\n     *\n     * @param callback              Function to be executed if validation fails\n     * @param objectToBeValidated   The object to do validation-lookup in\n     * @param args                  indices used for lookup in objectToBeValidated\n     * @returns {*}                 lookup in objectToBeValidated if validation succeeded, returnvalue from callback if not.\n     */\n    static validateOrCallback(callback, objectToBeValidated, ...args) {\n        const validatedValue = this.validateOrFallback(null, objectToBeValidated, ...args);\n        if (validatedValue == null) {\n            return callback();\n        }\n        return validatedValue;\n    }\n\n    /**\n     * Utilityfunction to simplify validation! uses {@link validateOrCallback} for validation, and passes\n     * a callback that simply thrown an Error if validation fails.\n     *\n     * @param errorMessage          the message to use in new Error(errorMessage)\n     * @param objectToBeValidated   the object to validate args in\n     * @param args                  args for lookup. see {@link validateOrFallback}\n     * @returns {*}                 the looked-up value from objectToBeValidated if it exists\n     */\n    static validateOrError(errorMessage, objectToBeValidated, ...args) {\n        return this.validateOrCallback(()=>{throw new Error(errorMessage);}, objectToBeValidated, ...args);\n    }\n\n\n    static _recursiveMerge(mergedValues, overrides) {\n        for (let key in overrides) {\n            let detectedType = typeDetect(overrides[key]);\n            if (detectedType == 'object') {\n                if(mergedValues[key] == undefined) {\n                    mergedValues[key] = {};\n                }\n                mergedValues[key] = this._recursiveMerge(mergedValues[key], overrides[key]);\n            } else if(detectedType == 'array') {\n                mergedValues[key] = Array.from(overrides[key]);\n            } else if(detectedType == 'null' || detectedType == 'number'\n                || detectedType == 'boolean' || detectedType == 'string') {\n                mergedValues[key] = overrides[key];\n            } else {\n                throw new Error(`Unsupported type: ${detectedType}.`);\n            }\n        }\n        return mergedValues;\n    }\n\n    /**\n     * Deep copy all values from overrides to givenObject.\n     *\n     * All keys in passed overrides-object will be cloned to passed givenObject. This happens deeply, so all\n     * nested objects will also be iterated (NOTE: lists are not iterated, only objects).\n     *\n     * Note that objects are passed by-reference, so if you do not want givenObject to be modified directly make sure\n     * you pass false as third param\n     *\n     * @param givenObject             The object to override values in\n     * @param overrides               The object to copy all values from\n     * @param overrideValuesInGiven   if true givenObjects will be overwritten directly, if false a new object\n     *                                will be created to merge both given objects into.\n     * @returns {*}                   The result from deep-merging\n     */\n    static _merge(givenObject, overrides, overrideValuesInGiven) {\n        if (overrideValuesInGiven) {\n            return this._recursiveMerge(givenObject, overrides);\n        }\n\n        let mergedValues = {};\n        mergedValues = this._recursiveMerge(mergedValues, givenObject);\n        return this._recursiveMerge(mergedValues, overrides);\n    }\n\n    /**\n     * Merges all values from overrideObject into originalObject.\n     * This happens in place (as objects are passed-by-reference), so originalObject is modified.\n     *\n     * This is a deep-merge (unlike Object.assign).\n     *\n     * @example <caption>Simple example</caption>\n     * let originalObject = {\n     *      foo: \"bar\",\n     *      person: {\n     *          name: \"Sandy claws\",\n     *          age: 42\n     *      }\n     * }\n     *\n     * let overrideObject = {\n     *      foo: \"baz\",\n     *      person: {\n     *          age: 23,\n     *          phone: 12345678\n     *      }\n     *  }\n     *\n     *  ObjectManager.mergeInPlace(originalObject, overrideObject);\n     *\n     *  // originalObject will now be:\n     *  originalObject == {\n     *      foo: \"baz\",\n     *      person: {\n     *          age: 23,\n     *          phone: 12345678,\n     *          name: \"Sandy claws\"\n     *      }\n     *  }\n     *\n     * @param originalObject    the object to modify\n     * @param overrideObject    the object to copy values from\n     */\n    static mergeInPlace(originalObject, overrideObject) {\n        this._merge(originalObject, overrideObject, true);\n    }\n\n    /**\n     * Merges all values from originalObject and overrideObject into a new object that is returned.\n     *\n     * This is a deep-merge (unlike Object.assign).\n     *\n     * First, all values from originalObject are merged into a new object.\n     * Then all values from overrideObject are merged into the same object, overriding any corresponding keys from\n     * originalObject.\n     *\n     * @example <caption>Simple example</caption>\n     * let originalObject = {\n     *      foo: \"bar\",\n     *      person: {\n     *          name: \"Sandy claws\",\n     *          age: 42\n     *      }\n     * }\n     *\n     * let overrideObject = {\n     *      foo: \"baz\",\n     *      person: {\n     *          age: 23,\n     *          phone: 12345678\n     *      }\n     *  }\n     *\n     *  let mergedObject = ObjectManager.mergeAndCopy(originalObject, overrideObject);\n     *\n     *  // mergedObject will now be:\n     *  mergedObject == {\n     *      foo: \"baz\",\n     *      person: {\n     *          age: 23,\n     *          phone: 12345678,\n     *          name: \"Sandy claws\"\n     *      }\n     *  }\n     *\n     * @param originalObject    initial values for new object\n     * @param overrideObject    object to override values from original object with\n     * @returns {{}}            new object containing values from originalObject overridden by overrideObject (see example)\n     */\n    static mergeAndClone(originalObject, overrideObject) {\n        return this._merge(originalObject, overrideObject, false);\n    }\n\n    /**\n     * Copies all values from given originalObject into a new object, which is returned to caller.\n     *\n     * uses {@link ObjectManager#mergeAndClone}, but passes an empty object as one of the two it desires for merging..\n     *\n     * @param originalObject\n     * @returns {{}}\n     */\n    static clone(originalObject) {\n        return this.mergeAndClone({}, originalObject);\n    }\n}\n"
  },
  {
    "__docId__": 410,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ObjectManager",
    "memberof": "source/utils/ObjectManager.js",
    "longname": "source/utils/ObjectManager.js~ObjectManager",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/ObjectManager",
    "importStyle": "ObjectManager",
    "description": "Utility-class with several static functions to simplify validation, merging and other standard operations on\njavascript-Objects.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 411,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_hasOwnValue",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager._hasOwnValue",
    "access": null,
    "description": "Checks that given object is not null and not undefined. Also checks the same inwards in provided nested keys",
    "examples": [
      " let check = this._hasOwnValue({\"foo\": {\"bar\": \"\"}}, false, true, \"foo\", \"bar\");\n // check is now false. key \"foo\" is found, key \"bar\" is found, but \"bar\" is emptyString, and params specify to check for them",
      " let check = this._hasOwnValue({\"foo\": {\"bar\": {}}}, true, false, \"foo\", \"bar\");\n // check is now false. key \"foo\" is found, key \"bar\" is found, but \"bar\" is {}, and params specify to check for emptyObject.",
      " let check = this._hasOwnValue({\"foo\": {\"bar\": {}}}, false, false, \"foo\", \"bar\");\n // check is now true. key \"foo\" is found, key \"bar\" is found, so no requested values are null or undefined.\n\n NOTE: Other functions in this file lets you ignore the boolean params - so just use them :)"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   true if validation passes, false if not."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "The object to validate"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emptyObject",
        "description": "if true - keys mapped to empty object {} will also give false"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emptyString",
        "description": "if true - keys mapped to empty string \"\" will also give false"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "nested keys to look for, so to validate myObject.foo.bar call this._hasOwnValue(myObject, false, false, \"foo\". \"bar\")"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if validation passes, false if not."
    },
    "generator": false
  },
  {
    "__docId__": 412,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validateAllowEmptyObject",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.validateAllowEmptyObject",
    "access": null,
    "description": "Validate that an object and nested keys are not null, undefined or empty string \"\".",
    "examples": [
      "// check that myObject.foo.bar exists:\nvalidateAllowEmptyObject(myObject, \"foo\", \"bar\")"
    ],
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   true if neither the object or any provided nested key is null, undefined or \"\""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "the object to validate"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "nested keys to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if neither the object or any provided nested key is null, undefined or \"\""
    },
    "generator": false
  },
  {
    "__docId__": 413,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validateAllowEmptyString",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.validateAllowEmptyString",
    "access": null,
    "description": "Validate that an object and nested keys are not null, undefined or empty object {}.",
    "examples": [
      "// check that myObject.foo.bar exists:\nvalidateAllowEmptyObject(myObject, \"foo\", \"bar\")"
    ],
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   true if neither the object or any provided nested key is null, undefined or {}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "the object to validate"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "nested keys to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if neither the object or any provided nested key is null, undefined or {}"
    },
    "generator": false
  },
  {
    "__docId__": 414,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validate",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.validate",
    "access": null,
    "description": "Validate that an object and nested keys are not null, undefined or empty string \"\" or empty object {}.",
    "examples": [
      "// check that myObject.foo.bar exists:\nvalidateAllowEmptyObject(myObject, \"foo\", \"bar\")"
    ],
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   true if neither the object or any provided nested key is null, undefined, {} or \"\""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "the object to validate"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "nested keys to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if neither the object or any provided nested key is null, undefined, {} or \"\""
    },
    "generator": false
  },
  {
    "__docId__": 415,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validateAllowEmptyStringAndEmptyObject",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.validateAllowEmptyStringAndEmptyObject",
    "access": null,
    "description": "Validate that an object and nested keys are not null or undefined.",
    "examples": [
      "// check that myObject.foo.bar exists:\nvalidateAllowEmptyObject(myObject, \"foo\", \"bar\")"
    ],
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   true if neither the object or any provided nested key is null or undefined."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "the object to validate"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "nested keys to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if neither the object or any provided nested key is null or undefined."
    },
    "generator": false
  },
  {
    "__docId__": 416,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validateOrFallback",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.validateOrFallback",
    "access": null,
    "description": "uses {@link validate} to lookup given args in given objectToBeValidated.\nThis ensures the lookup is not null, undefined, empty object, or empty string.\nIf this test fails, given fallbackValue is returned.",
    "examples": [
      " // to validate myObject.foo.bar, and get \"helloworld\" back as default if it is empty:\n validateOrFallback(\"helloworld\", myObject, \"foo\", \"bar\")"
    ],
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}                 lookup in objectToBeValidated if validation succeeded, fallbackValue if not."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fallbackValue",
        "description": "what to return if empty"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectToBeValidated",
        "description": "object to do lookup in"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "indices used for lookup in object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "lookup in objectToBeValidated if validation succeeded, fallbackValue if not."
    },
    "generator": false
  },
  {
    "__docId__": 417,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validateOrCallback",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.validateOrCallback",
    "access": null,
    "description": "Utilityfunction to simplify validation! uses {@link validateOrFallback} for validation, and executes\ngiven callback (and returns returnvalue from it) if validation fails.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}                 lookup in objectToBeValidated if validation succeeded, returnvalue from callback if not."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to be executed if validation fails"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectToBeValidated",
        "description": "The object to do validation-lookup in"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "indices used for lookup in objectToBeValidated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "lookup in objectToBeValidated if validation succeeded, returnvalue from callback if not."
    },
    "generator": false
  },
  {
    "__docId__": 418,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validateOrError",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.validateOrError",
    "access": null,
    "description": "Utilityfunction to simplify validation! uses {@link validateOrCallback} for validation, and passes\na callback that simply thrown an Error if validation fails.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}                 the looked-up value from objectToBeValidated if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "errorMessage",
        "description": "the message to use in new Error(errorMessage)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectToBeValidated",
        "description": "the object to validate args in"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "args for lookup. see {@link validateOrFallback}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the looked-up value from objectToBeValidated if it exists"
    },
    "generator": false
  },
  {
    "__docId__": 419,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_recursiveMerge",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager._recursiveMerge",
    "access": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "mergedValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "overrides",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 420,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_merge",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager._merge",
    "access": null,
    "description": "Deep copy all values from overrides to givenObject.\n\nAll keys in passed overrides-object will be cloned to passed givenObject. This happens deeply, so all\nnested objects will also be iterated (NOTE: lists are not iterated, only objects).\n\nNote that objects are passed by-reference, so if you do not want givenObject to be modified directly make sure\nyou pass false as third param",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}                   The result from deep-merging"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "The object to override values in"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "overrides",
        "description": "The object to copy all values from"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "overrideValuesInGiven",
        "description": "if true givenObjects will be overwritten directly, if false a new object\n                               will be created to merge both given objects into."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The result from deep-merging"
    },
    "generator": false
  },
  {
    "__docId__": 421,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "mergeInPlace",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.mergeInPlace",
    "access": null,
    "description": "Merges all values from overrideObject into originalObject.\nThis happens in place (as objects are passed-by-reference), so originalObject is modified.\n\nThis is a deep-merge (unlike Object.assign).",
    "examples": [
      "<caption>Simple example</caption>\nlet originalObject = {\n     foo: \"bar\",\n     person: {\n         name: \"Sandy claws\",\n         age: 42\n     }\n}\n\nlet overrideObject = {\n     foo: \"baz\",\n     person: {\n         age: 23,\n         phone: 12345678\n     }\n }\n\n ObjectManager.mergeInPlace(originalObject, overrideObject);\n\n // originalObject will now be:\n originalObject == {\n     foo: \"baz\",\n     person: {\n         age: 23,\n         phone: 12345678,\n         name: \"Sandy claws\"\n     }\n }"
    ],
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "originalObject",
        "description": "the object to modify"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "overrideObject",
        "description": "the object to copy values from"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 422,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "mergeAndClone",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.mergeAndClone",
    "access": null,
    "description": "Merges all values from originalObject and overrideObject into a new object that is returned.\n\nThis is a deep-merge (unlike Object.assign).\n\nFirst, all values from originalObject are merged into a new object.\nThen all values from overrideObject are merged into the same object, overriding any corresponding keys from\noriginalObject.",
    "examples": [
      "<caption>Simple example</caption>\nlet originalObject = {\n     foo: \"bar\",\n     person: {\n         name: \"Sandy claws\",\n         age: 42\n     }\n}\n\nlet overrideObject = {\n     foo: \"baz\",\n     person: {\n         age: 23,\n         phone: 12345678\n     }\n }\n\n let mergedObject = ObjectManager.mergeAndCopy(originalObject, overrideObject);\n\n // mergedObject will now be:\n mergedObject == {\n     foo: \"baz\",\n     person: {\n         age: 23,\n         phone: 12345678,\n         name: \"Sandy claws\"\n     }\n }"
    ],
    "lineNumber": 293,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}}            new object containing values from originalObject overridden by overrideObject (see example)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "originalObject",
        "description": "initial values for new object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "overrideObject",
        "description": "object to override values from original object with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": "new object containing values from originalObject overridden by overrideObject (see example)"
    },
    "generator": false
  },
  {
    "__docId__": 423,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "clone",
    "memberof": "source/utils/ObjectManager.js~ObjectManager",
    "longname": "source/utils/ObjectManager.js~ObjectManager.clone",
    "access": null,
    "description": "Copies all values from given originalObject into a new object, which is returned to caller.\n\nuses {@link ObjectManager#mergeAndClone}, but passes an empty object as one of the two it desires for merging..",
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "originalObject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 424,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/PrettyFormat.js",
    "memberof": null,
    "longname": "source/utils/PrettyFormat.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import typeDetect from \"./typeDetect\";\n\n/**\n * Pretty format any javascript object.\n *\n * Handles the following types:\n *\n * - null\n * - undefined\n * - Number\n * - Boolean\n * - String\n * - Array\n * - Map\n * - Set\n * - Function\n * - Class (detected as a Function, so pretty formatted just like a function)\n * - Object\n *\n * @example <caption>Without indentation</caption>\n * new PrettyFormat([1, 2]).toString();\n *\n * @example <caption>With indentation (indent by 2 spaces)</caption>\n * new PrettyFormat([1, 2]).toString(2);\n *\n * @example <caption>Simple examples</caption>\n * new PrettyFormat(true).toString() === 'true';\n * new PrettyFormat(null).toString() === 'null';\n * new PrettyFormat([1, 2]).toString() === '[1, 2]';\n * new PrettyFormat({name: \"John\", age: 29}).toString() === '{\"age\": 29, \"name\": John}';\n *\n * @example <caption>Complex example</caption>\n * let map = new Map();\n * map.set('a', [10, 20]);\n * map.set('b', [30, 40, 50]);\n * function testFunction() {}\n * let obj = {\n *     theMap: map,\n *     aSet: new Set(['one', 'two']),\n *     theFunction: testFunction\n * };\n * const prettyFormatted = new PrettyFormat(obj).toString(2);\n */\nexport default class PrettyFormat {\n    constructor(obj) {\n        this._obj = obj;\n    }\n\n    _indentString(str, indent, indentLevel) {\n        if(indent === 0) {\n            return str;\n        }\n        return `${' '.repeat(indent * indentLevel)}${str}`;\n    }\n\n    _objectToMap(obj) {\n        let map = new Map();\n        let sortedKeys = Array.from(Object.keys(obj));\n        sortedKeys.sort();\n        for(let key of sortedKeys) {\n            map.set(key, obj[key]);\n        }\n        return map;\n    }\n\n    _prettyFormatFlatIterable(flatIterable, size, indent, indentLevel, prefix, suffix) {\n        let output = prefix;\n        let itemSuffix = ', ';\n        if(indent) {\n            output = `${prefix}\\n`;\n            itemSuffix = ',';\n        }\n        let index = 1;\n        for(let item of flatIterable) {\n            let prettyItem = this._prettyFormat(item, indent, indentLevel + 1);\n            if(index !== size) {\n                prettyItem += itemSuffix;\n            }\n            output += this._indentString(prettyItem, indent, indentLevel + 1);\n            if(indent) {\n                output += '\\n';\n            }\n            index ++;\n        }\n        output += this._indentString(`${suffix}`, indent, indentLevel);\n        return output;\n    }\n\n    _prettyFormatMap(map, indent, indentLevel, prefix, suffix, keyValueSeparator) {\n        let output = prefix;\n        let itemSuffix = ', ';\n        if(indent) {\n            output = `${prefix}\\n`;\n            itemSuffix = ',';\n        }\n        let index = 1;\n        for(let [key, value] of map) {\n            let prettyKey = this._prettyFormat(key, indent, indentLevel + 1);\n            let prettyValue = this._prettyFormat(value, indent, indentLevel + 1);\n            let prettyItem = `${prettyKey}${keyValueSeparator}${prettyValue}`;\n            if(index !== map.size) {\n                prettyItem += itemSuffix;\n            }\n            output += this._indentString(prettyItem, indent, indentLevel + 1);\n            if(indent) {\n                output += '\\n';\n            }\n            index ++;\n        }\n        output += this._indentString(`${suffix}`, indent, indentLevel);\n        return output;\n    }\n\n    _prettyFormatFunction(fn) {\n        return `[Function: ${fn.name}]`;\n    }\n\n    _prettyFormat(obj, indent, indentLevel) {\n        const typeString = typeDetect(obj);\n        let output = '';\n        if(typeString === 'string') {\n            output = `\"${obj}\"`;\n        } else if(typeString === 'number' || typeString === 'boolean' ||\n                typeString === 'undefined' || typeString === 'null') {\n            output = `${obj}`;\n        } else if(typeString === 'array') {\n            output = this._prettyFormatFlatIterable(obj, obj.length, indent, indentLevel, '[', ']');\n        } else if(typeString === 'set') {\n            output = this._prettyFormatFlatIterable(obj, obj.size, indent, indentLevel, 'Set(', ')');\n        } else if(typeString === 'map') {\n            output = this._prettyFormatMap(obj, indent, indentLevel, 'Map(', ')', ' => ');\n        } else if(typeString === 'function') {\n            output = this._prettyFormatFunction(obj);\n        } else {\n            output = this._prettyFormatMap(this._objectToMap(obj), indent, indentLevel, '{', '}', ': ');\n        }\n        return output;\n    }\n\n    /**\n     * Get the results as a string, optionally indented.\n     *\n     * @param {number} indent The number of spaces to indent by. Only\n     *    child objects are indented, and they are indented recursively.\n     * @returns {string}\n     */\n    toString(indent) {\n        indent = indent || 0;\n        return this._prettyFormat(this._obj, indent, 0);\n    }\n}\n"
  },
  {
    "__docId__": 425,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PrettyFormat",
    "memberof": "source/utils/PrettyFormat.js",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/PrettyFormat",
    "importStyle": "PrettyFormat",
    "description": "Pretty format any javascript object.\n\nHandles the following types:\n\n- null\n- undefined\n- Number\n- Boolean\n- String\n- Array\n- Map\n- Set\n- Function\n- Class (detected as a Function, so pretty formatted just like a function)\n- Object",
    "examples": [
      "<caption>Without indentation</caption>\nnew PrettyFormat([1, 2]).toString();",
      "<caption>With indentation (indent by 2 spaces)</caption>\nnew PrettyFormat([1, 2]).toString(2);",
      "<caption>Simple examples</caption>\nnew PrettyFormat(true).toString() === 'true';\nnew PrettyFormat(null).toString() === 'null';\nnew PrettyFormat([1, 2]).toString() === '[1, 2]';\nnew PrettyFormat({name: \"John\", age: 29}).toString() === '{\"age\": 29, \"name\": John}';",
      "<caption>Complex example</caption>\nlet map = new Map();\nmap.set('a', [10, 20]);\nmap.set('b', [30, 40, 50]);\nfunction testFunction() {}\nlet obj = {\n    theMap: map,\n    aSet: new Set(['one', 'two']),\n    theFunction: testFunction\n};\nconst prettyFormatted = new PrettyFormat(obj).toString(2);"
    ],
    "lineNumber": 44,
    "interface": false
  },
  {
    "__docId__": 426,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#constructor",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 427,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_obj",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#_obj",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_indentString",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#_indentString",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent",
        "types": [
          "*"
        ]
      },
      {
        "name": "indentLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 429,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_objectToMap",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#_objectToMap",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 430,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_prettyFormatFlatIterable",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#_prettyFormatFlatIterable",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "flatIterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent",
        "types": [
          "*"
        ]
      },
      {
        "name": "indentLevel",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 431,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_prettyFormatMap",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#_prettyFormatMap",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "map",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent",
        "types": [
          "*"
        ]
      },
      {
        "name": "indentLevel",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      },
      {
        "name": "keyValueSeparator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 432,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_prettyFormatFunction",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#_prettyFormatFunction",
    "access": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 433,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_prettyFormat",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#_prettyFormat",
    "access": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent",
        "types": [
          "*"
        ]
      },
      {
        "name": "indentLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 434,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "source/utils/PrettyFormat.js~PrettyFormat",
    "longname": "source/utils/PrettyFormat.js~PrettyFormat#toString",
    "access": null,
    "description": "Get the results as a string, optionally indented.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "indent",
        "description": "The number of spaces to indent by. Only\n   child objects are indented, and they are indented recursively."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 435,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/TypeConvert.js",
    "memberof": null,
    "longname": "source/utils/TypeConvert.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export default class TypeConvert {\n    static toSet(value) {\n        if(value instanceof Set) {\n            return value;\n        } else {\n            return new Set(value);\n        }\n    }\n\n    static toMap(value) {\n        if(value instanceof Map) {\n            return value;\n        } else {\n            const map = new Map();\n            for(let key of Object.keys(value)) {\n                map.set(key, value[key]);\n            }\n            return map;\n        }\n    }\n\n    static toMapOfSets(value) {\n        const map = this.toMap(value);\n        for(let [key, value] of map) {\n            map.set(key, this.toSet(value));\n        }\n        return map;\n    }\n}\n"
  },
  {
    "__docId__": 436,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TypeConvert",
    "memberof": "source/utils/TypeConvert.js",
    "longname": "source/utils/TypeConvert.js~TypeConvert",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/TypeConvert",
    "importStyle": "TypeConvert",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 437,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toSet",
    "memberof": "source/utils/TypeConvert.js~TypeConvert",
    "longname": "source/utils/TypeConvert.js~TypeConvert.toSet",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 438,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toMap",
    "memberof": "source/utils/TypeConvert.js~TypeConvert",
    "longname": "source/utils/TypeConvert.js~TypeConvert.toMap",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 439,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toMapOfSets",
    "memberof": "source/utils/TypeConvert.js~TypeConvert",
    "longname": "source/utils/TypeConvert.js~TypeConvert.toMapOfSets",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 440,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/filepath.js",
    "memberof": null,
    "longname": "source/utils/filepath.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nconst _KNOWN_SECOND_EXTENSIONS = new Set([\n    'tar'\n]);\n\n/**\n * Get file extension.\n *\n * @param filename A filename. An URL also works.\n * @returns {string} The extension. Will be an empty string\n *      if we can not determine the extension.\n */\nexport function getFileExtension(filename) {\n    const nameSpit = filename.split('.');\n    let extension = '';\n    let secondExtension = null;\n    if(nameSpit.length > 2) {\n        let possibleSecondExtension = nameSpit[nameSpit.length - 2];\n        if(_KNOWN_SECOND_EXTENSIONS.has(possibleSecondExtension)) {\n            secondExtension = possibleSecondExtension;\n        }\n    }\n    if(nameSpit.length > 1) {\n        extension = nameSpit[nameSpit.length - 1];\n        if(secondExtension !== null) {\n            extension = `${secondExtension}.${extension}`;\n        }\n    }\n    return extension;\n}\n"
  },
  {
    "__docId__": 441,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_KNOWN_SECOND_EXTENSIONS",
    "memberof": "source/utils/filepath.js",
    "longname": "source/utils/filepath.js~_KNOWN_SECOND_EXTENSIONS",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/utils/filepath",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getFileExtension",
    "memberof": "source/utils/filepath.js",
    "longname": "source/utils/filepath.js~getFileExtension",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/filepath",
    "importStyle": "{getFileExtension}",
    "description": "Get file extension.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The extension. Will be an empty string\n     if we can not determine the extension."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "A filename. An URL also works."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The extension. Will be an empty string\n     if we can not determine the extension."
    },
    "generator": false
  },
  {
    "__docId__": 443,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/i18nFallbacks.js",
    "memberof": null,
    "longname": "source/utils/i18nFallbacks.js",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "content": "/*\nFallback implementations for the Django i18n translation catalog\nfunctions.\n\nSee:\nhttps://docs.djangoproject.com/en/2.0/topics/i18n/translation/\n\nWe only add the translation functions to ``window`` if they\nare not already there. This means that this can be included\nboth before and after loading the Django i18n javascript catalog.\n*/\n\nif (!window.gettext) {\n  window.gettext = function (msgid) {\n    return msgid\n  }\n  if (process.env.NODE_ENV !== 'test') {\n    console.warn(\n      'window.gettext is not defined. Patching window.gettext and related ' +\n      'functions with noop fallbacks. ' +\n      'Make sure you import/include a full gettext translation system like ' +\n      'the Django JavascriptCatalog view before ievv_jsbase or any javascript using ' +\n      'ievv_jsbase to get translations.'\n    )\n  }\n}\n\nif (!window.pluralidx) {\n  window.pluralidx = function (count) {\n    return (count === 1) ? 0 : 1\n  }\n}\n\nif (!window.ngettext) {\n  window.ngettext = function (singular, plural, count) {\n    return (count === 1) ? singular : plural\n  }\n}\n\nif (!window.gettext_noop) {\n  window.gettext_noop = function (msgid) {\n    return msgid\n  }\n}\n\nif (!window.pgettext) {\n  window.pgettext = function (context, msgid) {\n    return msgid\n  }\n}\n\nif (!window.npgettext) {\n  window.npgettext = function (context, singular, plural, count) {\n    return (count === 1) ? singular : plural\n  }\n}\n\nif (!window.interpolate) {\n  window.interpolate = function (fmt, obj, named) {\n    if (named) {\n      return fmt.replace(/%\\(\\w+\\)s/g, function (match) {\n        return String(obj[match.slice(2, -2)])\n      })\n    } else {\n      return fmt.replace(/%s/g, function (match) {\n        return String(obj.shift())\n      })\n    }\n  }\n}\n\nif (!window.get_format) {\n  window.get_format = function (format_type) {\n    return format_type\n  }\n}\n"
  },
  {
    "__docId__": 444,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/onDocumentReady.js",
    "memberof": null,
    "longname": "source/utils/onDocumentReady.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * Wrap a callback that is called when the document is done loading.\n *\n * @param callback A callback function. Called without any arguments.\n */\nexport default function onDocumentReady(callback) {\n    if (document.readyState != 'loading'){\n        callback();\n    } else {\n        document.addEventListener('DOMContentLoaded', callback);\n    }\n}\n"
  },
  {
    "__docId__": 445,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "onDocumentReady",
    "memberof": "source/utils/onDocumentReady.js",
    "longname": "source/utils/onDocumentReady.js~onDocumentReady",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/onDocumentReady",
    "importStyle": "onDocumentReady",
    "description": "Wrap a callback that is called when the document is done loading.",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback function. Called without any arguments."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 446,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/reduxApiUtilities.js",
    "memberof": null,
    "longname": "source/utils/reduxApiUtilities.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { Map as ImmutableMap, OrderedMap as ImmutableOrderedMap, List as ImmutableList } from 'immutable'\nimport LoggerSingleton from 'ievv_jsbase/lib/log/LoggerSingleton'\n\nconst logger = new LoggerSingleton().getLogger('churchill_js.utilities.reduxApiUtilities')\n\n/**\n * Util used by all `action.js`-files in `redux/api/*`.\n * This is used to mark an entry in a redux-map as loading.\n *\n * sets `isLoading` to `true` and `apiError` to null.\n *\n * @param oldApiDataMap Previous contents of `data` in the redux-map in question\n * @return {Immutable.Map<string, any>} The new Map to insert as entry in the redux-map being updated.\n */\nexport function makeApiDataMapIsLoading (oldApiDataMap = null) {\n  return new ImmutableMap({\n    isLoading: true,\n    isDeleted: false,\n    apiError: null,\n    data: oldApiDataMap === null ? new ImmutableMap() : oldApiDataMap.get('data')\n  })\n}\n\n/**\n * Util used by all `action.js`-files in `redux/api/*`.\n * This is used to format data to store in redux-state-map when an api-call is successful.\n *\n * The given `newData` is inserted as an ImmutableMap `data`.\n *\n * sets `isLoading` to `false`, `apiError` to null and `timestamp` to now.\n *\n * @param newData {Object} the object returned from the api which should be formated for insertion in the\n *   redux-state-map. If fromList is true this should be an iterable.\n * @param fromList {boolean} if true, make an ImmutableList of the given data instead of ImmutableMap\n * @param noWrap {boolean} if true, newData will not be wrapped in ImmutableMap or ImmutableList. Only use this if the\n *   data you are setting is already an ImmutableMap or ImmutableList!\n * @return {Immutable.Map} newly formatted ImmutableMap ready to be placed in redux-state-map\n */\nexport function makeApiDataMapNewData (newData, fromList = false, noWrap = false) {\n  const getData = () => {\n    if (noWrap) {\n      return newData\n    }\n    if (fromList) {\n      return new ImmutableList(newData)\n    }\n    return new ImmutableMap(newData)\n  }\n\n  return new ImmutableMap({\n    isLoading: false,\n    isDeleted: false,\n    apiError: null,\n    data: getData(),\n    timestamp: new Date()\n  })\n}\n\n/**\n * Util used by all `action.js`-files in `redux/api/*`.\n *\n * This is used to build a common error-format for all redux-map-entries.\n * sets `isLoading` to `false`, `data` to `null`, `timestamp` to now.\n *\n * stores the error in the field `apiError` formatted like this:\n *\n * apiError: ImmutableMap({\n *  status: error.response.status,\n *  bodydata: ImmutableMap(error.response.bodydata)\n * })\n *\n * @param error\n * @return {Immutable.Map}\n */\nexport function makeApiDataMapError (error) {\n  logger.warning('makeApiDataMapError: got error: ', error)\n  return new ImmutableMap({\n    isLoading: false,\n    isDeleted: false,\n    apiError: new ImmutableMap({\n      status: error.response.status,\n      bodydata: new ImmutableMap(error.response.bodydata)\n    }),\n    data: null,\n    timestamp: new Date()\n  })\n}\n\n/**\n * Used to mark an object in redux-state as deleted.\n * @param oldData\n * @return {Immutable.Map}\n */\nexport function makeApiDataMapDeleted (oldData = new ImmutableMap()) {\n  return new ImmutableMap({\n    isLoading: false,\n    isDeleted: true,\n    apiError: null,\n    data: null,\n    timestamp: new Date(),\n    oldData\n  })\n}\n\n/**\n * Simple util to fetch data from a redux-api-map (which should always be built by {@link makeApiDataMapIsLoading},\n * {@link makeApiDataMapNewData} or {@link makeApiDataMapError}).\n *\n * This util will lookup the given id in the given map and return it if it exists.\n * If the entry is missing or loading, null is returned.\n * If the entry is missing (and not already loading), the given `dispatchAction` is dispatched and null is returned.\n *\n * Note that this util will still return the object even if it is an error-object (`apiError !== null`), so you need\n * to handle errors in your component.\n *\n * @param map {Immutable.Map} a map built by {@link makeApiDataMapIsLoading}, {@link makeApiDataMapNewData} or\n *   {@link makeApiDataMapError}\n * @param id {number} the entry-id to look for in the map\n * @param dispatchAction {function} the `redux.api...actions.<action>` to dispatch to load the entry if missing\n * @param dispatch {function} a `redux-thunk` dispatch, like `this.props.dispatch` from a connected React.Component.\n * @return {null|Immutable.Map} null if the entry is loading, or an ImmutableMap of the entry if it exists.\n */\nexport function getObjectFromReduxMapOrNullIfLoading (map, id, dispatchAction, dispatch) {\n  if (id === null || id === undefined) {\n    throw new Error(`Cannot do a map-lookup with invalid key: \"${id}\"`)\n  }\n  const element = map.get(id, null)\n  if (element === null) {\n    dispatch(dispatchAction(id))\n    return null\n  }\n  if (element.get('isLoading', true)) {\n    return null\n  }\n  return element\n}\n\n/**\n * Used for the internal OrderedMap from {@link makeTypeMappedReduxMapFromApiData}, and should be used for other\n * type-lists from api.\n *\n * The only required fieldname on the api-data is `value`, which will be used as key in the ImmutableOrderedMap\n *\n * Builds a structure like this:\n *   ImmutableOrderedMap({\n *     <valueKey>: ImmutableMap({\n *       label: <some label>,\n *       description: <some description>,\n *       <otherfield>: <otherfieldkey>,\n *         ...\n *     })\n *   })\n *\n * from input-data formatted like this:\n *   [\n *     {\n *       \"value\": \"<valueKey>\",\n *       \"label\": \"<some label>\",\n *       \"description\": \"<some description>\",\n *       <otherfield>: <otherfieldkey>,\n *       ...\n *     }\n *   ]\n *\n * @param valueArray See input-data doc above\n * @param valueKey default to 'value' as in example above. can be set to any valid value. note that this is NOT\n *   validated or enforced in any way\n * @return {Immutable.OrderedMap<string, Immutable.Map<string, string>>} see example above\n */\nexport function makeImmutableOrderedMapFromValueArray (valueArray, valueKey = 'value') {\n  return new ImmutableOrderedMap()\n    .withMutations((newValuesForNodeTypeMap) => {\n      for (const valueObject of valueArray) {\n        // const {value, ...object} = valueObject\n        // newValuesForNodeTypeMap.set(value, new ImmutableMap(object))\n        const value = valueObject[valueKey]\n        delete valueObject[valueKey]\n        newValuesForNodeTypeMap.set(value, new ImmutableMap(valueObject))\n      }\n    })\n}\n\n/**\n * Used for apis like nodePaymentSubscriptionTypes and nodeMembershipTypes.\n *\n * Builds a structure like this:\n * ImmutableMap({\n *  <nodeType>: ImmutableOrderedMap({\n *     <valueKey>: ImmutableMap({\n *       label: <some label>,\n *       description: <some description>,\n *       <otherfield>: <otherfieldkey>,\n *         ...\n *     })\n *   })\n * })\n *\n * Expects apiResponseBodydata to be formatted like this:\n *  {\n *     \"<nodeType>\": [\n *       {\n *         \"value\": \"<valueKey>\",\n *         \"label\": \"<some label>\",\n *         \"description\": \"<some description>\",\n *         <otherfield>: <otherfieldkey>,\n *         ...\n *       }\n *     ]\n *  }\n *\n * @param apiResponseBodydata `bodydata` from a response. This response has to be formatted correctly.\n * @return {Immutable.Map<string, Immutable.OrderedMap<string, Immutable.Map<string, string>>>} See example in doc above\n */\nexport function makeTypeMappedReduxMapFromApiData (apiResponseBodydata) {\n  return new ImmutableMap().withMutations((data) => {\n    for (const [typeKey, valuesForTypeKey] of Object.entries(apiResponseBodydata)) {\n      data.set(typeKey, makeImmutableOrderedMapFromValueArray(valuesForTypeKey))\n    }\n  })\n}\n\n/**\n * The default key for maps built by {@link makeTypeMappedReduxMapFromApiData}.\n * This should be the same key used by the server-side apis, so do not change it unless you know what you are doing.\n *\n * @type {string}\n */\nexport const TYPE_MAPPED_REDUX_MAP_DEFAULT_KEY = '__default__'\n\n/**\n * Used to fetch the ImmutableOrderedMap of values for a <typeKey> in a structure built by\n * {@link makeTypeMappedReduxMapFromApiData}. See its documentation for structure.\n *\n * If the given <typeKey> is not present in the map, then the entry referenced by\n * {@link TYPE_MAPPED_REDUX_MAP_DEFAULT_KEY} will be returned instead.\n *\n * @param typeMappedReduxMap a map built by {@link makeTypeMappedReduxMapFromApiData}\n * @param typeKey the <typeKey> to look for in the map\n * @param fallbackToDefault if true return default-data if no data for typekey is present. If false, return null.\n * @return {Immutable.OrderedMap<string, Immutable.Map<string, string>>} The ImmutableOrderedMap referenced by the\n *   given <typeKey>\n */\nexport function getValuesFromTypeMappedReduxMap (typeMappedReduxMap, typeKey, fallbackToDefault = true) {\n  if (typeMappedReduxMap.get('isLoading')) {\n    return null\n  }\n  const typeMappedValue = typeMappedReduxMap.getIn(['data', typeKey], null)\n  if (typeMappedValue !== null) {\n    return typeMappedValue\n  }\n  if (fallbackToDefault) {\n    return typeMappedReduxMap.getIn(['data', TYPE_MAPPED_REDUX_MAP_DEFAULT_KEY])\n  }\n  return null\n}\n\n/**\n * Used to ensure that a map built by {@link makeTypeMappedReduxMapFromApiData} or\n * {@link makeImmutableOrderedMapFromValueArray} is loaded in redux-store\n *\n * Note that this should only be used in cases where the data is static (e.g. load once, use always), as it does\n * not pass any params to the api or check if any specific data is present. This simply triggers the given\n * action if the map is empty and not already loading.\n *\n * @param typeMap The redux-store-map you want to ensure is loaded (e.g. userNotificationTypesMap)\n * @param dispatchAction the redux-action to dispatch to load the typemap\n * @param dispatch The dispatcher to use to dispatch the dispatchAction, e.g. props.dispatch\n * @return {boolean} true if the given map is loaded, false if not.\n */\nexport function ensureMapHasDataInReduxStore (typeMap, dispatchAction, dispatch) {\n  if (!typeMap.get('data').size > 0) {\n    if (!typeMap.get('isLoading', false)) {\n      dispatch(dispatchAction())\n    }\n    return false\n  }\n  return true\n}\n"
  },
  {
    "__docId__": 447,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "logger",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~logger",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeApiDataMapIsLoading",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~makeApiDataMapIsLoading",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{makeApiDataMapIsLoading}",
    "description": "Util used by all `action.js`-files in `redux/api/*`.\nThis is used to mark an entry in a redux-map as loading.\n\nsets `isLoading` to `true` and `apiError` to null.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldApiDataMap",
        "description": "Previous contents of `data` in the redux-map in question"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.Map<string, any>"
      ],
      "spread": false,
      "description": "The new Map to insert as entry in the redux-map being updated."
    },
    "generator": false
  },
  {
    "__docId__": 449,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeApiDataMapNewData",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~makeApiDataMapNewData",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{makeApiDataMapNewData}",
    "description": "Util used by all `action.js`-files in `redux/api/*`.\nThis is used to format data to store in redux-state-map when an api-call is successful.\n\nThe given `newData` is inserted as an ImmutableMap `data`.\n\nsets `isLoading` to `false`, `apiError` to null and `timestamp` to now.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "{Object} the object returned from the api which should be formated for insertion in the\n  redux-state-map. If fromList is true this should be an iterable."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fromList",
        "description": "{boolean} if true, make an ImmutableList of the given data instead of ImmutableMap"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "noWrap",
        "description": "{boolean} if true, newData will not be wrapped in ImmutableMap or ImmutableList. Only use this if the\n  data you are setting is already an ImmutableMap or ImmutableList!"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.Map"
      ],
      "spread": false,
      "description": "newly formatted ImmutableMap ready to be placed in redux-state-map"
    },
    "generator": false
  },
  {
    "__docId__": 450,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeApiDataMapError",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~makeApiDataMapError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{makeApiDataMapError}",
    "description": "Util used by all `action.js`-files in `redux/api/*`.\n\nThis is used to build a common error-format for all redux-map-entries.\nsets `isLoading` to `false`, `data` to `null`, `timestamp` to now.\n\nstores the error in the field `apiError` formatted like this:\n\napiError: ImmutableMap({\n status: error.response.status,\n bodydata: ImmutableMap(error.response.bodydata)\n})",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.Map"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 451,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeApiDataMapDeleted",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~makeApiDataMapDeleted",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{makeApiDataMapDeleted}",
    "description": "Used to mark an object in redux-state as deleted.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldData",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.Map"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 452,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getObjectFromReduxMapOrNullIfLoading",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~getObjectFromReduxMapOrNullIfLoading",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{getObjectFromReduxMapOrNullIfLoading}",
    "description": "Simple util to fetch data from a redux-api-map (which should always be built by {@link makeApiDataMapIsLoading},\n{@link makeApiDataMapNewData} or {@link makeApiDataMapError}).\n\nThis util will lookup the given id in the given map and return it if it exists.\nIf the entry is missing or loading, null is returned.\nIf the entry is missing (and not already loading), the given `dispatchAction` is dispatched and null is returned.\n\nNote that this util will still return the object even if it is an error-object (`apiError !== null`), so you need\nto handle errors in your component.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "{Immutable.Map} a map built by {@link makeApiDataMapIsLoading}, {@link makeApiDataMapNewData} or\n  {@link makeApiDataMapError}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "{number} the entry-id to look for in the map"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dispatchAction",
        "description": "{function} the `redux.api...actions.<action>` to dispatch to load the entry if missing"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dispatch",
        "description": "{function} a `redux-thunk` dispatch, like `this.props.dispatch` from a connected React.Component."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Immutable.Map"
      ],
      "spread": false,
      "description": "null if the entry is loading, or an ImmutableMap of the entry if it exists."
    },
    "generator": false
  },
  {
    "__docId__": 453,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeImmutableOrderedMapFromValueArray",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~makeImmutableOrderedMapFromValueArray",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{makeImmutableOrderedMapFromValueArray}",
    "description": "Used for the internal OrderedMap from {@link makeTypeMappedReduxMapFromApiData}, and should be used for other\ntype-lists from api.\n\nThe only required fieldname on the api-data is `value`, which will be used as key in the ImmutableOrderedMap\n\nBuilds a structure like this:\n  ImmutableOrderedMap({\n    <valueKey>: ImmutableMap({\n      label: <some label>,\n      description: <some description>,\n      <otherfield>: <otherfieldkey>,\n        ...\n    })\n  })\n\nfrom input-data formatted like this:\n  [\n    {\n      \"value\": \"<valueKey>\",\n      \"label\": \"<some label>\",\n      \"description\": \"<some description>\",\n      <otherfield>: <otherfieldkey>,\n      ...\n    }\n  ]",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "valueArray",
        "description": "See input-data doc above"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "valueKey",
        "description": "default to 'value' as in example above. can be set to any valid value. note that this is NOT\n  validated or enforced in any way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.OrderedMap<string, Immutable.Map<string, string>>"
      ],
      "spread": false,
      "description": "see example above"
    },
    "generator": false
  },
  {
    "__docId__": 454,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeTypeMappedReduxMapFromApiData",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~makeTypeMappedReduxMapFromApiData",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{makeTypeMappedReduxMapFromApiData}",
    "description": "Used for apis like nodePaymentSubscriptionTypes and nodeMembershipTypes.\n\nBuilds a structure like this:\nImmutableMap({\n <nodeType>: ImmutableOrderedMap({\n    <valueKey>: ImmutableMap({\n      label: <some label>,\n      description: <some description>,\n      <otherfield>: <otherfieldkey>,\n        ...\n    })\n  })\n})\n\nExpects apiResponseBodydata to be formatted like this:\n {\n    \"<nodeType>\": [\n      {\n        \"value\": \"<valueKey>\",\n        \"label\": \"<some label>\",\n        \"description\": \"<some description>\",\n        <otherfield>: <otherfieldkey>,\n        ...\n      }\n    ]\n }",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "apiResponseBodydata",
        "description": "`bodydata` from a response. This response has to be formatted correctly."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.Map<string, Immutable.OrderedMap<string, Immutable.Map<string, string>>>"
      ],
      "spread": false,
      "description": "See example in doc above"
    },
    "generator": false
  },
  {
    "__docId__": 455,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TYPE_MAPPED_REDUX_MAP_DEFAULT_KEY",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~TYPE_MAPPED_REDUX_MAP_DEFAULT_KEY",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{TYPE_MAPPED_REDUX_MAP_DEFAULT_KEY}",
    "description": "The default key for maps built by {@link makeTypeMappedReduxMapFromApiData}.\nThis should be the same key used by the server-side apis, so do not change it unless you know what you are doing.",
    "lineNumber": 228,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 456,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getValuesFromTypeMappedReduxMap",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~getValuesFromTypeMappedReduxMap",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{getValuesFromTypeMappedReduxMap}",
    "description": "Used to fetch the ImmutableOrderedMap of values for a <typeKey> in a structure built by\n{@link makeTypeMappedReduxMapFromApiData}. See its documentation for structure.\n\nIf the given <typeKey> is not present in the map, then the entry referenced by\n{@link TYPE_MAPPED_REDUX_MAP_DEFAULT_KEY} will be returned instead.",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "typeMappedReduxMap",
        "description": "a map built by {@link makeTypeMappedReduxMapFromApiData}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "typeKey",
        "description": "the <typeKey> to look for in the map"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fallbackToDefault",
        "description": "if true return default-data if no data for typekey is present. If false, return null."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.OrderedMap<string, Immutable.Map<string, string>>"
      ],
      "spread": false,
      "description": "The ImmutableOrderedMap referenced by the\n  given <typeKey>"
    },
    "generator": false
  },
  {
    "__docId__": 457,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ensureMapHasDataInReduxStore",
    "memberof": "source/utils/reduxApiUtilities.js",
    "longname": "source/utils/reduxApiUtilities.js~ensureMapHasDataInReduxStore",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/reduxApiUtilities",
    "importStyle": "{ensureMapHasDataInReduxStore}",
    "description": "Used to ensure that a map built by {@link makeTypeMappedReduxMapFromApiData} or\n{@link makeImmutableOrderedMapFromValueArray} is loaded in redux-store\n\nNote that this should only be used in cases where the data is static (e.g. load once, use always), as it does\nnot pass any params to the api or check if any specific data is present. This simply triggers the given\naction if the map is empty and not already loading.",
    "lineNumber": 270,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "typeMap",
        "description": "The redux-store-map you want to ensure is loaded (e.g. userNotificationTypesMap)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dispatchAction",
        "description": "the redux-action to dispatch to load the typemap"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dispatch",
        "description": "The dispatcher to use to dispatch the dispatchAction, e.g. props.dispatch"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the given map is loaded, false if not."
    },
    "generator": false
  },
  {
    "__docId__": 458,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/utils/typeDetect.js",
    "memberof": null,
    "longname": "source/utils/typeDetect.js",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "content": "/**\n * Detect the type of an object and return the\n * result as a string.\n *\n * Handles the following types:\n *\n * - null  (returned as ``\"null\"``).\n * - undefined  (returned as ``\"undefined\"``).\n * - Number  (returned as ``\"number\"``).\n * - Boolean  (returned as ``\"boolean\"``).\n * - String  (returned as ``\"string\"``).\n * - Array  (returned as ``\"array\"``).\n * - Map  (returned as ``\"map\"``).\n * - Set  (returned as ``\"set\"``).\n * - Function  (returned as ``\"function\"``).\n * - Object  (returned as ``\"object\"``).\n *\n * We do not handle classes - they are returned as ``\"function\"``.\n * We could handle classes, but for Babel classes that will require\n * a fairly expensive and error prone regex.\n *\n * @param obj An object to detect the type for.\n * @returns {string}\n */\nexport default function typeDetect(obj) {\n    if(obj === null) {\n        return 'null';\n    }\n    const typeOf = typeof obj;\n    if(typeOf === 'undefined') {\n        return 'undefined';\n    }\n    if(typeOf === 'number') {\n        return 'number';\n    }\n    if(typeOf === 'boolean') {\n        return 'boolean';\n    }\n    if(typeOf === 'string') {\n        return 'string';\n    }\n    if(typeOf === 'function') {\n        return 'function';\n    }\n    if(Array.isArray(obj)) {\n        return 'array';\n    }\n    if(obj instanceof Map) {\n        return 'map';\n    }\n    if(obj instanceof Set) {\n        return 'set';\n    }\n    return 'object';\n}\n"
  },
  {
    "__docId__": 459,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "typeDetect",
    "memberof": "source/utils/typeDetect.js",
    "longname": "source/utils/typeDetect.js~typeDetect",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/utils/typeDetect",
    "importStyle": "typeDetect",
    "description": "Detect the type of an object and return the\nresult as a string.\n\nHandles the following types:\n\n- null  (returned as ``\"null\"``).\n- undefined  (returned as ``\"undefined\"``).\n- Number  (returned as ``\"number\"``).\n- Boolean  (returned as ``\"boolean\"``).\n- String  (returned as ``\"string\"``).\n- Array  (returned as ``\"array\"``).\n- Map  (returned as ``\"map\"``).\n- Set  (returned as ``\"set\"``).\n- Function  (returned as ``\"function\"``).\n- Object  (returned as ``\"object\"``).\n\nWe do not handle classes - they are returned as ``\"function\"``.\nWe could handle classes, but for Babel classes that will require\na fairly expensive and error prone regex.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "An object to detect the type for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 460,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/widget/AbstractWidget.js",
    "memberof": null,
    "longname": "source/widget/AbstractWidget.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import ObjectManager from \"../utils/ObjectManager\";\n\n\n/**\n * Base class for widgets for {@link WidgetRegistrySingleton}.\n *\n * @example <caption>Create a very simple widget</caption>\n * export default class OpenMenuWidget extends AbstractWidget {\n *     constructor(element, widgetInstanceId) {\n *          super(element, widgetInstanceId);\n *          this._onClickBound = (...args) => {\n *              this._onClick(...args);\n *          };\n *          this.element.addEventListener('click', this._onClickBound);\n *     }\n *\n *     _onClick = (e) => {\n *          e.preventDefault();\n *          console.log('I should have opened the menu here');\n *     }\n *\n *     destroy() {\n *          this.element.removeEventListener('click', this._onClickBound);\n *     }\n * }\n *\n * @example <caption>Use the widget</caption>\n * <button type=\"button\" data-ievv-jsbase-widget=\"open-menu-button\">\n *     Open menu\n * </button>\n *\n * @example <caption>A widget with configuration input</caption>\n * export default class OpenMenuWidget extends AbstractWidget {\n *     constructor(element) {\n *          super(element);\n *          this._onClickBound = (...args) => {\n *              this._onClick(...args);\n *          };\n *          this.element.addEventListener('click', this._onClickBound);\n *     }\n *\n *     getDefaultConfig() {\n *          return {\n *              'menuId': 'id_main_menu'\n *          }\n *     }\n *\n *     _onClick = (e) => {\n *          e.preventDefault();\n *          console.log(`I should have opened the menu with id=\"${this.config.menuId}\" here`);\n *     }\n *\n *     destroy() {\n *          this.element.removeEventListener('click', this._onClickBound);\n *     }\n * }\n *\n * @example <caption>Use the widget with config</caption>\n * <!-- Using the default config -->\n * <button type=\"button\" data-ievv-jsbase-widget=\"open-menu-button\">\n *     Open the main menu\n * </button>\n * <!-- Override the menuId config -->\n * <button type=\"button\" data-ievv-jsbase-widget=\"open-menu-button\"\n *          data-ievv-jsbase-widget-config='{\"menuId\": \"id_the_other_menu\"}'>\n *     Open the other menu\n * </button>\n */\nexport default class AbstractWidget {\n\n    /**\n     * @param {Element} element The element to load the widget in.\n     * @param {string} widgetInstanceId The unique ID of this widget instance\n     *  in the widget registry.\n     */\n    constructor(element, widgetInstanceId) {\n        this.element = element;\n        this.widgetInstanceId = widgetInstanceId;\n    }\n\n    /**\n     * Get the default config.\n     *\n     * Any config supplied via the ``data-ievv-jsbase-widget-config``\n     * attribute is merged into this object.\n     *\n     * @returns {Object}\n     */\n    getDefaultConfig() {\n        return {};\n    }\n\n    _parseConfig() {\n        const attributeName = 'data-ievv-jsbase-widget-config';\n        if(this.element.hasAttribute(attributeName)) {\n            const rawConfig = this.element.getAttribute(attributeName);\n            const config = JSON.parse(rawConfig);\n            return config;\n        }\n        return {}\n    }\n\n    /**\n     * Get the config.\n     *\n     * JSON decodes any config supplied via the ``data-ievv-jsbase-widget-config``\n     * attribute of the Element and {@link AbstractWidget#getDefaultConfig}\n     * into a config object. The result of this is cached, so multiple calls\n     * to this property will only result in the config object being created\n     * once.\n     *\n     * @throws {SyntaxError} If the ``data-ievv-jsbase-widget-config`` attribute\n     *      does not contain valid JSON data.\n     *      Not thrown if the element does not have a\n     *      ``data-ievv-jsbase-widget-config`` attribute.\n     *\n     * @returns {Object} The config object. This will be an empty object\n     *      if we have no {@link AbstractWidget#getDefaultConfig} and\n     *      no config is supplied via the ``data-ievv-jsbase-widget-config``\n     *      attribute of the Element.\n     */\n    get config() {\n        if(typeof this._config === 'undefined') {\n            const parsedConfig = this._parseConfig();\n            this._config = ObjectManager.mergeAndClone(this.getDefaultConfig(), parsedConfig);\n        }\n        return this._config;\n    }\n\n    /**\n     * Destroy the widget.\n     *\n     * You should override this in subclasses if your\n     * widget sets up something that will work incorrectly\n     * if the widget disappears or is re-created (such as event\n     * listeners and signals).\n     */\n    destroy() {\n        \n    }\n\n    /**\n     * If you override {@link AbstractWidget#afterInitializeAllWidgets},\n     * you must override this to return ``true``.\n     *\n     * @returns {boolean} Should return ``true`` if you want the widget registry\n     *   to call {@link AbstractWidget#afterInitializeAllWidgets}.\n     */\n    useAfterInitializeAllWidgets() {\n        return false;\n    }\n\n    /**\n     * Called after all the widgets within the element that\n     * {@link WidgetRegistrySingleton#initializeAllWidgetsWithinElement}\n     * was called with is initialized.\n     *\n     * For performance reasons, this is only called if\n     * {@link AbstractWidget#useAfterInitializeAllWidgets} returns\n     * ``true``, so you must also override that method if you override\n     * this method.\n     *\n     * This is useful if you need to do something after other\n     * widgets have finished initializing, which may be the case\n     * for loosely coupled widgets.\n     *\n     * Does nothing by default.\n     */\n    afterInitializeAllWidgets() {\n    }\n}\n"
  },
  {
    "__docId__": 461,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AbstractWidget",
    "memberof": "source/widget/AbstractWidget.js",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/widget/AbstractWidget",
    "importStyle": "AbstractWidget",
    "description": "Base class for widgets for {@link WidgetRegistrySingleton}.",
    "examples": [
      "<caption>Create a very simple widget</caption>\nexport default class OpenMenuWidget extends AbstractWidget {\n    constructor(element, widgetInstanceId) {\n         super(element, widgetInstanceId);\n         this._onClickBound = (...args) => {\n             this._onClick(...args);\n         };\n         this.element.addEventListener('click', this._onClickBound);\n    }\n\n    _onClick = (e) => {\n         e.preventDefault();\n         console.log('I should have opened the menu here');\n    }\n\n    destroy() {\n         this.element.removeEventListener('click', this._onClickBound);\n    }\n}",
      "<caption>Use the widget</caption>\n<button type=\"button\" data-ievv-jsbase-widget=\"open-menu-button\">\n    Open menu\n</button>",
      "<caption>A widget with configuration input</caption>\nexport default class OpenMenuWidget extends AbstractWidget {\n    constructor(element) {\n         super(element);\n         this._onClickBound = (...args) => {\n             this._onClick(...args);\n         };\n         this.element.addEventListener('click', this._onClickBound);\n    }\n\n    getDefaultConfig() {\n         return {\n             'menuId': 'id_main_menu'\n         }\n    }\n\n    _onClick = (e) => {\n         e.preventDefault();\n         console.log(`I should have opened the menu with id=\"${this.config.menuId}\" here`);\n    }\n\n    destroy() {\n         this.element.removeEventListener('click', this._onClickBound);\n    }\n}",
      "<caption>Use the widget with config</caption>\n<!-- Using the default config -->\n<button type=\"button\" data-ievv-jsbase-widget=\"open-menu-button\">\n    Open the main menu\n</button>\n<!-- Override the menuId config -->\n<button type=\"button\" data-ievv-jsbase-widget=\"open-menu-button\"\n         data-ievv-jsbase-widget-config='{\"menuId\": \"id_the_other_menu\"}'>\n    Open the other menu\n</button>"
    ],
    "lineNumber": 69,
    "interface": false
  },
  {
    "__docId__": 462,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#constructor",
    "access": null,
    "description": "",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to load the widget in."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetInstanceId",
        "description": "The unique ID of this widget instance\n in the widget registry."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 463,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#element",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "widgetInstanceId",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#widgetInstanceId",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDefaultConfig",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#getDefaultConfig",
    "access": null,
    "description": "Get the default config.\n\nAny config supplied via the ``data-ievv-jsbase-widget-config``\nattribute is merged into this object.",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 466,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parseConfig",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#_parseConfig",
    "access": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 467,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#config",
    "access": null,
    "description": "Get the config.\n\nJSON decodes any config supplied via the ``data-ievv-jsbase-widget-config``\nattribute of the Element and {@link AbstractWidget#getDefaultConfig}\ninto a config object. The result of this is cached, so multiple calls\nto this property will only result in the config object being created\nonce.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The config object. This will be an empty object\n     if we have no {@link AbstractWidget#getDefaultConfig} and\n     no config is supplied via the ``data-ievv-jsbase-widget-config``\n     attribute of the Element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The config object. This will be an empty object\n     if we have no {@link AbstractWidget#getDefaultConfig} and\n     no config is supplied via the ``data-ievv-jsbase-widget-config``\n     attribute of the Element."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "SyntaxError"
        ],
        "description": "If the ``data-ievv-jsbase-widget-config`` attribute\n     does not contain valid JSON data.\n     Not thrown if the element does not have a\n     ``data-ievv-jsbase-widget-config`` attribute."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 468,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_config",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#_config",
    "access": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#destroy",
    "access": null,
    "description": "Destroy the widget.\n\nYou should override this in subclasses if your\nwidget sets up something that will work incorrectly\nif the widget disappears or is re-created (such as event\nlisteners and signals).",
    "lineNumber": 138,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 470,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useAfterInitializeAllWidgets",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#useAfterInitializeAllWidgets",
    "access": null,
    "description": "If you override {@link AbstractWidget#afterInitializeAllWidgets},\nyou must override this to return ``true``.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Should return ``true`` if you want the widget registry\n  to call {@link AbstractWidget#afterInitializeAllWidgets}."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Should return ``true`` if you want the widget registry\n  to call {@link AbstractWidget#afterInitializeAllWidgets}."
    },
    "generator": false
  },
  {
    "__docId__": 471,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "afterInitializeAllWidgets",
    "memberof": "source/widget/AbstractWidget.js~AbstractWidget",
    "longname": "source/widget/AbstractWidget.js~AbstractWidget#afterInitializeAllWidgets",
    "access": null,
    "description": "Called after all the widgets within the element that\n{@link WidgetRegistrySingleton#initializeAllWidgetsWithinElement}\nwas called with is initialized.\n\nFor performance reasons, this is only called if\n{@link AbstractWidget#useAfterInitializeAllWidgets} returns\n``true``, so you must also override that method if you override\nthis method.\n\nThis is useful if you need to do something after other\nwidgets have finished initializing, which may be the case\nfor loosely coupled widgets.\n\nDoes nothing by default.",
    "lineNumber": 169,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 472,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "source/widget/WidgetRegistrySingleton.js",
    "memberof": null,
    "longname": "source/widget/WidgetRegistrySingleton.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import makeCustomError from \"../makeCustomError\";\n\n/**\n * The instance of the {@link WidgetRegistrySingleton}.\n */\nlet _instance = null;\n\n\n/**\n * Exception thrown when an element where we expect the\n * ``data-ievv-jsbase-widget-instanceid`` attribute does\n * not have this attribute.\n *\n * @type {Error}\n */\nexport let ElementHasNoWidgetInstanceIdError = makeCustomError('ElementHasNoWidgetInstanceIdError');\n\n\n/**\n * Exception thrown when an element that we expect to have\n * the ``data-ievv-jsbase-widget`` attribute does not have\n * this attribute.\n *\n * @type {Error}\n */\nexport let ElementIsNotWidgetError = makeCustomError('ElementIsNotWidgetError');\n\n\n/**\n * Exception thrown when an element has a\n * ``data-ievv-jsbase-widget`` with a value that\n * is not an alias registered in the {@link WidgetRegistrySingleton}.\n *\n * @type {Error}\n */\nexport let InvalidWidgetAliasError = makeCustomError('InvalidWidgetAliasError');\n\n\n/**\n * Exception thrown when an element with the\n * ``data-ievv-jsbase-widget-instanceid=<widgetInstanceId>`` attribute is not in\n * the {@link WidgetRegistrySingleton} with ``<widgetInstanceId>``.\n *\n * @type {Error}\n */\nexport let ElementIsNotInitializedAsWidget = makeCustomError('ElementIsNotInitializedAsWidget');\n\n\n/**\n * A very lightweight widget system.\n *\n * Basic example below - see {@link AbstractWidget} for more examples.\n *\n * @example <caption>Create a very simple widget</caption>\n * export default class OpenMenuWidget extends AbstractWidget {\n *     constructor(element) {\n *          super(element);\n *          this._onClickBound = (...args) => {\n *              this._onClick(...args);\n *          };\n *          this.element.addEventListener('click', this._onClickBound);\n *     }\n *\n *     _onClick = (e) => {\n *          e.preventDefault();\n *          console.log('I should have opened the menu here');\n *     }\n *\n *     destroy() {\n *          this.element.removeEventListener('click', this._onClickBound);\n *     }\n * }\n *\n * @example <caption>Use the widget</caption>\n * <button data-ievv-jsbase-widget=\"open-menu-button\" type=\"button\">\n *     Open menu\n * </button>\n *\n * @example <caption>Register and load widgets</caption>\n * // Somewhere that is called after all the widgets are rendered\n * // - typically at the end of the <body>\n * import WidgetRegistrySingleton from 'ievv_jsbase/widget/WidgetRegistrySingleton';\n * import OpenMenuWidget from 'path/to/OpenMenuWidget';\n * const widgetRegistry = new WidgetRegistrySingleton();\n * widgetRegistry.registerWidgetClass('open-menu-button', OpenMenuWidget);\n * widgetRegistry.initializeAllWidgetsWithinElement(document.body);\n *\n */\nexport default class WidgetRegistrySingleton {\n    constructor() {\n        if (!_instance) {\n            _instance = this;\n            this._initialize();\n        }\n        return _instance;\n    }\n\n    _initialize() {\n        this._widgetAttribute = 'data-ievv-jsbase-widget';\n        this._widgetInstanceIdAttribute = 'data-ievv-jsbase-widget-instanceid';\n        this._widgetClassMap = new Map();\n        this._widgetInstanceMap = new Map();\n        this._widgetInstanceCounter = 0;\n    }\n\n    clear() {\n        // TODO: Call destroyAllWidgetsWithinDocumentBody()\n        this._widgetClassMap.clear();\n        this._widgetInstanceMap.clear();\n        this._widgetInstanceCounter = 0;\n    }\n\n    /**\n     * Register a widget class in the registry.\n     *\n     * @param {string} alias The alias for the widget. This is the string that\n     *      is used as the attribute value with the ``data-ievv-jsbase-widget``\n     *      DOM element attribute.\n     * @param {AbstractWidget} WidgetClass The widget class.\n     */\n    registerWidgetClass(alias, WidgetClass) {\n        this._widgetClassMap.set(alias, WidgetClass);\n    }\n\n    /**\n     * Remove widget class from registry.\n     *\n     * @param alias The alias that the widget class was registered with\n     *      by using {@link WidgetRegistrySingleton#registerWidgetClass}.\n     */\n    removeWidgetClass(alias) {\n        this._widgetClassMap.delete(alias);\n    }\n\n    /**\n     * Initialize the provided element as a widget.\n     *\n     * @param {Element} element The DOM element to initalize as a widget.\n     *\n     * @throws {ElementIsNotWidgetError} If the element does not have\n     *      the ``data-ievv-jsbase-widget`` attribute.\n     * @throws {InvalidWidgetAliasError} If the widget alias is not in this registry.\n     */\n    initializeWidget(element) {\n        let alias = element.getAttribute(this._widgetAttribute);\n        if(!alias) {\n            throw new ElementIsNotWidgetError(\n                `The\\n\\n${element.outerHTML}\\n\\nelement has no or empty` +\n                `${this._widgetAttribute} attribute.`);\n        }\n        if(!this._widgetClassMap.has(alias)) {\n            throw new InvalidWidgetAliasError(`No WidgetClass registered with the \"${alias}\" alias.`);\n        }\n        let WidgetClass = this._widgetClassMap.get(alias);\n        this._widgetInstanceCounter ++;\n        let widgetInstanceId = this._widgetInstanceCounter.toString();\n        let widget = new WidgetClass(element, widgetInstanceId);\n        this._widgetInstanceMap.set(widgetInstanceId, widget);\n        element.setAttribute(this._widgetInstanceIdAttribute, widgetInstanceId);\n        return widget;\n    }\n\n    _getAllWidgetElementsWithinElement(element) {\n        return Array.from(element.querySelectorAll(`[${this._widgetAttribute}]`));\n    }\n\n    /**\n     * Initialize all widgets within the provided element.\n     *\n     * @param {Element} element A DOM element.\n     */\n    initializeAllWidgetsWithinElement(element) {\n        const afterInitializeAllWidgets = [];\n        for(let widgetElement of this._getAllWidgetElementsWithinElement(element)) {\n            let widget = this.initializeWidget(widgetElement);\n            if(widget.useAfterInitializeAllWidgets()) {\n                afterInitializeAllWidgets.push(widget);\n            }\n        }\n        for(let widget of afterInitializeAllWidgets) {\n            widget.afterInitializeAllWidgets();\n        }\n    }\n\n    /**\n     * Get the value of the ``data-ievv-jsbase-widget-instanceid`` attribute\n     * of the provided element.\n     *\n     * @param {Element} element A DOM element.\n     * @returns {null|string}\n     */\n    getWidgetInstanceIdFromElement(element) {\n        return element.getAttribute(this._widgetInstanceIdAttribute);\n    }\n\n    /**\n     * Get a widget instance by its widget instance id.\n     *\n     * @param widgetInstanceId A widget instance id.\n     * @returns {AbstractWidget} A widget instance or ``null``.\n     */\n    getWidgetInstanceByInstanceId(widgetInstanceId) {\n        return this._widgetInstanceMap.get(widgetInstanceId);\n    }\n\n    getWidgetInstanceFromElement(element) {\n        let widgetInstanceId = this.getWidgetInstanceIdFromElement(element);\n        if(widgetInstanceId) {\n            let widgetInstance = this.getWidgetInstanceByInstanceId(widgetInstanceId);\n            if(widgetInstance) {\n                return widgetInstance;\n            } else {\n                throw new ElementIsNotInitializedAsWidget(\n                    `Element\\n\\n${element.outerHTML}\\n\\nhas the ` +\n                    `${this._widgetInstanceIdAttribute} attribute, but the id is ` +\n                    `not in the widget registry.`);\n            }\n        } else {\n            throw new ElementHasNoWidgetInstanceIdError(\n                `Element\\n\\n${element.outerHTML}\\n\\nhas no or empty ` +\n                `${this._widgetInstanceIdAttribute} attribute.`);\n        }\n    }\n\n    /**\n     * Destroy the widget on the provided element.\n     *\n     * @param {Element} element A DOM element that has been initialized by\n     *      {@link WidgetRegistrySingleton#initializeWidget}.\n     *\n     * @throws {ElementHasNoWidgetInstanceIdError} If the element has\n     *      no ``data-ievv-jsbase-widget-instanceid`` attribute or the\n     *      attribute value is empty. This normally means that\n     *      the element is not a widget, or that the widget\n     *      is not initialized.\n     * @throws {ElementIsNotInitializedAsWidget} If the element\n     *      has the ``data-ievv-jsbase-widget-instanceid`` attribute\n     *      but the value of the attribute is not a valid widget instance\n     *      id. This should not happen unless you manipulate the\n     *      attribute manually or use the private members of this registry.\n     */\n    destroyWidget(element) {\n        let widgetInstanceId = this.getWidgetInstanceIdFromElement(element);\n        if(widgetInstanceId) {\n            let widgetInstance = this.getWidgetInstanceByInstanceId(widgetInstanceId);\n            if(widgetInstance) {\n                widgetInstance.destroy();\n                this._widgetInstanceMap.delete(widgetInstanceId);\n                element.removeAttribute(this._widgetInstanceIdAttribute);\n            } else {\n                throw new ElementIsNotInitializedAsWidget(\n                    `Element\\n\\n${element.outerHTML}\\n\\nhas the ` +\n                    `${this._widgetInstanceIdAttribute} attribute, but the id is ` +\n                    `not in the widget registry.`);\n                }\n        } else {\n            throw new ElementHasNoWidgetInstanceIdError(\n                `Element\\n\\n${element.outerHTML}\\n\\nhas no or empty ` +\n                `${this._widgetInstanceIdAttribute} attribute.`);\n        }\n    }\n\n    _getAllInstanciatedWidgetElementsWithinElement(element) {\n        return Array.from(element.querySelectorAll(`[${this._widgetInstanceIdAttribute}]`));\n    }\n\n    /**\n     * Destroy all widgets within the provided element.\n     * Only destroys widgets on elements that is a child of the element.\n     *\n     * @param {Element} element The DOM Element.\n     */\n    destroyAllWidgetsWithinElement(element) {\n        for(let widgetElement of this._getAllInstanciatedWidgetElementsWithinElement(element)) {\n            this.destroyWidget(widgetElement);\n        }\n    }\n}\n"
  },
  {
    "__docId__": 473,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_instance",
    "memberof": "source/widget/WidgetRegistrySingleton.js",
    "longname": "source/widget/WidgetRegistrySingleton.js~_instance",
    "access": null,
    "export": false,
    "importPath": "ievv_jsbase/lib/widget/WidgetRegistrySingleton",
    "importStyle": null,
    "description": "The instance of the {@link WidgetRegistrySingleton}.",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ElementHasNoWidgetInstanceIdError",
    "memberof": "source/widget/WidgetRegistrySingleton.js",
    "longname": "source/widget/WidgetRegistrySingleton.js~ElementHasNoWidgetInstanceIdError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/widget/WidgetRegistrySingleton",
    "importStyle": "{ElementHasNoWidgetInstanceIdError}",
    "description": "Exception thrown when an element where we expect the\n``data-ievv-jsbase-widget-instanceid`` attribute does\nnot have this attribute.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 475,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ElementIsNotWidgetError",
    "memberof": "source/widget/WidgetRegistrySingleton.js",
    "longname": "source/widget/WidgetRegistrySingleton.js~ElementIsNotWidgetError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/widget/WidgetRegistrySingleton",
    "importStyle": "{ElementIsNotWidgetError}",
    "description": "Exception thrown when an element that we expect to have\nthe ``data-ievv-jsbase-widget`` attribute does not have\nthis attribute.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 476,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "InvalidWidgetAliasError",
    "memberof": "source/widget/WidgetRegistrySingleton.js",
    "longname": "source/widget/WidgetRegistrySingleton.js~InvalidWidgetAliasError",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/widget/WidgetRegistrySingleton",
    "importStyle": "{InvalidWidgetAliasError}",
    "description": "Exception thrown when an element has a\n``data-ievv-jsbase-widget`` with a value that\nis not an alias registered in the {@link WidgetRegistrySingleton}.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 477,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ElementIsNotInitializedAsWidget",
    "memberof": "source/widget/WidgetRegistrySingleton.js",
    "longname": "source/widget/WidgetRegistrySingleton.js~ElementIsNotInitializedAsWidget",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/widget/WidgetRegistrySingleton",
    "importStyle": "{ElementIsNotInitializedAsWidget}",
    "description": "Exception thrown when an element with the\n``data-ievv-jsbase-widget-instanceid=<widgetInstanceId>`` attribute is not in\nthe {@link WidgetRegistrySingleton} with ``<widgetInstanceId>``.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 478,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "WidgetRegistrySingleton",
    "memberof": "source/widget/WidgetRegistrySingleton.js",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "access": null,
    "export": true,
    "importPath": "ievv_jsbase/lib/widget/WidgetRegistrySingleton",
    "importStyle": "WidgetRegistrySingleton",
    "description": "A very lightweight widget system.\n\nBasic example below - see {@link AbstractWidget} for more examples.",
    "examples": [
      "<caption>Create a very simple widget</caption>\nexport default class OpenMenuWidget extends AbstractWidget {\n    constructor(element) {\n         super(element);\n         this._onClickBound = (...args) => {\n             this._onClick(...args);\n         };\n         this.element.addEventListener('click', this._onClickBound);\n    }\n\n    _onClick = (e) => {\n         e.preventDefault();\n         console.log('I should have opened the menu here');\n    }\n\n    destroy() {\n         this.element.removeEventListener('click', this._onClickBound);\n    }\n}",
      "<caption>Use the widget</caption>\n<button data-ievv-jsbase-widget=\"open-menu-button\" type=\"button\">\n    Open menu\n</button>",
      "<caption>Register and load widgets</caption>\n// Somewhere that is called after all the widgets are rendered\n// - typically at the end of the <body>\nimport WidgetRegistrySingleton from 'ievv_jsbase/widget/WidgetRegistrySingleton';\nimport OpenMenuWidget from 'path/to/OpenMenuWidget';\nconst widgetRegistry = new WidgetRegistrySingleton();\nwidgetRegistry.registerWidgetClass('open-menu-button', OpenMenuWidget);\nwidgetRegistry.initializeAllWidgetsWithinElement(document.body);"
    ],
    "lineNumber": 89,
    "interface": false
  },
  {
    "__docId__": 479,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#constructor",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 480,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_initialize",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_initialize",
    "access": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 481,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_widgetAttribute",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_widgetAttribute",
    "access": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_widgetInstanceIdAttribute",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_widgetInstanceIdAttribute",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_widgetClassMap",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_widgetClassMap",
    "access": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_widgetInstanceMap",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_widgetInstanceMap",
    "access": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_widgetInstanceCounter",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_widgetInstanceCounter",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#clear",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 487,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_widgetInstanceCounter",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_widgetInstanceCounter",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerWidgetClass",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#registerWidgetClass",
    "access": null,
    "description": "Register a widget class in the registry.",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "alias",
        "description": "The alias for the widget. This is the string that\n     is used as the attribute value with the ``data-ievv-jsbase-widget``\n     DOM element attribute."
      },
      {
        "nullable": null,
        "types": [
          "AbstractWidget"
        ],
        "spread": false,
        "optional": false,
        "name": "WidgetClass",
        "description": "The widget class."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 489,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeWidgetClass",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#removeWidgetClass",
    "access": null,
    "description": "Remove widget class from registry.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alias",
        "description": "The alias that the widget class was registered with\n     by using {@link WidgetRegistrySingleton#registerWidgetClass}."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 490,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializeWidget",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#initializeWidget",
    "access": null,
    "description": "Initialize the provided element as a widget.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The DOM element to initalize as a widget."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "ElementIsNotWidgetError"
        ],
        "description": "If the element does not have\n     the ``data-ievv-jsbase-widget`` attribute."
      },
      {
        "types": [
          "InvalidWidgetAliasError"
        ],
        "description": "If the widget alias is not in this registry."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 491,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllWidgetElementsWithinElement",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_getAllWidgetElementsWithinElement",
    "access": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 492,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializeAllWidgetsWithinElement",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#initializeAllWidgetsWithinElement",
    "access": null,
    "description": "Initialize all widgets within the provided element.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "A DOM element."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 493,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getWidgetInstanceIdFromElement",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#getWidgetInstanceIdFromElement",
    "access": null,
    "description": "Get the value of the ``data-ievv-jsbase-widget-instanceid`` attribute\nof the provided element.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "A DOM element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 494,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getWidgetInstanceByInstanceId",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#getWidgetInstanceByInstanceId",
    "access": null,
    "description": "Get a widget instance by its widget instance id.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AbstractWidget} A widget instance or ``null``."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetInstanceId",
        "description": "A widget instance id."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractWidget"
      ],
      "spread": false,
      "description": "A widget instance or ``null``."
    },
    "generator": false
  },
  {
    "__docId__": 495,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getWidgetInstanceFromElement",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#getWidgetInstanceFromElement",
    "access": null,
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 496,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroyWidget",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#destroyWidget",
    "access": null,
    "description": "Destroy the widget on the provided element.",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "A DOM element that has been initialized by\n     {@link WidgetRegistrySingleton#initializeWidget}."
      }
    ],
    "throws": [
      {
        "types": [
          "ElementHasNoWidgetInstanceIdError"
        ],
        "description": "If the element has\n     no ``data-ievv-jsbase-widget-instanceid`` attribute or the\n     attribute value is empty. This normally means that\n     the element is not a widget, or that the widget\n     is not initialized."
      },
      {
        "types": [
          "ElementIsNotInitializedAsWidget"
        ],
        "description": "If the element\n     has the ``data-ievv-jsbase-widget-instanceid`` attribute\n     but the value of the attribute is not a valid widget instance\n     id. This should not happen unless you manipulate the\n     attribute manually or use the private members of this registry."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 497,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllInstanciatedWidgetElementsWithinElement",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#_getAllInstanciatedWidgetElementsWithinElement",
    "access": null,
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 498,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroyAllWidgetsWithinElement",
    "memberof": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton",
    "longname": "source/widget/WidgetRegistrySingleton.js~WidgetRegistrySingleton#destroyAllWidgetsWithinElement",
    "access": null,
    "description": "Destroy all widgets within the provided element.\nOnly destroys widgets on elements that is a child of the element.",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The DOM Element."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 500,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 501,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 502,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 503,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 504,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 505,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 506,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 507,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 508,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 509,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 510,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 511,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 512,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 513,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 514,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 515,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 516,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 517,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 518,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 519,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 520,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 521,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 522,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 523,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 524,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 525,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 526,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 527,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 528,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 529,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 530,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 531,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 532,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 533,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 534,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 535,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 536,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 537,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 538,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 539,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 540,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 541,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 542,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 543,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 544,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 545,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 546,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 548,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 549,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 550,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 551,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 552,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 553,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 554,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 555,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]